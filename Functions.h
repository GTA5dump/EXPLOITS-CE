#include "Design.h"
#include "INIReader.h"
#include "Utilities.h"

//#define ADMIN
#define BETA
//#define CLIENT


#pragma region GTA_V OFFSETS
	DWORD keys2[] = {0x831AC1C0, 0x835212A8, 0x835211D0, 0x835118E8, 0x8320210, 0x83212E8, 0x8252ED62};
#pragma endregion
namespace Base_MENU {

	namespace INTERNAL {

		void menuTimeoutFix_Loop()
		{
			if (ENTITY::IS_ENTITY_DEAD(PLAYER::PLAYER_PED_ID()) && submenu != Closed)
			{
				lastSubmenu[submenuLevel] = submenu;
				lastOption[submenuLevel] = currentOption;
				submenu = Closed;
			}
			if (submenu != Closed)
			{
				menuTimeout++;
				if (menuTimeout > 30000 || !PLAYER::IS_PLAYER_PLAYING(PLAYER::PLAYER_ID()))
				{
					lastSubmenu[submenuLevel] = submenu;
					lastOption[submenuLevel] = currentOption;
					submenu = Closed;
				}
			}
			if (submenu == Closed)
			{
				hasBeenUsed = false;
				menuTimeout = 0;
			}
			if (hasBeenUsed == true)
			{
				hasBeenUsed = false;
				menuTimeout = 0;
			}
		}
	}
}


static void TriggerScriptEvent(int* Args, int ArgCount, Player BitsetPlayer)
{
	int Bitset = 0;
	GAMEPLAY::SET_BIT(&Bitset, BitsetPlayer);
	if (Bitset != 0) {
		SCRIPT::TRIGGER_SCRIPT_EVENT2(1, Args, ArgCount, Bitset);
	}
}
void NotifyAboveMap(char* Text)
{
	UI::_0x574EE85C("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING3(Text);
	UI::_DRAW_NOTIFICATION(2000, 1);

}
void sendText(int player, char *text)
{
	int NetHandleBuffer[2];
	NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &NetHandleBuffer[0], 13);
	NETWORK::NETWORK_SEND_TEXT_MESSAGE(text, &NetHandleBuffer[0]);
	NotifyAboveMap(text);
}
char ITStringOut[32];
char *IntToString(int number)
{
	sprintf(ITStringOut, "%i", number);
	return ITStringOut;
}
int globalsAddress;
int pedGlobals;
int FindGlobalPointer() {
	return globalsAddress = *(int*)GLOBALS_POINTER;
}

int getGlobals(int imm, int player)
{
	globalsAddress = FindGlobalPointer();
	int global = globalsAddress + 0x8dec;
	global += imm + (player * 0x4c8);
	return pedGlobals = *(int*)global;
	int Money = getGlobals(0x8, selectedPlayer);
}

bool RequestNetworkControl(uint vehID)
{
	int Tries = 0;
	bool
		hasControl = false,
		giveUp = false;
	do
	{
		hasControl = NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehID);
		Tries++;
		if (Tries > 300)
			giveUp = true;
	} while (!hasControl && !giveUp);

	if (giveUp)
		return false;
	else return true;
}
void AddAnimationOnline(char* AnimDict, char* AnimnName)
{
	int POnline = PLAYER::GET_PLAYER_PED(selectedPlayer);
	Vector3 coords = ENTITY::GET_ENTITY_COORDS(POnline, 1);
	STREAMING::REQUEST_ANIM_DICT(AnimDict);
	if (STREAMING::HAS_ANIM_DICT_LOADED(AnimDict))
	{
		int AnimID = CLIENT::CLIENT_CREATE_ANIMATION(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f, 0.0f, 1.0f);
		CLIENT::ADD_CLIENT_ANIMATION(POnline, AnimID, AnimDict, AnimnName, 8.0f, -8.0f, 120, 0, 100, 0);
		CLIENT::CLIENT_START_ANIMATION(AnimID);
		AnimationsPlayerOnline = false;
	}
}

void printscreeneljackson(char *text, ...)
{

	UI::CLEAR_PRINTS();

	char Buffer[0x400];
	va_list VA_ARGS;
	va_start(VA_ARGS, text);
	vsprintf(Buffer, text, VA_ARGS);

	UI::_0xF42C43C7("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(Buffer);
	UI::_0x38F82261(4500, 1);
}

int scriptsetModel = -1;
int contadoreljackson = 0;
int typecarcrash = 0;
bool tiempoparacrashearlimite = false;
bool freezecaraccionador = false;
int modelhashfreezecar = 0;

void fatalinvisible5x2(int player)
{
	contadoreljackson = 0;
	tiempoparacrashearlimite = true;
	scriptsetModel = 0x3F039CBA;
}
void fatalinvisible6x2(int player)
{
	contadoreljackson = 0;
	tiempoparacrashearlimite = true;
	scriptsetModel = 0x856CFB02;
}
void fatalinvisible7x2(int player)
{
	contadoreljackson = 0;
	tiempoparacrashearlimite = true;
	scriptsetModel = 0x2D7030F3;
}
void fatalcarinvisible1(int player)
{
	typecarcrash = 1;
	freezecaraccionador = true;
}
void fatalcarinvisible3(int player)
{
	typecarcrash = 2;
	freezecaraccionador = true;
}
void fatalcarinvisible2(int player)
{
	typecarcrash = 3;
	freezecaraccionador = true;
}
void fatalcarinvisible4(int player)
{
	typecarcrash = 4;
	freezecaraccionador = true;
}

void SpectatePlayer(int entity)
{
	Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(entity, false);
	if (ENTITY::DOES_ENTITY_EXIST(entity))
	{
		RequestNetworkControl(entity);
		Vector3 Rotaci�n = ENTITY::GET_ENTITY_ROTATION(PLAYER::PLAYER_PED_ID(), 1);
		CAM::DESTROY_ALL_CAMS(TRUE);
		int c�mara = CAM::CREATE_CAM("DEFAULT_SCRIPTED_FLY_CAMERA", TRUE);
		CAM::ATTACH_CAM_TO_ENTITY(c�mara, entity, 0, 0.5, 0.8, TRUE);
		//CAM::SET_CAM_FOV(c�mara, 60);
		CAM::SET_CAM_ACTIVE(c�mara, TRUE);
		//CAM::SET_CAM_ROT(c�mara, Rotaci�n x, Rotaci�n, y, Rotaci�n, z, 1);
		CAM::SET_CAM_INHERIT_ROLL_VEHICLE(c�mara, TRUE);
		CAM::RENDER_SCRIPT_CAMS(TRUE, FALSE, 0, TRUE, TRUE);
	}
}

bool RequestNetworkControl(int playerHandle, int carHandle)
{
	int Vehicle = PED::GET_VEHICLE_PED_IS_IN(playerHandle, 0);
	if (ENTITY::DOES_ENTITY_EXIST(carHandle) && ENTITY::IS_ENTITY_A_VEHICLE(carHandle))
	{
		if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(carHandle))
		{
			if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(carHandle))
			{
				return true;
			}
		}
	}
	return false;
}


char *dict = "oddjobs@bailbond_mountain";
void teleportocean(int player)
{
	int targ_ped = PLAYER::GET_PLAYER_PED(player);
	STREAMING::REQUEST_ANIM_DICT(dict);
	if (STREAMING::HAS_ANIM_DICT_LOADED(dict))
	{
		int sceneID = CLIENT::CLIENT_CREATE_ANIMATION(103.4720, 7744.1870, -158.1106, 0, 0, 0, 2, 0, 1, 1.0f, 0.0f, 1.0f);
		CLIENT::_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(targ_ped, sceneID, dict, anim, 1000.0f, -1000.0f, 3, 1, 1148846080);
		CLIENT::_NETWORK_START_SYNCHRONISED_SCENE(sceneID);
	}
}



void CheckExploitCEini()
{
	if (!FileExists(ExploitCEINI)) {
		!ININOTIFY1[0] ? XNotify(L"ExploitCE - INI NOT FOUND ASK SUPPORT FOR IT!", 0x0E), ININOTIFY1[0] = TRUE : NULL;
	}
	else {
		!ININOTIFY2[0] ? XNotify(L"ExploitCE - INI Found & Loaded!", 0x0E), ININOTIFY2[0] = TRUE : NULL;
	}
}



void storeSys_CustomIP(unsigned char r3, unsigned char r4, unsigned char r5, unsigned char r6) {
	__asm {
		lis r7, 0x1F9E
		ori r7, r7, 0x3E0F
		lis r8, 0xDEAD
		ori r8, r8, 0xBEEF
		xor r9, r8, r7
		xori r3, r3, 0xDEAD
		stb r3, 0x00(r9)
		xori r4, r4, 0xBEEF
		stb r4, 0x01(r9)
		xori r5, r5, 0xDEAD
		stb r5, 0x02(r9)
		xori r6, r6, 0xBEEF
		stb r6, 0x03(r9)
	}
}
char keyBuffer2[256];//Coder
unsigned int get_hash_key(char *key, ...)//Coder added ", ..."
{
	va_list keyargs;//Coder
	va_start(keyargs, key);//Coder
	vsprintf(keyBuffer2, key, keyargs);//Coder
	va_end(keyargs);//Coder

					//size_t len = strlen(key);
	size_t len = strlen(keyBuffer2);//Coder
	unsigned int hash, i;
	for (hash = i = 0; i < len; ++i)
	{
		//hash += tolower(key[i]);
		hash += tolower(keyBuffer2[i]);//Coder
		hash += (hash << 10);
		hash ^= (hash >> 6);
	}
	hash += (hash << 3);
	hash ^= (hash >> 11);
	hash += (hash << 15);
	return hash;
}
void ChangeGamertag2(char *gamertag)
{
	if (strlen(gamertag) < 16)
	{
		//Image
		strcpy((char*)(0x83C9AF74), gamertag);
		strcpy((char*)(0x83D818E8), gamertag); // disconnector
		strcpy((char*)(0x83D88870), gamertag);
		strcpy((char*)(0x83D8EF80), gamertag);
		strcpy((char*)(0x83DABECC), gamertag);
		strcpy((char*)(0x83DAC614), gamertag); // disconnector
		strcpy((char*)(0x83DCA574), gamertag);

		//RAM
		strcpy((char*)(0xC031E68C), gamertag);
		strcpy((char*)(0xC145C258), gamertag);
		strcpy((char*)(0xC21ABECC), gamertag);
		strcpy((char*)(0xC21AC614), gamertag); // disconnector
		strcpy((char*)(0xC21C18E8), gamertag); // disconnector
		strcpy((char*)(0xC21C8870), gamertag);
		strcpy((char*)(0xC21CEF80), gamertag);
		strcpy((char*)(0xC22AAC0C), gamertag);
		strcpy((char*)(0xC22BAF74), gamertag);
		strcpy((char*)(0xC3FCA3BC), gamertag);
		strcpy((char*)(0xDFBCC1AC), gamertag);
		//Client side
		char buf[512];
		strcpy((char*)(0xDFBCC1AC), gamertag);
		sprintf(buf, "Gamertag Set To: ~b~%s ~w~Change Lobbies For This To Take Effect", gamertag);
		drawNotification(buf);
	}
	else if (strlen(gamertag) > 15)
	{
		drawNotification("Gamertag length to long, It needs to be less than 15 characters including special characters");
	}
}

void setipbits()
{
	CHAR IPBuffer[256];
	INIReader ExploitCEini("HDD:\\ExploitCE.ini");
	IPSpoof1 = ExploitCEini.GetInteger("IP_OPTIONS", "IP_Part_1", 5);
	IPSpoof2 = ExploitCEini.GetInteger("IP_OPTIONS", "IP_Part_2", 5);
	IPSpoof3 = ExploitCEini.GetInteger("IP_OPTIONS", "IP_Part_3", 5);
	IPSpoof4 = ExploitCEini.GetInteger("IP_OPTIONS", "IP_Part_4", 5);
}


void DAIPSPOOFING()
{
	INIReader ExploitCEini("HDD:\\ExploitCE.ini");
	std::string IPSpoofing = ExploitCEini.Get("IP_OPTIONS", "IPSpoofing", "UNKNOWN");
	if (IPSpoofing == "TRUE")
	{
		ipspoofing = true;
		!DAIPSPOOFINGNotify[0] ? XNotify(L"ExploitCE - IP Spoofing: Enabled!", 0x0E), DAIPSPOOFINGNotify[0] = TRUE : NULL;
	}
	else if (IPSpoofing == "FALSE")
	{
		ipspoofing = false;
		!DAIPSPOOFINGNotify[0] ? XNotify(L"ExploitCE - IP Spoofing: Disabled!", 0x0E), DAIPSPOOFINGNotify[0] = TRUE : NULL;
	}

}

void Protectionsye()
{
	INIReader ExploitCEini("HDD:\\ExploitCE.ini");
	std::string Protections = ExploitCEini.Get("ExploitCE_Settings", "Protection_Notifications", "UNKNOWN");
	if (Protections == "TRUE")
	{
		protectionsss = true;
	}
	else if (Protections == "FALSE")
	{
		protectionsss = false;
	}

}

void _DRAW_TEXT(char * text, int Font, float X, float Y, float ScaleX, float ScaleY, int ColorR, int ColorG, int ColorB, int Alpha, int JustifyType)
{
	UI::SET_TEXT_FONT(Font);
	UI::SET_TEXT_SCALE(ScaleX, ScaleY);
	UI::SET_TEXT_COLOUR(ColorR, ColorG, ColorB, Alpha);
	UI::SET_TEXT_WRAP(0, X);
	UI::SET_TEXT_JUSTIFICATION(JustifyType);//68CDFA60
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
	UI::_SET_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::_DRAW_TEXT(X, Y);
}

void DrawNeons(int R, int G, int B)
{
	int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(VehicleID, true);
	GRAPHICS::DRAW_LIGHT_WITH_RANGE_MadJoker(Coords.x, Coords.y, Coords.z, R, G, B, 4.0f, 2.0f);

}

void DrawNeons2(int R, int G, int B)
{
	int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(VehicleID, true);
	GRAPHICS::DRAW_LIGHT_WITH_RANGE_V2(Coords.x, Coords.y, Coords.z, R, G, B, 4.0f, 2.0f);
}

void Neonsnew()
{
	int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	Vector3 Coords = ENTITY::GET_ENTITY_COORDS(VehicleID, true);
	GRAPHICS::DRAW_LIGHT_WITH_RANGE_MadJoker(Coords.x, Coords.y, Coords.z, NeonColour.R, NeonColour.G, NeonColour.B, 4.0f, 2.0f);
}

void LoopingNeons()
{
	DrawNeons(NeonR, NeonG, NeonB);
}

void NotifyAboveMap3(std::string Message, std::string Message2)
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING((LPSTR)Message.c_str());
	UI::_ADD_TEXT_COMPONENT_STRING((LPSTR)Message2.c_str());
	UI::_SET_NOTIFICATION_MESSAGE("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 2, "The E-Live Network", "~c~TU27/1.27");
	UI::_DRAW_NOTIFICATION2(2500, 1);
}

void getcustomgts()
{
	INIReader ExploitCEini("HDD:\\ExploitCE.ini");
	std::string GamertagCustom = ExploitCEini.Get("Gamertag_Spoofing", "Custom_Preset_1", "UNKNOWN");
	std::wstring GTCustom;

	for (size_t i = 0; i < GamertagCustom.length(); ++i)
		GTCustom += wchar_t(GamertagCustom[i]);

	const wchar_t* CustomGT = GTCustom.c_str();
	char mbstr[10];

	std::wcstombs(mbstr, CustomGT, 10);
	ChangeGamertag2(mbstr);
}

void INIINIT()
{
	Sleep(1500);
	CheckExploitCEini();
	Sleep(1500);
	DAIPSPOOFING();
	Sleep(1500);
	Protectionsye();
	Sleep(1500);
	setipbits();
	Sleep(1500);
}



void PrintText(char *text, int font, float x, float y, float scalex, float scaley, int r, int g, int b, int a, int position, bool outline)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_WRAP(0.0f, 1.0f);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);

	if (position == 0 || position == 1)
		UI::SET_TEXT_WRAP(0.0f, 1.0f);
	else
		UI::SET_TEXT_WRAP(0.0f, x);

	if (position == 1)
		UI::SET_TEXT_CENTRE(true);
	else if (position == 2)
		UI::SET_TEXT_RIGHT_JUSTIFY(true);

	if (outline)
		UI::SET_TEXT_OUTLINE();

	UI::_SET_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);

	UI::_DRAW_TEXT(x, y);
}

void SetProtectionMarquee(char* text, ...) {
	va_list args;
	va_start(args, text);
	vsprintf(eventTextBuf, text, args);
	va_end(args);
}



char* getStreetNameAtCoord(Vector3 coords)
{
	Hash streethash;
	Hash croadhash;
	PATHFIND::GET_STREET_NAME_AT_COORD(coords.x, coords.y, coords.z, &streethash, &croadhash);
	char* name = UI::GET_STREET_NAME_FROM_HASH_KEY(streethash);
	return name;
}

void SpectateMode(bool Active, Ped selectedPed)
{
	NETWORK::NETWORK_SET_IN_SPECTATOR_MODE(Active, selectedPed);
}

void Notification(char* msg)
{
	//MessageHandle = msg;
	//NotifyBase = true;
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(msg);
	UI::_DRAW_NOTIFICATION(5000, 1);
}


void AIWanderCar(Ped playerPed)
{
	Vehicle playerVeh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
	AI::TASK_VEHICLE_DRIVE_WANDER(playerPed, playerVeh, 100.0f, 0);
}
void GetEntityCoords(int Handle, float* position)
{
	ENTITY::GET_ENTITY_COORDS3(Handle, position);
}


void esplooop()
{
	int Red = 10, Green = 50, Blue = 180, Opac = 255;
	int id = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
	float MyRegCoords[3];
	float IDRegCoords[3];

	GetEntityCoords(PLAYER::PLAYER_PED_ID(), MyRegCoords);
	GetEntityCoords(id, IDRegCoords);

	float LineOneBegin[3];
	float LineOneEnd[3];
	float LineTwoBegin[3];
	float LineTwoEnd[3];
	float LineThreeBegin[3];
	float LineThreeEnd[3];
	float LineFourBegin[3];
	float TLineOneBegin[3];
	float TLineOneEnd[3];
	float TLineTwoBegin[3];
	float TLineTwoEnd[3];
	float TLineThreeBegin[3];
	float TLineThreeEnd[3];
	float TLineFourBegin[3];

	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, -.9, LineOneBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, -.9, LineOneEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, -.9, LineTwoBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, -.9, LineTwoEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, -.9, LineThreeBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, +0.3, -.9, LineThreeEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, -.9, LineFourBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, +0.8, TLineOneBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, +0.8, TLineOneEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, +0.8, TLineTwoBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, +0.8, TLineTwoEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, +0.8, TLineThreeBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, +0.3, +0.8, TLineThreeEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, +0.8, TLineFourBegin);

	GRAPHICS::DRAW_LINE(LineOneBegin[0], LineOneBegin[1], LineOneBegin[2], LineOneEnd[0], LineOneEnd[1], LineOneEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(LineTwoBegin[0], LineTwoBegin[1], LineTwoBegin[2], LineTwoEnd[0], LineTwoEnd[1], LineTwoEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(LineThreeBegin[0], LineThreeBegin[1], LineThreeBegin[2], LineThreeEnd[0], LineThreeEnd[1], LineThreeEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(LineThreeEnd[0], LineThreeEnd[1], LineThreeEnd[2], LineFourBegin[0], LineFourBegin[1], LineFourBegin[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(TLineOneBegin[0], TLineOneBegin[1], TLineOneBegin[2], TLineOneEnd[0], TLineOneEnd[1], TLineOneEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(TLineTwoBegin[0], TLineTwoBegin[1], TLineTwoBegin[2], TLineTwoEnd[0], TLineTwoEnd[1], TLineTwoEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(TLineThreeBegin[0], TLineThreeBegin[1], TLineThreeBegin[2], TLineThreeEnd[0], TLineThreeEnd[1], TLineThreeEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(TLineThreeEnd[0], TLineThreeEnd[1], TLineThreeEnd[2], TLineFourBegin[0], TLineFourBegin[1], TLineFourBegin[2], Red, Green, Blue, Opac);

	float ConnectorOneBegin[3];
	float ConnectorOneEnd[3];
	float ConnectorTwoBegin[3];
	float ConnectorTwoEnd[3];
	float ConnectorThreeBegin[3];
	float ConnectorThreeEnd[3];
	float ConnectorFourBegin[3];
	float ConnectorFourEnd[3];

	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, +0.3, +0.8, ConnectorOneBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, +0.3, -.9, ConnectorOneEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, +0.8, ConnectorTwoBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, +0.3, -.9, ConnectorTwoEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, +0.8, ConnectorThreeBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, -.3, -.3, -.9, ConnectorThreeEnd);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, +0.8, ConnectorFourBegin);
	ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(id, +0.3, -.3, -.9, ConnectorFourEnd);

	GRAPHICS::DRAW_LINE(ConnectorOneBegin[0], ConnectorOneBegin[1], ConnectorOneBegin[2], ConnectorOneEnd[0], ConnectorOneEnd[1], ConnectorOneEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(ConnectorTwoBegin[0], ConnectorTwoBegin[1], ConnectorTwoBegin[2], ConnectorTwoEnd[0], ConnectorTwoEnd[1], ConnectorTwoEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(ConnectorThreeBegin[0], ConnectorThreeBegin[1], ConnectorThreeBegin[2], ConnectorThreeEnd[0], ConnectorThreeEnd[1], ConnectorThreeEnd[2], Red, Green, Blue, Opac);
	GRAPHICS::DRAW_LINE(ConnectorFourBegin[0], ConnectorFourBegin[1], ConnectorFourBegin[2], ConnectorFourEnd[0], ConnectorFourEnd[1], ConnectorFourEnd[2], Red, Green, Blue, Opac);

	float Pos[3];
	float Pos2[3];

	int PedID = PLAYER::GET_PLAYER_PED(PLAYER::GET_PLAYER_PED(selectedPlayer));
	GetEntityCoords(PLAYER::PLAYER_PED_ID(), Pos);
	GetEntityCoords(PedID, Pos2);

	GRAPHICS::DRAW_LINE(Pos[0], Pos[1], Pos[2], Pos2[0], Pos2[1], Pos2[2], Red, Green, Blue, Opac);
}

bool IS_PLAYER_FRIEND(int player)
{
	bool PyIsFriend = false;
	int handle[76];
	NETWORK::NETWORK_HANDLE_FROM_PLAYER12(player, &handle[0], 13);
	if (NETWORK::NETWORK_IS_HANDLE_VALID(&handle[0], 13))
	{
		PyIsFriend = NETWORK::NETWORK_IS_FRIEND(&handle[0]);
	}
	if (PyIsFriend)
		PyIsFriend = true;
	else
		PyIsFriend = false;

	return PyIsFriend;
}

void doAnimation(Ped ped, char *animSet, char *animName)
{
	animNeeded = true;
	pedToDoAnimOn = ped;
	animSetToDo = animSet;
	animNameToDo = animName;
	STREAMING::REQUEST_ANIM_DICT(animSetToDo);
}

float pcoords[3];
int CREATE_VEHICLE_NORMAL4(Hash VehicleName, float Location, float Location2, float Location3, float haiding, int n, int y)
{
	Hash VehicleHash = (VehicleName);
	Vehicle Handle = 0;
	if (!STREAMING::HAS_MODEL_LOADED(VehicleHash))
		STREAMING::REQUEST_MODEL(VehicleHash);
	if (STREAMING::HAS_MODEL_LOADED(VehicleHash))
	{
		Handle = VEHICLE::CREATE_VEHICLE(VehicleHash, Location, Location2, Location3, haiding, n, y);//Doesn't normal use this? idk, compare this with above
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
	}
	return Handle;
}
int FindTunablesPointer()
{
	return TunablesAddress = (*(int*)TUNABLES_POINTER) + 4;
}


void addAttachmentOption(char *option, Hash model, int BoneIndex, float x10, float y10, float z10, float x20, float y20, float z20, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
		{
			STREAMING::REQUEST_MODEL(model);
			Ped ped = PLAYER::GET_PLAYER_PED(selectedPlayer);
			Vector3 Attachcoords;
			Attachcoords = ENTITY::GET_ENTITY_COORDS(ped, 1);
			int Bone = PED::GET_PED_BONE_INDEX(ped, BoneIndex);
			if (STREAMING::HAS_MODEL_LOADED(model)) {
				int attachobj = OBJECT::CREATE_OBJECT(model, Attachcoords.x, Attachcoords.y, Attachcoords.z, 0, 0, 0);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(attachobj, ped, Bone, x10, y10, z10, x20, y20, z20, 0, 0, 0, 0, 0, 0);
			}
		}
	}
}

int getOptionint()
{
	return currentOption;
}

void GetRGB(RGBTypes RGBType)
{
	CurrentRGBType = RGBType;
	CurrentRGBActive = true;
	RGB_Delay = GAMEPLAY::GET_GAME_TIMER() + 100;
	CurrentControlType = con_RGB_Select;
}

bool FreezeConsole_()
{
	if (FreezeConsole)
	{
		STREAMING::REQUEST_MODEL(0x4498DDE);
		Vector3 Loc = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		if (STREAMING::HAS_MODEL_LOADED(0x4498DDE))
		{
			int Crash = (PED::CREATE_PED(21, 0x3F039CBA, Loc.x, Loc.y, Loc.z, 0, 1, 0));
			if (ENTITY::DOES_ENTITY_EXIST(Crash))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x4498DDE);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Crash, selectedPlayer, -1, 0, -0.3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1);
				NotifyAboveMap("Freeze Console In Process");
				return true;
			}
			return false;
		}
		return false;
	}
}

bool doSpecial1 = false;
bool Special1()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("zentorno");
	int hash2 = GAMEPLAY::GET_HASH_KEY("kuruma2");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSpecial2 = false;
bool Special2()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 1, a.z = 0.8;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("buzzard");
	int hash2 = GAMEPLAY::GET_HASH_KEY("submersible");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 255, 149, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSpecial3 = false;
bool Special3()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
	Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
	Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
	Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
	Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
	Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
	Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
	Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
	Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
	int hash2 = GAMEPLAY::GET_HASH_KEY("slamvan2");
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
	int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
	int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hash3);
	STREAMING::REQUEST_MODEL(hash4);
	STREAMING::REQUEST_MODEL(hash5);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
		int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
		int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 8, 17, 30);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 30, 1);
			VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 92, 0);
			VEHICLE::SET_VEHICLE_COLOURS(Object, 12, 53);
			VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);
			VEHICLE::TOGGLE_VEHICLE_MOD(Object, 18, 1);
			VEHICLE::TOGGLE_VEHICLE_MOD(Object, 22, 1);
			VEHICLE::SET_VEHICLE_MOD(Object, 11, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Object, 14, 14, 0);
			VEHICLE::SET_VEHICLE_MOD(Object, 15, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Object, 13, 2, 0);
			VEHICLE::SET_VEHICLE_WHEEL_TYPE(Object, 6);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_MOD(Object, 23, 18, 1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSpecial4 = false;
bool Special4()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0.;

	Vector3 a; a.x = 0.0, a.y = 0.0, a.z = 0.6;		// seashark 1 - 0.7 worked just hard to get on .. infront and behind wings only way to get on the sharks ...
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;

	Vector3 a1; a1.x = 0.0, a1.y = -4.0, a1.z = 0.6;  // seashark 2
	Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;


	Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
	Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

	int hash = GAMEPLAY::GET_HASH_KEY("hydra");
	int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05"); // turn this into something usefull maybe another sea shark ...
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hash3);

	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object1 = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}


void DelectVehicleIn()
{
	if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
	{
		Vehicle veh = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
		int tries = 0;
		while (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(veh) && tries < 10000) {
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(veh);
			tries++;
		}
		ENTITY::SET_ENTITY_AS_MISSION_ENTITY(veh, 0, 1);
		VEHICLE::DELETE_VEHICLE(&veh);
	}
}




bool doSpecial5 = false;
bool Special5()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//hash2_PANTO
	Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
	Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.2;//X Coord - Y Coord - Z Coord
	Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
											   //hash3_MiniGun
	Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
	Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
	Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
	//hash3_MiniGun2
	Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
	Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
	Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
	//hash4_WindScreen _ VANISHED NEEDS FIXING
	Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
	Vector3 a2; a2.x = 0.3, a2.y = 0.41, a2.z = 0.50;
	Vector3 b2; b2.x = -45.3, b2.y = 0.0, b2.z = -179.0;//87
														//hash4_RLWheel1
	Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
	Vector3 a3; a3.x = -0.90, a3.y = -1.2, a3.z = 0.0; // -0.23
	Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
	//hash4_RFWindScreen 
	Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
	Vector3 a4; a4.x = -0.3, a4.y = 0.41, a4.z = 0.5;
	Vector3 b4; b4.x = -45.3, b4.y = 0.0, b4.z = -179.0;
	//hash4_RRWheel1
	Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
	Vector3 a5; a5.x = 0.92, a5.y = -1.2, a5.z = 0.01;
	Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = -92.0;
	//PUNTO -- FUCK UP NEEDS FIXING 
	Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
	Vector3 a6; a6.x = 0.0, a6.y = 0.0, a6.z = -0.2;
	Vector3 b6; b6.x = 0.0, b6.y = 0.0, b6.z = 0.0;
	//SIDES LEFT
	Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
	Vector3 a7; a7.x = -0.75, a7.y = 0.7, a7.z = -0.3;
	Vector3 b7; b7.x = 90.0, b7.y = 0.0, b7.z = 0.0;
	//SIDES RIGHT
	Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
	Vector3 a8; a8.x = 0.75, a8.y = 0.7, a8.z = -0.3;
	Vector3 b8; b8.x = 90.0, b8.y = 0.0, b8.z = 0.0;

	int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
	int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
	int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
	int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
	int hash2 = GAMEPLAY::GET_HASH_KEY("panto");
	int hashWindow = GAMEPLAY::GET_HASH_KEY("prop_ballistic_shield");
	int hashSides = GAMEPLAY::GET_HASH_KEY("prop_cons_plank");




	STREAMING::REQUEST_MODEL(hashWindow);// WINDOW
	STREAMING::REQUEST_MODEL(hash2_EMP); // PANTO
	STREAMING::REQUEST_MODEL(hash3_MiniGun); // GUNS
	STREAMING::REQUEST_MODEL(hash4_Wheel); // back wheels
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hashSides); // SIDE SKIRTS

	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hashSides) && STREAMING::HAS_MODEL_LOADED(hashWindow) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
	{
		int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
		int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
		int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
		int WINDOW_1 = OBJECT::CREATE_OBJECT(hashWindow, null2.x, null2.y, null2.z, 1, 0, 1);
		int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
		int WINDOW_2 = OBJECT::CREATE_OBJECT(hashWindow, null4.x, null4.y, null4.z, 1, 0, 1);
		int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
		int LeftSide = OBJECT::CREATE_OBJECT(hashSides, null7.x, null7.y, null7.z, 1, 0, 1);
		int RightSide = OBJECT::CREATE_OBJECT(hashSides, null8.x, null8.y, null8.z, 1, 0, 1);


		if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(LeftSide) && ENTITY::DOES_ENTITY_EXIST(RightSide) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(WINDOW_1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(WINDOW_2) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
				VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle, 1);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Object, 1);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(WINDOW_2, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftSide, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RightSide, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);

				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool doSpecial6 = false;
bool Special6()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//hash2_Dozer
	Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
	Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.4;   //X Coord - Y Coord - Z Coord
	Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;   //Pitch - Roll - Yaw
												  //hash3_MiniGun LEFT
	Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
	Vector3 a1; a1.x = -0.70, a1.y = 1.80, a1.z = 0.98;
	Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
	//hash3_MiniGun2 RIGHT
	Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
	Vector3 a0; a0.x = 0.70, a0.y = 1.80, a0.z = 0.98;
	Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
	//hash4_Left BLUE left
	Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
	Vector3 a2; a2.x = -0.31, a2.y = 2.51, a2.z = 0.55;
	Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -175.0;//87 - 179
													  //hash4_NIONS LEFT/back
	Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
	Vector3 a3; a3.x = 0.5, a3.y = -3.0, a3.z = -0.36; // -0.23
	Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
	//hash4_Right BLUE LIGHT
	Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
	Vector3 a4; a4.x = 0.31, a4.y = 2.51, a4.z = 0.55;
	Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = -175.0;
	//hash4_NIONS RIGHT
	Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
	Vector3 a5; a5.x = 0.92, a5.y = -2.0, a5.z = 0.01;
	Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
	//ENGINE
	Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
	Vector3 a6; a6.x = 0.0, a6.y = 1.76, a6.z = 0.99;
	Vector3 b6; b6.x = -0.0, b6.y = 0.0, b6.z = 0.0;
	//SIDES LEFT EMP
	Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
	Vector3 a7; a7.x = -0.88, a7.y = -1.8, a7.z = 1.0;
	Vector3 b7; b7.x = 0.0, b7.y = -51.9, b7.z = 0.0;
	//SIDES RIGHT EMP
	Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
	Vector3 a8; a8.x = 0.88, a8.y = -1.8, a8.z = 1.0;
	Vector3 b8; b8.x = 0.0, b8.y = 51.9, b8.z = 0.0;
	//BEAR
	Vector3 null9; null9.x = 0, null9.y = 0; null9.z = 0;
	Vector3 a9; a9.x = -1.0, a9.y = 2.7, a9.z = -0.4;
	Vector3 b9; b9.x = 0.0, b9.y = 0.0, b9.z = 156.5;
	//SPIKES
	Vector3 null10; null10.x = 0, null10.y = 0; null10.z = 0;
	Vector3 a10; a10.x = -0.12, a10.y = 0.59, a10.z = 1.9;
	Vector3 b10; b10.x = 0.0, b10.y = 0.0, b10.z = 0.0;

	int hash = GAMEPLAY::GET_HASH_KEY("monster");				// Monster Truck
	int hash1 = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");	// Car Engine
	int hash2 = GAMEPLAY::GET_HASH_KEY("bulldozer");			// Dozer
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");		// Mini GUn 
	int hash4 = GAMEPLAY::GET_HASH_KEY("v_ilev_uvcheetah");		// Nion Lights <-- needs changing
	int hash5 = GAMEPLAY::GET_HASH_KEY("prop_air_lights_05a");	// Blue Lights	
	int hash6 = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");	// Emp Lights	
	int hash7 = GAMEPLAY::GET_HASH_KEY("prop_mem_teddy_02");	// Large Teddy	
	int hash8 = GAMEPLAY::GET_HASH_KEY("p_stinger_04");			// Stinger Spikes

	STREAMING::REQUEST_MODEL(hash); 	// MONSTER
	STREAMING::REQUEST_MODEL(hash1); 	// Car Engine
	STREAMING::REQUEST_MODEL(hash2); 	// DOZER
	STREAMING::REQUEST_MODEL(hash3); 	// GUNS
	STREAMING::REQUEST_MODEL(hash4); 	// Nion Lights
	STREAMING::REQUEST_MODEL(hash5);	// Blue Lights
	STREAMING::REQUEST_MODEL(hash6); 	// Emp Lights
	STREAMING::REQUEST_MODEL(hash7); 	// Large Teddy
	STREAMING::REQUEST_MODEL(hash8); 	// SPIKES

	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8))
	{
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
		int Ebox = OBJECT::CREATE_OBJECT(hash1, null.x, null.y, null.z, 1, 0, 1);
		int GunL = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
		int GunR = OBJECT::CREATE_OBJECT(hash3, null0.x, null0.y, null0.z, 1, 0, 1);
		int LSign = OBJECT::CREATE_OBJECT(hash4, null3.x, null3.y, null3.z, 1, 0, 1);
		int RSign = OBJECT::CREATE_OBJECT(hash4, null5.x, null5.y, null5.z, 1, 0, 1);
		int LBlight = OBJECT::CREATE_OBJECT(hash5, null2.x, null2.y, null2.z, 1, 0, 1);
		int RBlight = OBJECT::CREATE_OBJECT(hash5, null4.x, null4.y, null4.z, 1, 0, 1);
		int LeftEmp = OBJECT::CREATE_OBJECT(hash6, null7.x, null7.y, null7.z, 1, 0, 1);
		int RightEmp = OBJECT::CREATE_OBJECT(hash6, null8.x, null8.y, null8.z, 1, 0, 1);
		int Teddy = OBJECT::CREATE_OBJECT(hash7, null9.x, null9.y, null9.z, 1, 0, 1);
		int Spikes = OBJECT::CREATE_OBJECT(hash8, null10.x, null10.y, null10.z, 1, 0, 1);

		if (ENTITY::DOES_ENTITY_EXIST(Ebox) && ENTITY::DOES_ENTITY_EXIST(GunL) && ENTITY::DOES_ENTITY_EXIST(GunR) && ENTITY::DOES_ENTITY_EXIST(LSign) && ENTITY::DOES_ENTITY_EXIST(RSign) && ENTITY::DOES_ENTITY_EXIST(LBlight) && ENTITY::DOES_ENTITY_EXIST(RBlight) && ENTITY::DOES_ENTITY_EXIST(LeftEmp) && ENTITY::DOES_ENTITY_EXIST(RightEmp) && ENTITY::DOES_ENTITY_EXIST(Teddy) && ENTITY::DOES_ENTITY_EXIST(Spikes))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true);
				VEHICLE::SET_VEHICLE_MOD_KIT(Vehicle, 5);
				VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Ebox, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(GunL, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(GunR, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LBlight, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RBlight, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LSign, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RSign, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftEmp, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RightEmp, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Teddy, Vehicle, 0, a9.x, a9.y, a9.z, b9.x, b9.y, b9.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Spikes, Vehicle, 0, a10.x, a10.y, a10.z, b10.x, b10.y, b10.z, 0, 1, 0, 0, 2, 1);

				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

int CREATE_VEHICLE2(Hash VehicleHash, Vector3 Location, bool Invisible = false)
{
	Vehicle Handle = 0;
	STREAMING::REQUEST_MODEL(VehicleHash);
	if (STREAMING::HAS_MODEL_LOADED(VehicleHash))
	{
		Handle = VEHICLE::CREATE_VEHICLE2(VehicleHash, Location.x, Location.y, Location.z, 0, true, false);

		if (Invisible)
			ENTITY::SET_ENTITY_VISIBLE(Handle, false);
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
		{
			Vehicle Prev = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
			Vector3 PrevRotation = ENTITY::GET_ENTITY_ROTATION2(Prev, false);
			Vector3 Location = ENTITY::GET_ENTITY_COORDS(Prev, false);
			float Speed = ENTITY::GET_ENTITY_SPEED(Prev);
			VEHICLE::DELETE_VEHICLE(&Prev);
			VEHICLE::SET_VEHICLE_ENGINE_ON(Handle, true, true);
			ENTITY::SET_ENTITY_COORDS2(Handle, Location.x, Location.y, Location.z, true, false, false, true);
			ENTITY::SET_ENTITY_ROTATION(Handle, PrevRotation.x, PrevRotation.y, PrevRotation.z, 0, false);
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(Handle, Speed);
		}
		else
		{
			ENTITY::SET_ENTITY_HEADING(Handle, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()));
		}
		PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Handle, -1);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
	}
	return Handle;
}

bool doSpecial7 = false;
bool Special7()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//hash2_Dozer
	Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
	Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.4;   //X Coord - Y Coord - Z Coord
	Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 0.0;   //Pitch - Roll - Yaw
												  //hash3_MiniGun LEFT
	Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
	Vector3 a1; a1.x = -0.70, a1.y = 1.80, a1.z = 0.98;
	Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
	//hash3_MiniGun2 RIGHT
	Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
	Vector3 a0; a0.x = 0.70, a0.y = 1.80, a0.z = 0.98;
	Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
	//hash4_Left BLUE left
	Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
	Vector3 a2; a2.x = -0.31, a2.y = 2.51, a2.z = 0.55;
	Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -175.0;//87 - 179
													  //hash4_NIONS LEFT/back
	Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
	Vector3 a3; a3.x = 0.5, a3.y = -3.0, a3.z = -0.36; // -0.23
	Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = 86.0;
	//hash4_Right BLUE LIGHT
	Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
	Vector3 a4; a4.x = 0.31, a4.y = 2.51, a4.z = 0.55;
	Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = -175.0;
	//hash4_NIONS RIGHT
	Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
	Vector3 a5; a5.x = 0.92, a5.y = -2.0, a5.z = 0.01;
	Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
	//ENGINE
	Vector3 null6; null6.x = 0, null6.y = 0; null6.z = 0;
	Vector3 a6; a6.x = 0.0, a6.y = 1.76, a6.z = 0.86;
	Vector3 b6; b6.x = -0.0, b6.y = 0.0, b6.z = 0.0;
	//SIDES LEFT EMP
	Vector3 null7; null7.x = 0, null7.y = 0; null7.z = 0;
	Vector3 a7; a7.x = -0.88, a7.y = -1.8, a7.z = 1.0;
	Vector3 b7; b7.x = 0.0, b7.y = -51.9, b7.z = 0.0;
	//SIDES RIGHT EMP
	Vector3 null8; null8.x = 0, null8.y = 0; null8.z = 0;
	Vector3 a8; a8.x = 0.88, a8.y = -1.8, a8.z = 1.0;
	Vector3 b8; b8.x = 0.0, b8.y = 51.9, b8.z = 0.0;
	//BEAR
	Vector3 null9; null9.x = 0, null9.y = 0; null9.z = 0;
	Vector3 a9; a9.x = -1.0, a9.y = 2.7, a9.z = -0.4;
	Vector3 b9; b9.x = 0.0, b9.y = 0.0, b9.z = 156.5;
	//SPIKES
	Vector3 null10; null10.x = 0, null10.y = 0; null10.z = 0;
	Vector3 a10; a10.x = -0.12, a10.y = 0.59, a10.z = 1.9;
	Vector3 b10; b10.x = 0.0, b10.y = 0.0, b10.z = 0.0;

	int hash = GAMEPLAY::GET_HASH_KEY("monster");				// Monster Truck
	int hash1 = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");	// Car Engine
	int hash2 = GAMEPLAY::GET_HASH_KEY("bulldozer");			// Dozer
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");		// Mini GUn 
	int hash4 = GAMEPLAY::GET_HASH_KEY("v_ilev_uvcheetah");		// Nion Lights <-- needs changing
	int hash5 = GAMEPLAY::GET_HASH_KEY("prop_air_lights_05a");	// Blue Lights	
	int hash6 = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");	// Emp Lights	
	int hash7 = GAMEPLAY::GET_HASH_KEY("prop_mem_teddy_02");	// Large Teddy	
	int hash8 = GAMEPLAY::GET_HASH_KEY("p_stinger_04");			// Stinger Spikes

	STREAMING::REQUEST_MODEL(hash); 	// MONSTER
	STREAMING::REQUEST_MODEL(hash1); 	// Car Engine
	STREAMING::REQUEST_MODEL(hash2); 	// DOZER
	STREAMING::REQUEST_MODEL(hash3); 	// GUNS
	STREAMING::REQUEST_MODEL(hash4); 	// Nion Lights
	STREAMING::REQUEST_MODEL(hash5);	// Blue Lights
	STREAMING::REQUEST_MODEL(hash6); 	// Emp Lights
	STREAMING::REQUEST_MODEL(hash7); 	// Large Teddy
	STREAMING::REQUEST_MODEL(hash8); 	// SPIKES

	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash1) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5) && STREAMING::HAS_MODEL_LOADED(hash6) && STREAMING::HAS_MODEL_LOADED(hash7) && STREAMING::HAS_MODEL_LOADED(hash8))
	{
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
		int Ebox = OBJECT::CREATE_OBJECT(hash1, null.x, null.y, null.z, 1, 0, 1);
		int GunL = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
		int GunR = OBJECT::CREATE_OBJECT(hash3, null0.x, null0.y, null0.z, 1, 0, 1);
		int LSign = OBJECT::CREATE_OBJECT(hash4, null3.x, null3.y, null3.z, 1, 0, 1);
		int RSign = OBJECT::CREATE_OBJECT(hash4, null5.x, null5.y, null5.z, 1, 0, 1);
		int LBlight = OBJECT::CREATE_OBJECT(hash5, null2.x, null2.y, null2.z, 1, 0, 1);
		int RBlight = OBJECT::CREATE_OBJECT(hash5, null4.x, null4.y, null4.z, 1, 0, 1);
		int LeftEmp = OBJECT::CREATE_OBJECT(hash6, null7.x, null7.y, null7.z, 1, 0, 1);
		int RightEmp = OBJECT::CREATE_OBJECT(hash6, null8.x, null8.y, null8.z, 1, 0, 1);
		int Teddy = OBJECT::CREATE_OBJECT(hash7, null9.x, null9.y, null9.z, 1, 0, 1);
		int Spikes = OBJECT::CREATE_OBJECT(hash8, null10.x, null10.y, null10.z, 1, 0, 1);

		if (ENTITY::DOES_ENTITY_EXIST(Ebox) && ENTITY::DOES_ENTITY_EXIST(GunL) && ENTITY::DOES_ENTITY_EXIST(GunR) && ENTITY::DOES_ENTITY_EXIST(LSign) && ENTITY::DOES_ENTITY_EXIST(RSign) && ENTITY::DOES_ENTITY_EXIST(LBlight) && ENTITY::DOES_ENTITY_EXIST(RBlight) && ENTITY::DOES_ENTITY_EXIST(LeftEmp) && ENTITY::DOES_ENTITY_EXIST(RightEmp) && ENTITY::DOES_ENTITY_EXIST(Teddy) && ENTITY::DOES_ENTITY_EXIST(Spikes))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true);
				VEHICLE::SET_VEHICLE_MOD_KIT(Vehicle, 5);
				VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Ebox, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(GunL, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(GunR, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LBlight, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RBlight, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LSign, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RSign, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(LeftEmp, Vehicle, 0, a7.x, a7.y, a7.z, b7.x, b7.y, b7.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RightEmp, Vehicle, 0, a8.x, a8.y, a8.z, b8.x, b8.y, b8.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Teddy, Vehicle, 0, a9.x, a9.y, a9.z, b9.x, b9.y, b9.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Spikes, Vehicle, 0, a10.x, a10.y, a10.z, b10.x, b10.y, b10.z, 0, 1, 0, 0, 2, 1);

				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool doSpecial8 = false;
bool Special8()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("massacro2");
	int hash2 = GAMEPLAY::GET_HASH_KEY("freight");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Object, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSpecial9 = false;
bool Special9()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("ztype");
	int hash2 = GAMEPLAY::GET_HASH_KEY("btype");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
}

void ATTACH_ENTITY_TO_ENTITY(Entity Ent1, Entity Ent2, float X = 0, float Y = 0, float Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0, bool HasPhysics = false)
{
	ENTITY::ATTACH_ENTITY_TO_ENTITY(Ent1, Ent2, 0, X, Y, Z, Pitch, Roll, Yaw, 1, 0, 0, 1, 2, 1);
	if (HasPhysics)
	{
		ENTITY::SET_ENTITY_INVINCIBLE(Ent1, true);
		ENTITY::SET_ENTITY_COLLISION(Ent1, true, false);
	}
}

void CREATE_AND_ATTACH(Entity Entity, Hash ObjectHash, float Offset_X = 0, float Offset_Y = 0, float Offset_Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0, bool HasPhysics = false, bool Invisible = false)
{
	Hash hash = ObjectHash;
	Vector3 MyPos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	Object Handle = OBJECT::CREATE_OBJECT(hash, MyPos.x, MyPos.y, MyPos.z, true, true, false);
	if (Handle == 0)
	{
		STREAMING::REQUEST_MODEL(hash);//Load model into memory
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		Object Handle = OBJECT::CREATE_OBJECT(hash, MyPos.x, MyPos.y, MyPos.z, true, true, false);
	}
	if (Invisible)
		ENTITY::SET_ENTITY_VISIBLE(Handle, false);
	ATTACH_ENTITY_TO_ENTITY(Handle, Entity, Offset_X, Offset_Y, Offset_Z, Pitch, Roll, Yaw, HasPhysics);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
}

void DrawPalette()
{
	GRAPHICS::DRAW_RECT(0.3450 + 0.15, 0.2200 + 0.15, 0.5495f, 0.3055f, 0, 0, 0, 255); ///Black

	GRAPHICS::DRAW_RECT(0.2019 + 0.15, 0.5300, 0.2650f, 0.0555f, 0, 0, 0, 255); ///Black
}


bool Gocart()
{
	CustomVehicle = CREATE_VEHICLE2(0xB779A091, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//ADDER
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -0.4000, 0.3800, 0.2000, -50.000, 0.0000, 0.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0xB685E324, -0.4000, 0.5900, -0.1400, 30.000, 0.0000, 0.0000);//prop_cs_bar
		CREATE_AND_ATTACH(CustomVehicle, 0x52660DBB, -0.4000, -0.1500, -0.5000, 0.0000, 0.0000, 180.0000);//prop_car_seat
		CREATE_AND_ATTACH(CustomVehicle, 0x9970602C, 0.1800, 0.2500, -0.4100, 0.0000, 0.0000, 90.0000);//prop_bumper_02
		CREATE_AND_ATTACH(CustomVehicle, 0x9970602C, -0.9800, 0.2500, -0.4100, 0.0000, 0.0000, -90.0000);//prop_bumper_02
		CREATE_AND_ATTACH(CustomVehicle, 0x7AA02CC5, -0.2000, 0.3000, -0.4500, 0.0000, 0.0000, 90.0000);//prop_yoga_mat_02
		CREATE_AND_ATTACH(CustomVehicle, 0x7AA02CC5, -0.6000, 0.3000, -0.4500, 0.0000, 0.0000, 90.0000);//prop_yoga_mat_02
		CREATE_AND_ATTACH(CustomVehicle, 0x7AA02CC5, -0.6000, 0.2000, -0.4500, 0.0000, 0.0000, 90.0000);//prop_yoga_mat_02
		CREATE_AND_ATTACH(CustomVehicle, 0x7AA02CC5, -0.2000, 0.2000, -0.4500, 0.0000, 0.0000, 90.0000);//prop_yoga_mat_02
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.1500, 1.0700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.6500, 1.0700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.4000, 1.0700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.1500, -0.5700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.6500, -0.5700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, -0.4000, -0.5700, -0.4500, 0.0000, 0.0000, 90.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.2400, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.2700, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3000, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3300, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3600, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.2400, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.2700, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3000, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3300, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, 0.3600, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0200, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0500, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0800, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.1100, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.1400, 0.9300, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0200, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0500, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.0800, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.1100, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		CREATE_AND_ATTACH(CustomVehicle, 0x37A80361, -1.1400, -0.4400, -0.4500, 0.0000, 0.0000, 90.0000);//prop_weight_15k
		return true;
	}
	return false;
}
bool dragonflya = false;
bool dragonfly()
{
	//Dragon Fly
	CustomVehicle = CREATE_VEHICLE2(0x2F03547B, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//buzzard
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.4000, -0.4000, 1.0000, 19.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.4000, 1.5000, 0.8000, 30.7000, 0.0000, 178.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.4000, 1.5000, -0.1000, -16.3000, 0.0000, 178.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.4000, -0.3000, 0.2000, 35.9001, 0.0000, 178.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.7000, 1.3000, 0.7000, 35.9001, 64.6000, 175.7999);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.1000, 1.3000, 0.7000, 35.9001, -67.8000, -176.6998);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -0.4500, -1.9100, 0.7000, 3.9001, -0.8000, 179.5000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, 0.2500, -2.4100, 0.7000, 1.9001, -0.8000, 89.4000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -1.2500, -2.4100, 0.7000, 1.9001, -0.8000, -91.6000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -1.1500, -2.4100, 1.0000, -47.0999, -0.8000, -91.6000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, 0.3300, -2.4100, 1.0000, -47.0999, -0.8000, 92.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, 0.8300, 0.6900, 0.2000, -19.0999, -0.8000, 89.8000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -1.7100, 0.7100, 0.2100, -19.0999, -0.8000, -91.2000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -2.52, 0.7100, 0.6100, 48.9001, -0.8000, -91.2000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, -3.3, 0.7100, 0.6100, 48.9001, -0.8000, 91.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, 2.5200, 0.7100, 0.6100, 48.9001, -0.8000, -91.2000);
		CREATE_AND_ATTACH(CustomVehicle, prop_carcreeper, 1.6800, 0.7100, 0.6100, 48.9001, -0.8000, 91.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_car_engine_01, -0.5000, -0.7000, 1.0000, 0.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_minigun_01, -0.1000, 2.7000, 0.2000, 0.0000, 0.0000, 88.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_minigun_01, -0.6000, 2.7000, 0.2000, 0.0000, 0.0000, 88.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_minigun_01, -3.4000, 1.3000, 0.0000, 0.0000, 0.0000, 88.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_minigun_01, 2.6000, 1.3000, 0.0000, 0.0000, 0.0000, 88.0000);
		CREATE_AND_ATTACH(CustomVehicle, prop_car_seat, -0.3000, 0.6000, 0.0000, 0.0000, 0.0000, 180.0000);
		CREATE_AND_ATTACH(CustomVehicle, hei_prop_heist_emp, -0.3900, -0.6000, 0.6200, 0.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, hei_prop_wall_alarm_on, -0.0900, 3.1200, 0.1700, 0.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, hei_prop_wall_alarm_on, -0.5900, 3.1200, 0.1700, 0.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, hei_prop_wall_alarm_on, -3.3900, 1.7200, -0.0300, 0.0000, 0.0000, 0.0000);
		CREATE_AND_ATTACH(CustomVehicle, hei_prop_wall_alarm_on, 2.6100, 1.7200, -0.0300, 0.0000, 0.0000, 0.0000);
		return true;
	}
	return false;
}

void FXExhaust(int Player)
{
	int vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(Player), 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_carsteal4");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_carsteal4");
	GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE("scr_carsteal5_car_muzzle_flash", vehicle, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -90.0f, ENTITY::_0xE4ECAC22(vehicle, "exhaust"), 0.7f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_carsteal4");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_carsteal4");
	GRAPHICS::_START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE("scr_carsteal5_car_muzzle_flash", vehicle, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -90.0f, ENTITY::_0xE4ECAC22(vehicle, "exhaust_2"), 0.7f, 0, 0, 0);
}

int sofacar()
{
	CREATE_AND_ATTACH(CustomVehicle, prop_t_sofa, 0, -0.4, 0, 0, 0, 180);
	CREATE_AND_ATTACH(CustomVehicle, prop_tornado_wheel, -1.05, 0.4, -0.15, 0, 0, 0);
	CREATE_AND_ATTACH(CustomVehicle, prop_tornado_wheel, -1.05, -0.92, -0.15, 0, 0, 0);
	CREATE_AND_ATTACH(CustomVehicle, prop_tornado_wheel, 1.05, 0.4, -0.15, 0, 0, 180);
	CREATE_AND_ATTACH(CustomVehicle, prop_tornado_wheel, 1.05, -0.92, -0.15, 0, 0, 180);
	CREATE_AND_ATTACH(CustomVehicle, prop_weight_15k, -0.28, -0.31, 0.46, -20, 0, 0);
	CREATE_AND_ATTACH(CustomVehicle, prop_cs_bar, -0.29, 0, 0.21, 50, 0, 0);
	return 0;
}

void ATTACH_ENTITY_TO_ENTITY2(Entity Ent1, Entity Ent2, int specific, float X = 0, float Y = 0, float Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0, bool HasPhysics = false)
{
	ENTITY::ATTACH_ENTITY_TO_ENTITY(Ent1, Ent2, specific, X, Y, Z, Pitch, Roll, Yaw, 1, 0, 0, 1, 2, 1);
	if (HasPhysics)
	{
		ENTITY::SET_ENTITY_INVINCIBLE(Ent1, true);
		ENTITY::SET_ENTITY_COLLISION(Ent1, true, false);
	}
}


void CREATE_AND_ATTACH2(Entity Entity, Hash ObjectHash, int boneindex, float Offset_X = 0, float Offset_Y = 0, float Offset_Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0, bool HasPhysics = false, bool Invisible = false)
{
	Hash hash = ObjectHash;
	Vector3 MyPos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	Object Handle = OBJECT::CREATE_OBJECT(hash, MyPos.x, MyPos.y, MyPos.z, true, true, false);
	if (Handle == 0)
	{
		STREAMING::REQUEST_MODEL(hash);//Load model into memory
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		STREAMING::REQUEST_MODEL(hash);
		Object Handle = OBJECT::CREATE_OBJECT(hash, MyPos.x, MyPos.y, MyPos.z, true, true, false);
	}
	if (Invisible)
		ENTITY::SET_ENTITY_VISIBLE(Handle, false);
	ATTACH_ENTITY_TO_ENTITY2(Handle, Entity, boneindex, Offset_X, Offset_Y, Offset_Z, Pitch, Roll, Yaw, HasPhysics);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
}







bool mosterFynnya = false;
bool mosterFynny()
{
	CustomVehicle = CREATE_VEHICLE2(0xCD93A7DB, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//monster
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		/// prop_jukebox_01 casa o inicio
		CREATE_AND_ATTACH(CustomVehicle, 0x3E90E8CA, 0.31, 3.0, 0.40, -131.0, 0.0, 0.0);
		CREATE_AND_ATTACH(CustomVehicle, 0x3E90E8CA, -0.39, 3.0, 0.40, -131.0, 0.0, 0.0);
		CREATE_AND_ATTACH(CustomVehicle, 0x3E90E8CA, 0.21, -2.70, 2.20, -109.7001, 0.00, 0.00);
		CREATE_AND_ATTACH(CustomVehicle, 0x3E90E8CA, -0.29, -2.70, 2.20, -109.7001, 0.0, 0.00);
		/// ruedas /// legar a 1.4
		int boneindex = excheats::GET_ENTITY_BONE_INDEX_BY_NAME(CustomVehicle, "wheel_lf");
		int boneindex2 = excheats::GET_ENTITY_BONE_INDEX_BY_NAME(CustomVehicle, "wheel_lr");
		int boneindex3 = excheats::GET_ENTITY_BONE_INDEX_BY_NAME(CustomVehicle, "wheel_rf");
		int boneindex4 = excheats::GET_ENTITY_BONE_INDEX_BY_NAME(CustomVehicle, "wheel_rr");
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, -0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex, 0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, -0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex2, 0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, -0.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex3, 0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, -0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 1.0, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.9, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.8, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.7, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.6, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.5, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.4, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.3, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.2, 0.00, 0.00, 0.0, 0.0, -90.0);
		CREATE_AND_ATTACH2(CustomVehicle, 0x60C1A847, boneindex4, 0.1, 0.00, 0.00, 0.0, 0.0, -90.0);
		VEHICLE::SET_VEHICLE_COLOURS(CustomVehicle, 120, 120);
		return true;
	}
	return false;
}
bool ufoa = false;
bool ufo()
{
	CustomVehicle = CREATE_VEHICLE2(0xABB0C0, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//carbonrs
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0xB467C540);//p_spinning_anus_s
		return true;
	}
	return false;
}
bool wheddenboata = false;
bool wheddenboat()
{
	CustomVehicle = CREATE_VEHICLE2(0x33581161, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//jetmax
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0xB58BE281, 0, 0, 0, 0, 0, 180);//prop_byard_rowboat1
		CREATE_AND_ATTACH(CustomVehicle, 0x9A7DC49F, 0, -3.3, 0.22, 0, 0, 180);//prop_byard_motor_01
		return true;
	}
	return false;
}
bool whelerebela = false;
bool whelerebel()
{
	CustomVehicle = CREATE_VEHICLE2(0xB802DD46, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//rebel
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		EntityLoc = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(CustomVehicle, 0, -2, 0);
		ENTITY::SET_ENTITY_HEADING(OBJECT::CREATE_OBJECT((0x1FCA2A6A), EntityLoc.x, EntityLoc.y, EntityLoc.z, true, true, false), 90);//prop_haybale_01
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED((0x1FCA2A6A));//prop_haybale_01
		return true;
	}
	return false;
}
bool gokart2a = false;
bool gokart2()
{
	CustomVehicle = CREATE_VEHICLE2(0xB779A091, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//adder
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0x52660DBB, -0.3000, -0.9000, -0.2000, 0.0000, 0.0000, -179.0000);//prop_car_seat
		CREATE_AND_ATTACH(CustomVehicle, 0xC7911492, -0.3000, 0.2000, 0.3300, 137.1005, 0.0000, 0.0000);//prop_carjack
		CREATE_AND_ATTACH(CustomVehicle, 0xC7911492, 0.1000, 0.3000, -0.8700, 65.8006, 0.0000, 0.0000);//prop_carjack
		CREATE_AND_ATTACH(CustomVehicle, 0x103C434E, -0.3000, -0.3000, -0.4200, 0.0000, 0.0000, -180.0000);//prop_carcreeper
		CREATE_AND_ATTACH(CustomVehicle, 0xB9579FFA, -0.3000, -1.1500, -1.5800, 0.0000, 0.0000, -1.0000);//prop_bumper_03
		CREATE_AND_ATTACH(CustomVehicle, 0xB9579FFA, -0.3000, 0.4500, -1.5800, 0.0000, 0.0000, -180.0000);//prop_bumper_03
		CREATE_AND_ATTACH(CustomVehicle, 0xAB016B30, 0.5760, 0.7000, -0.1800, 0.0000, 0.0000, -89.0000);//prop_wheel_04
		CREATE_AND_ATTACH(CustomVehicle, 0xAB016B30, 0.5760, -1.5500, -0.1800, 0.0000, 0.0000, -89.0000);//prop_wheel_04
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, 0.6760, -1.5500, -0.1800, 0.0000, 0.0000, -89.0000);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, 0.6360, 0.7000, -0.1800, 0.0000, 0.0000, -89.0000);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, -1.1840, 0.7000, -0.1800, 0.0000, 0.0000, 89.0000);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, -1.1840, -1.5500, -0.1800, 0.0000, 0.0000, 90.9004);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, -1.2740, -1.5500, -0.1800, 0.0000, 0.0000, 90.9004);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xD2FB3B23, -1.2140, 0.7000, -0.1800, 0.0000, 0.0000, 90.9004);//prop_wheel_03
		CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, 0.1000, -1.5400, -0.1500, 0.0000, 0.0000, 0.0000);//prop_minigun_01
		CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, -0.6900, -1.5400, -0.1500, 0.0000, 0.0000, -180.0000);//prop_minigun_01
		CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, -0.6400, 0.7000, -0.1500, 0.0000, 0.0000, -180.0000);//prop_minigun_01
		CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, 0.0500, 0.7000, -0.1500, 0.0000, 0.0000, -1.0000);//prop_minigun_01
		CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, -0.3500, -1.3500, 0.0500, 35.9000, -159.1998, 19.7000);//prop_minigun_01
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.3300, 0.0000, 0.4000, -130.6998, 0.0000, 0.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.3310, 0.6600, -0.1400, 52.3002, 0.0000, 0.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.3310, 0.0610, -0.2400, -91.6998, 0.0000, 0.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, 0.3990, -0.6590, -0.3000, 1.2902, 89.0000, 91.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, 0.3990, -0.0590, -0.3000, 1.2902, 89.0000, -90.6000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, 0.3990, 0.2410, -0.3000, 1.2902, 89.0000, -90.6000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.9410, -0.0590, -0.3000, 1.2902, 89.0000, -90.6000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.9510, -0.6590, -0.3000, 1.2902, 89.0000, 89.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0xD535DA56, -0.9510, 0.2410, -0.3000, 1.2902, 89.0000, -89.0000);//v_ilev_fh_lampa_on
		CREATE_AND_ATTACH(CustomVehicle, 0x889E3E33, 0.1500, -1.4700, -0.3100, 0.0000, 0.0000, 0.0000);//hei_prop_wall_alarm_off
		CREATE_AND_ATTACH(CustomVehicle, 0x889E3E33, -0.7200, -1.4700, -0.3100, 0.0000, 0.0000, 0.0000);//hei_prop_wall_alarm_off
		CREATE_AND_ATTACH(CustomVehicle, 0xDE83A424, -0.3600, -0.2400, 0.5000, -11.0000, -87.0000, 0.0000);//prop_controller_01
		CREATE_AND_ATTACH(CustomVehicle, 0xDE83A424, -0.2400, -0.2400, 0.5000, -11.0000, 83.0000, 0.0000);//prop_controller_01
		CREATE_AND_ATTACH(CustomVehicle, 0xE08EF8F2, 0.2300, -1.1000, -0.9000, 0.0000, 0.0000, 0.0000);//prop_compressor_03
		CREATE_AND_ATTACH(CustomVehicle, 0xE08EF8F2, 0.2300, -0.7800, -0.9700, 0.0000, 0.0000, 180.0000);//prop_compressor_03
		CREATE_AND_ATTACH(CustomVehicle, 0x15AB6BAB, 0.2300, -0.4200, -0.1300, -66.0999, -7.0000, -3.0000);//prop_laptop_jimmy
		return true;
	}
	return 0;
}
bool batebikea = false;
bool batebike()
{
	CustomVehicle = CREATE_VEHICLE2(0x2EF89E46, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//sanchez
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, -0.1000, 0.4000, 0.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, 0.2000, 0.4000, 0.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, 0.4200, 0.4500, 23.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, 0.7300, 0.5000, -47.0001, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, 0.8300, 0.4000, -47.0001, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, -0.3300, 0.2500, -149.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, -0.3200, 0.1000, 179.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0x8538A366, 0.0000, -0.0000, 0.1000, 179.0000, 0.0000, 0.0000);//prop_power_cell
		CREATE_AND_ATTACH(CustomVehicle, 0xEE95F258, 0.0100, 1.2400, 0.0000, 0.0000, 0.0000, -91.0000);//prop_wheel_01
		CREATE_AND_ATTACH(CustomVehicle, 0xEE95F258, 0.0100, -0.8600, 0.0000, 0.0000, 0.0000, -91.0000);//prop_wheel_01
		CREATE_AND_ATTACH(CustomVehicle, 0xEE95F258, 0.0100, -0.8600, 0.0000, 0.0000, 0.0000, 89.0000);//prop_wheel_01
		CREATE_AND_ATTACH(CustomVehicle, 0xEE95F258, 0.0100, 1.2400, 0.0000, 0.0000, 0.0000, 89.0000);//prop_wheel_01
																									  //CREATE_AND_ATTACH(CustomVehicle, 0xC89630B8, 0.0000, -0.3000, 0.0500, 0.0000);//prop_minigun_01
		return true;
	}
	return false;
}
bool UfoBlacka = false;



bool UfoBlack()
{
	int rhino;
	CustomVehicle = CREATE_VEHICLE2(0x3E48BF23, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//skylift
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0x7D79DAD4, 0.0000, 0000, 9.000, 0.0000, 0.0000, 0.0000);//ufo black
		return true;
	}
	return false;
}
void DoFX(char* asset, char *PTFX)
{
	Vector3 fcoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
	if (!STREAMING::unk_0x9ACC6446(asset))
	{
		STREAMING::unk_0xCFEA19A9(asset);
	}
	else
	{
		float f1;
		f1 = 1.0;
		float r, g, b;
		r = 0.1, g = 1.0, b = 0.1;
		GRAPHICS::unk_0x9C720B61(asset);
		GRAPHICS::unk_0x7B689E20(r, g, b);
		GRAPHICS::unk_0x633F8C48(PTFX, fcoords.x, fcoords.y, fcoords.z, 5.0f, 5.0f, 5.0f, 1.0, 0, 0, 0);

	}
}

bool lasrgesuba = false;
bool lasrgesub()
{
	CustomVehicle = CREATE_VEHICLE2(0x2DFF622F, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//submersible
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0xF20B1BDD, -0.0000, -8.5000, 4.3000, 0.0000, 0.0000, -180.0000);//hei_prop_heist_tug
		CREATE_AND_ATTACH(CustomVehicle, 0xF20B1BDD, -0.0000, -8.5000, -0.6400, 0.0000, 180.0000, -180.0000);//hei_prop_heist_tug
		CREATE_AND_ATTACH(CustomVehicle, 0x98D3236B, 0.8000, -5.6000, 5.8000, 0.0000, 0.0000, 0.0000);//hei_prop_carrier_defense_01
		CREATE_AND_ATTACH(CustomVehicle, 0x98D3236B, -0.8000, -5.6000, 5.8000, 0.0000, 0.0000, 0.0000);//hei_prop_carrier_defense_01
		CREATE_AND_ATTACH(CustomVehicle, 0x98D3236B, 0.0000, -5.6000, 5.8000, 0.0000, 0.0000, 0.0000);//hei_prop_carrier_defense_01
		CREATE_AND_ATTACH(CustomVehicle, 0x8B9108E7, 0.0000, 0.0000, 4.8000, 0.0000, 0.0000, 178.0000);//hei_prop_carrier_defense_02
		CREATE_AND_ATTACH(CustomVehicle, 0xB2BA5BFE, 0.0000, -5.1800, 12.0000, 0.0000, 0.0000, 0.0000);//prop_flag_eu
		return true;
	}
	return false;
}
bool rampea = false;
bool rampe()
{
	CustomVehicle = CREATE_VEHICLE2(0xDCE1D9F7, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//ratloader dlc
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, 0, -3.4, 0, 0, 0, 0, true);//prop_mp_ramp_03
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, 0, 4, 0, 0, 0, 180, true);//prop_mp_ramp_03
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, 4, -3.4, 0, 0, 0, 0, true);//prop_mp_ramp_03
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, 4, 4, 0, 0, 0, 180, true);//prop_mp_ramp_03
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, -4, -3.4, 0, 0, 0, 0, true);//prop_mp_ramp_03
		CREATE_AND_ATTACH(CustomVehicle, 0x93948E5E, -4, 4, 0, 0, 0, 180, true);//prop_mp_ramp_03
		return true;
	}
	return false;
}
bool Destructiondervia = false;
bool Destructiondervi()
{
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CREATE_AND_ATTACH(CustomVehicle, 0xDA76FE6E, 0, 4.2, -0.8, -29, 0, 0, true);//prop_container_01a
		CREATE_AND_ATTACH(CustomVehicle, 0xDA76FE6E, -2.6, 4.2, -0.8, -29, 0, 0, true);//prop_container_01a
		CREATE_AND_ATTACH(CustomVehicle, 0xDA76FE6E, 2.6, 4.2, -0.8, -29, 0, 0, true);//prop_container_01a
		return true;
	}
	return 0;
}

int CREATE_VEHICLE_NORMAL3(Hash VehicleName, Vector3 Location)
{
	Hash VehicleHash = (VehicleName);
	Vehicle Handle = 0;
	if (!STREAMING::HAS_MODEL_LOADED(VehicleHash))
		STREAMING::REQUEST_MODEL(VehicleHash);
	if (STREAMING::HAS_MODEL_LOADED(VehicleHash))
	{
		Handle = VEHICLE::CREATE_VEHICLE(VehicleHash, Location.x, Location.y, Location.z, 0, true, false);//Doesn't normal use this? idk, compare this with above
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
	}
	return Handle;
}

bool train2a = false;
bool train2()
{
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle))
	{
		CustomVehicle = CREATE_VEHICLE2(0x21EEE87D, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false), true);//packer
		if (CustomVehicle != 0)
		{

			FreightID = 0;
			TrailerID = 0;
			TrailerTrainID = 0;
			CustomIsReadyForObjects = true;
		}
		if (FreightID == 0)
			FreightID = CREATE_VEHICLE_NORMAL3(0x3D6AAA9B, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//freight

		if (TrailerID == 0)
			TrailerID = CREATE_VEHICLE_NORMAL3(0x782A236D, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -20));//trailerlogs
		if (TrailerTrainID == 0)
			TrailerTrainID = CREATE_VEHICLE_NORMAL3(0x36DCFF98, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -30));//freightcont1

		if (FreightID != 0 && TrailerID != 0 && TrailerTrainID != 0)
		{
			ATTACH_ENTITY_TO_ENTITY(FreightID, CustomVehicle, 0, 6);
			ATTACH_ENTITY_TO_ENTITY(TrailerTrainID, TrailerID, 0, -0.8, -2.3);
			VEHICLE::ATTACH_VEHICLE_TO_TRAILER(CustomVehicle, TrailerID, 999);

			SpawnCustomVehicle = false;
			CustomIsReadyForObjects = false;
			FreightID = 0;
			TrailerID = 0;
			TrailerTrainID = 0;
		}

		return true;
	}
	return false;
}
bool dozera = false;
bool dozer()
{
	CustomVehicle = CREATE_VEHICLE2(0xCD93A7DB, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//monster
	DozerID = CREATE_VEHICLE_NORMAL3(0x7074F39D, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//dozer
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle) && ENTITY::DOES_ENTITY_EXIST(DozerID))
	{
		//DozerID = 0;
		CustomIsReadyForObjects = true;
		ATTACH_ENTITY_TO_ENTITY(DozerID, CustomVehicle);
		VEHICLE::SET_VEHICLE_COLOURS(DozerID, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(CustomVehicle, 120, 120);
		ATTACH_ENTITY_TO_ENTITY(DozerID, CustomVehicle);
		ENTITY::SET_ENTITY_COLLISION(DozerID, true, false);
		SpawnCustomVehicle = false;
		CustomIsReadyForObjects = false;
		DozerID = 0;
		return true;
	}
	return false;
}

bool trasformera = false;
bool trasformer()
{
	CustomVehicle = CREATE_VEHICLE2(0xAC5DF515, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//Zentorno	
																										   //// pie 1
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle)) {
		pie1 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie2 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie3 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie4 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie5 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie6 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie7 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie8 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie9 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie10 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie11 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie12 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie13 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie14 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		pie15 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno

																																		///Cuerpo
		Cuerpo1 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo2 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo3 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo4 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo5 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo6 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo7 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo8 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo9 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo10 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo11 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo12 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo13 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo14 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo15 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo16 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo17 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo18 = CREATE_VEHICLE_NORMAL3(0xAC5DF515, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Zentorno
		Cuerpo19 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuerpo20 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuerpo21 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuerpo22 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuerpo23 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
																																		   /// cuello
		Cuello1 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuello2 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuello3 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Cuello4 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
																																		  /// cabeza
		Cabeza1 = CREATE_VEHICLE_NORMAL3(0x60A7EA10, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//CaergoBob
																																		  /// brazo 1
		Brazo1 = CREATE_VEHICLE_NORMAL3(0x6CBD1D6D, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Bestra
		Brazo2 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Brazo3 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Brazo4 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Brazo5 = CREATE_VEHICLE_NORMAL3(0x7B7E56F0, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Insurgent
		Brazo6 = CREATE_VEHICLE_NORMAL3(0x6322B39A, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//adder 
		Brazo7 = CREATE_VEHICLE_NORMAL3(0x6322B39A, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//adder 
		Brazo8 = CREATE_VEHICLE_NORMAL3(0x6322B39A, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//adder 
		Brazo9 = CREATE_VEHICLE_NORMAL3(0x6322B39A, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//adder 
																																		 ///////////////////////////////													 ///
																																		 /// pies
		ATTACH_ENTITY_TO_ENTITY(pie1, CustomVehicle, 0.0, -1.3, 1.1, -90.0, -95.0, 100.0, 0); //0.0, -1.3, 1.1, 90.0, 0.0, 0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie2, CustomVehicle, 0.0, -1.9, 1.1, -90.0, 95.0, 100.0, 0);//0.0, -1.9, 1.1, 90.0, 180.0, 0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie3, CustomVehicle, 0.0, -1.9, 3.8, -90.0, 180.0, 0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie4, CustomVehicle, 0.0, -1.4, 3.8, -90.0, 0.0, 0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie5, CustomVehicle, 1.2, -1.8, 5.8, -42.0, -74.0, 97.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie6, CustomVehicle, 1.2, -1.5, 5.8, -42.0, 74.0, 97.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie7, CustomVehicle, 2.9, -1.4, 7.4, -42.0, 83.0, 97.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie8, CustomVehicle, 2.9, -2.0, 7.4, -42.0, -83.0, 97.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie9, CustomVehicle, 5.2, -1.9, 7.1, -140.0, -83.0, 101.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie10, CustomVehicle, 5.2, -1.3, 7.1, -140.0, 95.0, 101.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie11, CustomVehicle, 7.0, -1.3, 3.8, -90.0, 95.0, 100.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie12, CustomVehicle, 7.0, -1.9, 3.8, -90.0, -95.0, 100.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie13, CustomVehicle, 7.0, -1.3, 1.1, -90.0, -95.0, 100.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie14, CustomVehicle, 7.0, -1.9, 1.1, -90.0, 95.0, 100.0, 0);
		ATTACH_ENTITY_TO_ENTITY(pie15, CustomVehicle, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0);
		/// cuerpo
		ATTACH_ENTITY_TO_ENTITY(Cuerpo1, CustomVehicle, 1.7, -1.3, 7.8, -90.0, 53.0, 65.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo2, CustomVehicle, 1.7, -1.9, 7.8, -90.0, -115.0, 65.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo3, CustomVehicle, 5.7, -1.9, 7.8, -90.0, -115.0, 65.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo4, CustomVehicle, 5.7, -1.3, 7.8, -90.0, 53.0, 65.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo5, CustomVehicle, 5.4, -1.3, 10.0, -43.0, 62.0, 72.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo6, CustomVehicle, 5.4, -1.9, 10.0, -43.0, -114.0, 72.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo7, CustomVehicle, 2.4, -1.3, 10.0, -134.0, 95.0, 94.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo8, CustomVehicle, 2.4, -1.9, 10.0, -134.0, -95.0, 94.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo9, CustomVehicle, 0.7, -1.3, 12.1, 81.0, 94.0, 86.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo10, CustomVehicle, 0.7, -1.9, 12.1, 81.0, -94.0, 86.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo11, CustomVehicle, 7.0, -1.9, 12.1, 106.0, -92.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo12, CustomVehicle, 7.0, -1.3, 12.1, 106.0, 92.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo13, CustomVehicle, 7.0, -1.9, 14.6, 58.0, -90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo14, CustomVehicle, 7.0, -1.3, 14.6, 58.0, 90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo15, CustomVehicle, 1.2, -1.3, 15.0, 137.0, 90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo16, CustomVehicle, 1.2, -1.9, 15.0, 137.0, -90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo17, CustomVehicle, 3.8, -1.9, 16.2, 176.0, -90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo18, CustomVehicle, 3.8, -1.3, 16.2, 176.0, 90.0, 83.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo19, CustomVehicle, 5.3, -1.3, 12.8, -90.0, 0.0, 0.0, 0);// atacar con ghost rider
		ATTACH_ENTITY_TO_ENTITY(Cuerpo20, CustomVehicle, 2.3, -1.3, 12.8, -90.0, 0.0, 0.0, 0);// atacar con ghost rider
		ATTACH_ENTITY_TO_ENTITY(Cuerpo21, CustomVehicle, 3.9, -1.3, 12.8, -90.0, 0.0, 0.0, 0);// atacar con ghost rider
		ATTACH_ENTITY_TO_ENTITY(Cuerpo22, CustomVehicle, 3.6, -0.9, 11.0, -2.0, 90.0, 100.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuerpo23, CustomVehicle, 3.6, -0.9, 11.0, -180.0, 90.0, 100.0, 0);
		/// cuello
		ATTACH_ENTITY_TO_ENTITY(Cuello1, CustomVehicle, 3.9, -1.3, 17.7, -90.0, 0.0, 0.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuello2, CustomVehicle, 3.9, -1.3, 17.7, -90.0, 180.0, 0.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuello3, CustomVehicle, 3.9, -1.3, 17.7, -90.0, -90.0, 0.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Cuello4, CustomVehicle, 3.9, -1.3, 17.7, -90.0, 90.0, 0.0, 0);
		//cabeza
		ATTACH_ENTITY_TO_ENTITY(Cabeza1, CustomVehicle, 3.7, -2.3, 19.9, -8.0, 0.0, 0.0, 0);  //0x60A7EA10
																							  // brazo 1
		ATTACH_ENTITY_TO_ENTITY(Brazo1, CustomVehicle, -3.3, 0.2, 11.9, -24.0, 97.0, 70.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo2, CustomVehicle, -1.2, 0.5, 13.0, -24.0, 97.0, 70.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo3, CustomVehicle, -1.2, 1.1, 13.0, -24.0, -97.0, 70.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo4, CustomVehicle, -3.9, 0.1, 11.6, -25.0, -95.0, 90.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo5, CustomVehicle, -3.9, 0.1, 11.6, -25.0, 95.0, 90.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo6, CustomVehicle, -6.6, 1.2, 10.4, -25.0, 95.0, 92.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo7, CustomVehicle, -7.3, 0.5, 10.4, -25.0, 95.0, 50.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo8, CustomVehicle, -6.7, 0.5, 11.4, -25.0, 14.0, 76.0, 0);
		ATTACH_ENTITY_TO_ENTITY(Brazo9, CustomVehicle, -6.1, 0.2, 9.6, -25.0, -179.0, 76.0, 0);


		VEHICLE::SET_VEHICLE_COLOURS(pie1, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(pie2, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(pie3, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(pie4, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(pie5, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie6, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie7, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie8, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie9, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie10, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie11, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(pie12, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie13, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie14, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(pie15, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(CustomVehicle, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo1, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo2, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo3, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo4, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo5, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo6, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo7, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo8, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo9, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo10, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo11, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo12, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo13, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo14, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo15, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo16, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo17, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo18, 88, 0);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo19, 88, 0);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo20, 88, 0);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo21, 88, 0);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo22, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cuerpo23, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cuello1, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cuello2, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cuello3, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cuello4, 88, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Cabeza1, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo1, 150, 150);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo2, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo3, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo4, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo5, 0, 83);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo6, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo7, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo8, 120, 120);
		VEHICLE::SET_VEHICLE_COLOURS(Brazo9, 120, 120);
		return true;
	}
	return false;
}
bool MonkeyTrunka = false;
void CREATE_AND_ATTACH2(Entity Entity, char* ObjectHash, float Offset_X = 0, float Offset_Y = 0, float Offset_Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0, bool HasPhysics = false, bool Invisible = false)
{
	Vector3 MyPos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	Object Handle = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(ObjectHash), MyPos.x, MyPos.y, MyPos.z, true, true, false);
	if (Handle == 0)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectHash));//Load model into memory
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectHash));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectHash));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectHash));
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectHash));
		Object Handle = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(ObjectHash), MyPos.x, MyPos.y, MyPos.z, true, true, false);
	}
	if (Invisible)
		ENTITY::SET_ENTITY_VISIBLE(Handle, false);
	ATTACH_ENTITY_TO_ENTITY(Handle, Entity, Offset_X, Offset_Y, Offset_Z, Pitch, Roll, Yaw, HasPhysics);
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY(ObjectHash));
}

bool MonkeyTrunk()
{
	int dozer1, dozer2;
	CustomVehicle = CREATE_VEHICLE2(0xCD93A7DB, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//monster
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle)) {
		dozer1 = CREATE_VEHICLE_NORMAL3(0x7074F39D, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Dozer
		dozer2 = CREATE_VEHICLE_NORMAL3(0x7074F39D, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Dozer
		CREATE_AND_ATTACH(CustomVehicle, 0x74D4ED38, 0.0, 4.2, 0.1, 0.00, 0.00, -30.00);//Monkey
		CREATE_AND_ATTACH2(CustomVehicle, "prop_air_lights_05a", -0.23, 4.40, 3.30, 0.00, -94.00, -180.00);//prop_air_lights_05a
		CREATE_AND_ATTACH2(CustomVehicle, "prop_air_lights_05a", 0.19, 4.40, 3.30, 0.00, 94.00, -180.00);//prop_air_lights_05a
		ATTACH_ENTITY_TO_ENTITY(dozer1, CustomVehicle, 0.0, 0.0, 0.5, 0.0, -178.0, 0, 0);
		ATTACH_ENTITY_TO_ENTITY(dozer2, CustomVehicle, 0.0, 0.0, 1.9, 0.0, -178.0, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(dozer1, 120, 150);
		VEHICLE::SET_VEHICLE_COLOURS(dozer2, 120, 150);
		VEHICLE::SET_VEHICLE_COLOURS(CustomVehicle, 120, 150);
		return true;
	}
	return false;
}
bool Mostertanka = false;
bool Mostertank()
{
	int rhino;
	CustomVehicle = CREATE_VEHICLE2(0xCD93A7DB, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false));//monster
	rhino = CREATE_VEHICLE_NORMAL3(0x2EA68690, ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS2(PLAYER::PLAYER_PED_ID(), 0, 0, -10));//Rinho
	if (ENTITY::DOES_ENTITY_EXIST(CustomVehicle) && ENTITY::DOES_ENTITY_EXIST(rhino)) {
		ATTACH_ENTITY_TO_ENTITY(rhino, CustomVehicle, 0, 0, 0, 0.10, 0, 0, 0);
		VEHICLE::SET_VEHICLE_COLOURS(rhino, 120, 150);
		VEHICLE::SET_VEHICLE_COLOURS(CustomVehicle, 120, 150);
		return true;
	}
	return false;
}

void addNotifyOption(char *option, char *notification)
{
	addOption(option);
	if (currentOption == optionCount && optionPress)
	{
		drawNotification(notification);
	}
}

void CREATE_VEHICLE(Hash VehicleHashSelect)
{
	VehicleHash = VehicleHashSelect; SpawnVehicle = true;
}


bool DOES_AIR_CONTAIN(int Value)
{
	for (int i = 0; i < 31; i++)
	{
		if (Handling_Air[i] == Value)
			return true;
	}
	return false;
}
bool DOES_BIKES_CONTAIN(int Value)
{
	for (int i = 0; i < 27; i++)
	{
		if (Handling_Bikes[i] == Value)
			return true;
	}
	return false;

}

int getVehicleAddress(int index)
{
	int Addy = 0x83AF8858;
	Addy = Addy + 0xF000;
	Addy = Addy / 8;
	Addy = Addy + 100000;
	Addy = Addy * 4;
	Addy = Addy - 1000;
	Addy = Addy * 2;
	int Tmp = *(int*)Addy;
	return *(int*)(Tmp + (index * 0x04)) + 0x04;
}


void AddOptionRight(char *Option)
{
	if (currentOption <= maxOptions && optionCount <= maxOptions)
		_DRAW_TEXT(Option, optionsFont, AddFloatX, (optionCount * 0.035f + TextMenuY), TextMenuScale, TextMenuScale, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 2);
	else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
		_DRAW_TEXT(Option, optionsFont, AddFloatX, ((optionCount - (currentOption - maxOptions)) * 0.035f + TextMenuY), TextMenuScale, TextMenuScale, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 2);

}

void ShowMessageOnScreen2(char *format, ...)
{
	char messageBuffer[256];
	va_list args;
	va_start(args, format);
	vsprintf(messageBuffer, format, args);
	va_end(args);
	drawNotification(messageBuffer);
}
void Teleport_F(float X, float Y, float Z)
{
	TeleportLocation.x = X;
	TeleportLocation.y = Y;
	TeleportLocation.z = Z;
	TeleportNow = true;
}
void AddTeleport(char *option, float x, float y, float z, char *info = " ")
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
			Teleport_F(x, y, z);
	}
}

bool ParticleFX(char* FXType, char* FXName, int Entity = PLAYER::PLAYER_PED_ID(), float X = 0, float Y = 0, float Z = 0, float Pitch = 0, float Roll = 0, float Yaw = 0)
{
	STREAMING::_REQUEST_DLC_PTFX_ASSET(FXType);
	GRAPHICS::_0x9C720B61_PALOMO(FXType);
	if (STREAMING::_HAS_DLC_PTFX_LOADED(FXType))
	{
		GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(FXName, Entity, X, Y, Z, Pitch, Roll, Yaw, 1, false, false, false);
		return true;
	}
	else
		return false;
}
void AddTeleport2(char *option, float x, float y, float z, char *info = " ")
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
			Teleport_F(x, y, z);
	}
}

void CreatorMode()
{
	if (PLAYER::_GET_AIMED_ENTITY(PLAYER::PLAYER_ID(), &Object_Vehicle_Ped))
	{
		if (ENTITY::IS_ENTITY_A_VEHICLE(Object_Vehicle_Ped)) {
		}
		if (ENTITY::IS_ENTITY_AN_OBJECT(Object_Vehicle_Ped)) {
		}
		if (ENTITY::IS_ENTITY_A_PED(Object_Vehicle_Ped)) {
		}
		if (CONTROLS::IS_CONTROL_PRESSED(2, xBUTTON_LT)) {
			if (!GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("commonmenu"))
			{
				GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("commonmenu", 0);
			}
			GRAPHICS::DRAW_SPRITE("commonmenu", "shop_box_blank", 0.5f, 0.5f, 0.075f, 0.085f, 0.0f, 255, 255, 255, 255);
			//PrintToScreen("Detected", 0.5f, 0.52f, 255, 0, 0, 255, 0.35f, 0.35f, 1, 0);
		}
	}
}

float ScaleXX = 0.10000000;
float hash1 = 0.9999;
float hash2 = 0.53000000;
float hash2a = 0.56000000;
float hash3 = 0.670000;
float hash4 = 0.18000000;
float hash5 = 0.1000;
void hashToggle() {
	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Object_Vehicle_Ped);
		int hash = ENTITY::GET_ENTITY_MODEL(Object_Vehicle_Ped);
		PrintToScreen("Object Hash:", ScaleXX, hash2, 146, 39, 186, 255, hash3, hash3, 0, 6);
		PrintToScreenNum(hash, hash4, hash2, 255, 255, 255, 255, hash3, hash3, 0, 6);
		if (ENTITY::IS_ENTITY_A_VEHICLE(Object_Vehicle_Ped)) {
			PrintToScreen("~r~Entity Type:~w~Vehicle", ScaleXX, hash2a, 240, 15, 20, 255, hash3, hash3, 0, 6);
		}
		if (ENTITY::IS_ENTITY_AN_OBJECT(Object_Vehicle_Ped)) {
			PrintToScreen("~r~Entity Type:~w~Object", ScaleXX, hash2a, 240, 15, 20, 255, hash3, hash3, 0, 6);
		}
	}
}

void AddFloat(char *Option, float *var, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[30];
	snprintf(buf, sizeof(buf), "< %s >", FtoS(*var));
	addOption(Option, info); AddOptionRight(buf);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.01f;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.01f;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.01f;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.01f;
			}
		}
	}
}
void RPDrop12(int amount, Player Player)
{
	int NetworkOptions = Player;
	int Args[5];
	Args[0] = 0xD8;
	Args[1] = NetworkOptions;
	Args[2] = 0xffffffff - amount + 1;
	Args[3] = 0;
	Args[4] = 0;
	TriggerScriptEvent(Args, 5, NetworkOptions);
}
void addplayermoney(int Value, int Player)
{
	int vVar0[3];
	vVar0[0] = 219;
	vVar0[1] = Player;
	vVar0[2] = Value;
	TriggerScriptEvent(vVar0, 3, Player);
}

void takewantedlevel(int Player)
{
	int vVar0[2];
	vVar0[0] = 356;
	vVar0[1] = Player;
	TriggerScriptEvent(vVar0, 2, Player);
}

void GiveWeaponDelayed(int Ped, int WeaponHash, int ammo, int unk)
{
	WEAPON::GIVE_WEAPON_TO_PED(Ped, WeaponHash, ammo, 0, unk);
}

void allweapons(int PedHandle)
{
	GiveWeaponDelayed(PedHandle, 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(PedHandle, 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(PedHandle, 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(PedHandle, 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(PedHandle, 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(PedHandle, 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(PedHandle, 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(PedHandle, 0x1B06D571, 9999, 5); // pistol
	GiveWeaponDelayed(PedHandle, 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(PedHandle, 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(PedHandle, 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(PedHandle, 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(PedHandle, 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(PedHandle, 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(PedHandle, 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(PedHandle, 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(PedHandle, 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(PedHandle, 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(PedHandle, 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(PedHandle, 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(PedHandle, 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(PedHandle, 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(PedHandle, 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(PedHandle, 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(PedHandle, 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(PedHandle, 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(PedHandle, 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(PedHandle, 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(PedHandle, 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(PedHandle, 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(PedHandle, 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(PedHandle, 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(PedHandle, 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(PedHandle, 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(PedHandle, 0x497FACC3, 9999, 1); // flare
	GiveWeaponDelayed(PedHandle, 0xFDBADCED, 9999, 1); // digiscanner
	GiveWeaponDelayed(PedHandle, 0x687652CE, 9999, 1); // stinger
	GiveWeaponDelayed(PedHandle, 600439132, 9999, 1); // ball
	GiveWeaponDelayed(PedHandle, 0xF9E6AA4B, 9999, 1); // bottle
	GiveWeaponDelayed(PedHandle, 0x61012683, 9999, 1); // gusenerg
	GiveWeaponDelayed(PedHandle, 0xC0A3098D, 9999, 1); // special carbine
	GiveWeaponDelayed(PedHandle, 0xD205520E, 9999, 1); // heavy pistol
	GiveWeaponDelayed(PedHandle, 0xBFD21232, 9999, 1); // sns pistol
	GiveWeaponDelayed(PedHandle, 0x7F229F94, 9999, 1); // bullpup rifle
	GiveWeaponDelayed(PedHandle, 0x92A27487, 9999, 1); // dagger
	GiveWeaponDelayed(PedHandle, 0x083839C4, 9999, 1); // vintage pistol
	GiveWeaponDelayed(PedHandle, 0x7F7497E5, 9999, 1); // firework launcher
	GiveWeaponDelayed(PedHandle, 0xA89CB99E, 9999, 1); // musket
	GiveWeaponDelayed(PedHandle, 0x63AB0442, 9999, 1); // homing launcher
	GiveWeaponDelayed(PedHandle, 0xAB564B93, 9999, 1); // proxmine
	GiveWeaponDelayed(PedHandle, 0x787F0BB, 9999, 1); // snowball
	GiveWeaponDelayed(PedHandle, 0xC734385A, 9999, 1); // marksman rifle
	GiveWeaponDelayed(PedHandle, 0x47757124, 9999, 1); // flare gun
	GiveWeaponDelayed(PedHandle, 0x0A3D4D34, 9999, 1); // Combat PDW
	GiveWeaponDelayed(PedHandle, 0xF9D04ADB, 9999, 1); // marksman pistol
	GiveWeaponDelayed(PedHandle, 0xB32BE614, 9999, 1); // knuckle dusters
	GiveWeaponDelayed(PedHandle, 0x0A3D4D34, 9999, 1); // combat pdw
	GiveWeaponDelayed(PedHandle, GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), 9999, 1); // HEAVYSHOTGUN
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xAF113F99, 0x359B7AAE); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0A3D4D34, 0x7BC4CDDC); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x13532244, 0x359B7AAE); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x22D8FE39, 0x359B7AAE); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xD205520E, 0x359B7AAE); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC0A3098D, 0x7BC4CDDC); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7F229F94, 0x7BC4CDDC); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x1B06D571, 0x359B7AAE); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x5EF9FEC4, 0x359B7AAE); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x99AEEB3B, 0x359B7AAE); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x2BE6766B, 0x7BC4CDDC); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xEFE7E2DF, 0x7BC4CDDC); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFEFFF6D, 0x7BC4CDDC); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0x7BC4CDDC); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xAF113F99, 0x8EC1C979); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x05FC3C11, 0xBC54DA77); //Advanced scope Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x22D8FE39, 0x249A17D5); //Extended Clip AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0C472FE2, 0xBC54DA77); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xD205520E, 0x64F9C62B); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFD21232, 0x7B0033B3); //SNS Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC0A3098D, 0x7C8BD10E); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xE284C527, 0x86BD7F72); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7F229F94, 0xB3688B0F); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7FD62962, 0xD6C59CD6); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x1B06D571, 0xED265A1C); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x5EF9FEC4, 0xD67B4F2D); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x99AEEB3B, 0xD9D3AC92); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x083839C4, 0x33BA12E8); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x13532244, 0x10E6BA2B); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x2BE6766B, 0x350966FB); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xEFE7E2DF, 0xBB46E417); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0A3D4D34, 0x334A5203); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x9D07F764, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x61012683, 0xEAC8C270); //Gusenberg
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFEFFF6D, 0xB1214F9B); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0x91109691); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC734385A, 0xCCFD2AC5); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), 0x971CF6FD); //Heavy Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xAF113F99, 0xAA2C45B4); //Extened Clip Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x05FC3C11, 0xD2443DDC); //Advanced scope Sniper Rifle, 
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0C472FE2, 0xD2443DDC); //Advanced scope Heavy Sniper
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC0A3098D, 0xA0D89C42); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7F229F94, 0xAA2C45B4); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x13532244, 0x9D2FBF29); //Micro SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x2BE6766B, 0x3CC6BA57); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xEFE7E2DF, 0x9D2FBF29); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0A3D4D34, 0xAA2C45B4); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x3C00AFED, 0x82158B47); //MG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFEFFF6D, 0x9D2FBF29); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0xA0D89C42); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xAF113F99, 0x8EC1C979); //Advanced Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x05FC3C11, 0xA73D4664); //Sniper Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x22D8FE39, 0xC304849A); //AP Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xD205520E, 0xC304849A); //Heavy Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC0A3098D, 0xA73D4664); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7F229F94, 0x837445AA); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x9D61E50F, 0xA73D4664); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x1B06D571, 0x65EA7EBB); //Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x5EF9FEC4, 0xC304849A); //Combat Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x99AEEB3B, 0xA73D4664); //.50 Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x083839C4, 0xC304849A); //Vintage Pistol
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x2BE6766B, 0xC304849A); //SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xEFE7E2DF, 0xA73D4664); //Assault SMG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFEFFF6D, 0xA73D4664); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0x837445AA); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC734385A, 0x837445AA); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x1D073A89, 0xE608B35E); //Pump Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xA73D4664); //Heavy Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC0A3098D, 0xC164F53); //Special Carbine
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7F229F94, 0xC164F53); //Bullpump Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x9D61E50F, 0xC164F53); //Bullpump ShotGun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xBFEFFF6D, 0xC164F53); //Assault Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0xC164F53); //Carbine Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xC734385A, 0xC164F53); //Marksman Rifle
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x0A3D4D34, 0xC164F53); //Combat PDW
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x7FD62962, 0xC164F53); //Combat MG
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0xE284C527, 0xC164F53); //Assault Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), 0xC164F53); //Heavy Shotgun
	GIVE_WEAPON_COMPONENT_TO_PED(PedHandle, 0x83BF0278, 0xD89B9658); //Carbine Rifle
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x1B06D571, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x5EF9FEC4, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x22D8FE39, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x99AEEB3B, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x13532244, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x2BE6766B, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xEFE7E2DF, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xBFEFFF6D, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x83BF0278, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xAF113F99, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x9D07F764, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x7FD62962, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x1D073A89, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x7846A318, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xE284C527, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x9D61E50F, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x05FC3C11, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x0C472FE2, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xA284510B, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xB1CA77B1, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x42BF8A85, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x687652CE, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x61012683, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xC0A3098D, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xD205520E, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xBFD21232, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x7F229F94, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x083839C4, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x7F7497E5, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xA89CB99E, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x63AB0442, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xC734385A, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0xF9D04ADB, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, 0x0A3D4D34, 2);
	SET_PED_WEAPON_TINT_INDEX(PedHandle, GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), 2);
}

void AddCharMenuOption(char *optiontext, char* option, int *var, int min, int max, char *info = NULL)
{
	char buf[516];
	snprintf(buf, sizeof(buf), "%s: < %s >", optiontext, option);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = min;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= min)
				*var = max;
			else
				*var = *var - 1;
		}
	}
}

bool IsTimerReady2()
{
	return GAMEPLAY::GET_GAME_TIMER() > maxTimerCount2;
}

void ResetTimer2()
{
	newTimerTick2 = true;
}


void PaletteInstruction()
{
	if (IsTimerReady2())
	{
		addInstruction(BUTTON_A, "Select");
		addInstruction(BUTTON_B, "Leave");
		addInstruction(BUTTON_DPAD_ALL, "Scroll");
		instructionsClose();
		ResetTimer2();
	}
}


void PaletteInstruction2()
{
	if (IsTimerReady2())
	{
		addInstruction(BUTTON_A, "Select");
		addInstruction(BUTTON_B, "Return");
		addInstruction(BUTTON_X, "Delete");
		addInstruction(BUTTON_DPAD_ALL, "Scroll");
		addInstruction(BUTTON_BACK, "Set Value");
		instructionsClose();
		ResetTimer2();
	}
}
void PaletteInstruction3()
{
	if (IsTimerReady2())
	{
		addInstruction(BUTTON_A, "Select");
		addInstruction(BUTTON_B, "Leave");
		addInstruction(BUTTON_RB, "");
		addInstruction(BUTTON_LB, "Scroll");
		instructionsClose();
		ResetTimer2();
	}
}

void RGBColourTableInstruction()
{
	if (IsTimerReady2())
	{
		addInstruction(BUTTON_A, "Select");
		addInstruction(BUTTON_B, "Leave");
		addInstruction(BUTTON_DPAD_UP_DOWN, "RGB Index");
		addInstruction(BUTTON_DPAD_LEFT_RIGHT, "Scroll");
		instructionsClose();
		ResetTimer2();
	}
}

void setHandling(int index, int mod, float value)
{
	int Tmp = getVehicleAddress(index) + mod;
	*(float*)(Tmp) = value;
}

void forceinvitetoapartament3()
{
	int playerCount = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
	int i = 0;
	for (i = 0; i < playerCount; i++)
	{
		if (i == PLAYER::PLAYER_ID())
			continue;
		int Var0[2];
		Var0[0] = 32;
		Var0[1] = i;
		TriggerScriptEvent(Var0, 2, PLAYER::PLAYER_ID());
	}
}

void forceinvitetoapartament4()
{
	int playerCount = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
	int i = 0;
	for (i = 0; i < playerCount; i++)
	{
		if (i == PLAYER::PLAYER_ID())
			continue;
		int Var0[2];
		Var0[0] = 32;
		Var0[1] = PLAYER::PLAYER_ID();
		TriggerScriptEvent(Var0, 2, i);
	}
}

void playerCoordsToggle() {
	float Pos[3];
	ENTITY::GetEntityCoords(PLAYER::PLAYER_PED_ID(), Pos);

	PrintToScreen("X:", 0.30000000, 0.91000000, 214, 35, 183, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[0], 0.33000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Y:", 0.440000000, 0.91000000, 214, 35, 183, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[1], 0.47000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);

	PrintToScreen("Z:", 0.570000000, 0.91000000, 214, 35, 183, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenFloat(Pos[2], 0.6000000, 0.91000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
}
void _DRAW_TEXT_BROM(char * text, int font, float x, float y, float scalex, float scaley, int r, int g, int b, int a, bool center)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_CENTRE(center);
	if (currentOption == optionCount)
	{
		UI::SET_TEXT_WRAP(0.0f, 1.0f);
		UI::SET_TEXT_COLOUR(0, 0, 0, 255);
		UI::_SET_TEXT_ENTRY("STRING");
		UI::_ADD_TEXT_COMPONENT_STRING(text);
	}
	else
	{
		UI::SET_TEXT_COLOUR(r, g, b, a);
		UI::_SET_TEXT_ENTRY("STRING");
		UI::_ADD_TEXT_COMPONENT_STRING(text);
		UI::SET_TEXT_FONT(font);
		UI::SET_TEXT_SCALE(scalex, scaley);
		UI::SET_TEXT_WRAP(0.0f, 1.0f);
		UI::SET_TEXT_CENTRE(center);
	}
	UI::_DRAW_TEXT(x, y);
}


float ScaleXY = 0.23000000, ScaleYY = 0.2800000, ScaleZY = 0.3300000, ScalePich = 0.3800000, ScaleRoll = 0.43000000, ScaleYaw = 0.4800000;
float ScalexXS = 0.76000000;
float ScaleXX2 = 0.12000000;
float ScaleXS2 = 0.15000000;
//////////////////
float TitleTEXTXp2 = 0.13499f;
float TitleTEXTYp2 = 0.17000f;
float TitleTEXTScalep2 = 0.7999f;

void coordsToggle() {
	_DRAW_TEXT_BROM("Coord Pos", bannerTextFont, TitleTEXTXp2, TitleTEXTYp2, TitleTEXTScalep2, TitleTEXTScalep2, bannerTextRed, bannerTextGreen, bannerTextBlue, bannerTextOpacity, 1);

	float Pos[3];
	ENTITY::GET_ENTITY_COORDS3(Object_Vehicle_Ped, Pos);

	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		PrintToScreen("X:", ScaleXX, ScaleXY, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenFloat(Pos[0], ScaleXX2, ScaleXY, 255, 255, 255, 255, ScalexXS, ScalexXS, 0, 6);
	}

	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		PrintToScreen("Y:", ScaleXX, ScaleYY, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenFloat(Pos[1], ScaleXX2, ScaleYY, 255, 255, 255, 255, ScalexXS, ScalexXS, 0, 6);
	}

	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		PrintToScreen("Z:", ScaleXX, ScaleZY, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenFloat(Pos[2], ScaleXX2, ScaleZY, 0, 255, 0, 255, ScalexXS, ScalexXS, 0, 6);
	}
	float objectpitch1 = 0, objectroll1 = 0, objectyaw1 = 0;
	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Object_Vehicle_Ped);
		objectpitch1 = ENTITY::GET_ENTITY_PITCH(Object_Vehicle_Ped);
		PrintToScreen("Pitch:", ScaleXX, ScalePich, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenNum(objectpitch1, ScaleXS2, ScalePich, 225, 255, 225, 255, ScalexXS, ScalexXS, 0, 6);
	}

	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Object_Vehicle_Ped);
		objectroll1 = ENTITY::GET_ENTITY_ROLL(Object_Vehicle_Ped);
		PrintToScreen("Roll:", ScaleXX, ScaleRoll, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenNum(objectroll1, ScaleXS2, ScaleRoll, 225, 255, 225, 255, ScalexXS, ScalexXS, 0, 6);
	}

	if (ENTITY::DOES_ENTITY_EXIST(Object_Vehicle_Ped)) {
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(Object_Vehicle_Ped);
		objectyaw1 = ENTITY::GET_ENTITY_HEADING(Object_Vehicle_Ped);
		PrintToScreen("Yaw:", ScaleXX, ScaleYaw, 214, 35, 183, 255, ScalexXS, ScalexXS, 0, 6);
		PrintToScreenNum(objectyaw1, ScaleXS2, ScaleYaw, 225, 255, 225, 255, ScalexXS, ScalexXS, 0, 6);
	}
}

bool IS_ENTITY_IN_AREA(Entity Ent, Vector3 Location, float Radius)
{
	if (ENTITY::IS_ENTITY_IN_AREA(Ent, Location.x - (Radius / 2), Location.y - (Radius / 2), Location.z - (Radius / 2), Location.x + (Radius / 2), Location.y + (Radius / 2), Location.z + (Radius / 2), false, true, 0))
		return true;
	else
		return false;
}

void KickNonHost(Player Player)
{
	int NetworkOptions = Player;
	int Args[3];
	Args[0] = 2;
	Args[1] = NetworkOptions;
	Args[2] = 0x35;
	TriggerScriptEvent(Args, 3, NetworkOptions);
}
void takeplayermoney(int Value, int Player)
{
	int vVar0[4];
	vVar0[0] = 312;
	vVar0[1] = Player;
	vVar0[2] = Value;
	vVar0[3] = 0;
	TriggerScriptEvent(vVar0, 3, Player);
}

int createobject(char* ObjectName)
{
	char* Name;
	Vector3 Pos;
	int hash = 0;
	if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
	{
		if (STREAMING::IS_MODEL_VALID(hash))
		{
			STREAMING::REQUEST_MODEL(hash);
			if (STREAMING::HAS_MODEL_LOADED(hash))
			{
				SpawnedObject[SpawnedObjects] = OBJECT::CREATE_OBJECT(hash, Pos.x, Pos.y - 2, Pos.z, 1, 1, 0);
				ObjectNameArray[SpawnedObjects] = Name;
				if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
				{
					ENTITY::FREEZE_ENTITY_POSITION(SpawnedObject[SpawnedObjects], true);
					SpawnedObjects++;
					if (SpawnedObjects >= 15)
						SpawnedObjects = 0;
					//return true;
				}
				//else return false;
			}
			//else return false;
		}
	}
	else
	{
		if (STREAMING::IS_MODEL_IN_CDIMAGE(GAMEPLAY::GET_HASH_KEY(ObjectName)))
		{
			if (STREAMING::IS_MODEL_VALID(GAMEPLAY::GET_HASH_KEY(ObjectName)))
			{
				STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectName));
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				ENTITY::FREEZE_ENTITY_POSITION(SpawnedObject[SpawnedObjects], true);
				if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(ObjectName)))
				{
					SpawnedObject[SpawnedObjects] = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(ObjectName), coords.x, coords.y - 2, coords.z, 1, 1, 0);
					ObjectNameArray[SpawnedObjects] = ObjectName;
					//ENTITY::IS_ENTITY_WAITING_FOR_WORLD_COLLISION2(GAMEPLAY::GET_HASH_KEY(ObjectName)); // se agrego
					ENTITY::FREEZE_ENTITY_POSITION(SpawnedObject[SpawnedObjects], true);
					if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
					{
						SpawnedObjects++;
						if (SpawnedObjects >= 15)
							SpawnedObjects = 0;
						return true;
					}
					else return false;
				}
				else return false;
			}
		}
	}
	return 0;
}

void RequestControlOfEnt(int entity)
{
	int tick = 0;

	while (!NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity) && tick <= 12)
	{
		NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);
		tick++;
	}

}
void FatalFuncH4X(int Entity)
{
	RequestNetworkControl(Entity);
	RequestControlOfEnt(Entity);
	ENTITY::SET_ENTITY_INVINCIBLE(Entity, true);
	VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Entity, false);
	ENTITY::SET_ENTITY_COLLISION(Entity, true);
	ENTITY::SET_ENTITY_PROOFS(Entity, true, true, true, true, true, false, false, true);
	ENTITY::SET_ENTITY_ROTATION(Entity, ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 0.0f, 0.0f, 0, 0);
}

void entertoapartament2(int ID)
{
	int playerCount = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
	int i = 0;
	for (i = 0; i < playerCount; i++)
	{
		if (i == PLAYER::PLAYER_ID())
			continue;
		int Var0[5];
		Var0[0] = 364;
		Var0[1] = i;
		Var0[2] = ID;
		Var0[3] = 0;
		Var0[4] = 0;
		TriggerScriptEvent(Var0, 5, selectedPlayer);
	}
}
void kickofapartament2(int ID)
{
	int playerCount = NETWORK::NETWORK_GET_NUM_CONNECTED_PLAYERS();
	int i = 0;
	for (i = 0; i < playerCount; i++)
	{
		if (i == PLAYER::PLAYER_ID())
			continue;
		int Var0[5];
		Var0[0] = 364;
		Var0[1] = i;
		Var0[2] = ID;
		Var0[3] = 0;
		Var0[4] = 1;
		TriggerScriptEvent(Var0, 5, selectedPlayer);
	}
}

void AllPlayersBox()
{
	for (int i = 0; i < 18; i++)
	{
		Vector3 Pos;
		Vector3 Pos2;
		int PedID = PLAYER::GET_PLAYER_PED(i);
		Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		Pos2 = ENTITY::GET_ENTITY_COORDS(PedID, false);
		GRAPHICS::DRAW_LINE(Pos.x, Pos.y, Pos.z, Pos2.x, Pos2.y, Pos2.z, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
		//ARROWS
		int maker = 22;
		float maker2 = 1.40;
		Vector3 Loc = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PedID, 0.0, 0.0, -1.5f);
		GRAPHICS::DRAW_MARKER(maker, Loc.x, Loc.y, Loc.z, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.7f, 0.7f, 0.7f, bannerRectRed, bannerRectGreen, bannerRectBlue, 50, 1, 1, 2, 1, 0, 0, 0);
		int maker1 = 27;
		float maker12 = -2.46;
		GRAPHICS::DRAW_MARKER(maker1, Loc.x, Loc.y, Loc.z + maker12, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.7f, 0.7f, 0.7f, bannerRectRed, bannerRectGreen, bannerRectBlue, 50, 0, 1, 2, 1, 0, 0, 0);
		Ped playerHandle = PLAYER::GET_PLAYER_PED(i);
		Vector3 handleCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(playerHandle, 0, 0, 0.0), playerCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		int dist = GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(Pos.x, Pos.y, Pos.z, Pos2.x, Pos2.y, Pos2.z, false);
		char buf[1000];
		snprintf(buf, sizeof(buf), "%s [%im]", PLAYER::GET_PLAYER_NAME(i), dist);
		if (ENTITY::DOES_ENTITY_EXIST(playerHandle))
		{
			float x, y;
			GRAPHICS::_WORLD3D_TO_SCREEN2D(handleCoords.x, handleCoords.y, handleCoords.z, &x, &y);
			int name_color[4] = { 0, 0, 0, 0 };
			UI::SET_TEXT_FONT(4);
			UI::SET_TEXT_SCALE(0.0, 0.40);
			UI::SET_TEXT_CENTRE(1);
			UI::SET_TEXT_EDGE(0, 0, 0, 0, 0);
			UI::_SET_TEXT_ENTRY("STRING");
			if (ENTITY::HAS_ENTITY_CLEAR_LOS_TO_ENTITY(PLAYER::PLAYER_PED_ID(), playerHandle, 17))
			{
				name_color[0] = 0, name_color[1] = 125, name_color[2] = 35, name_color[3] = 255;
			}
			else
			{
				name_color[0] = 0, name_color[1] = 125, name_color[2] = 35, name_color[3] = 255;
			}
			UI::SET_TEXT_COLOUR(name_color[0], name_color[1], name_color[2], name_color[3]);
			UI::_ADD_TEXT_COMPONENT_STRING(buf);
			UI::_DRAW_TEXT(x, y);
			UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
			UI::SET_TEXT_OUTLINE();
		}
	}
}

void DeleteEntH4X(int Handle)
{
	RequestNetworkControl(Handle);
	RequestControlOfEnt(Handle);
	ENTITY::FREEZE_ENTITY_POSITION(Handle, false);
	ENTITY::DETACH_ENTITY(Handle, 1, 1);
	ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Handle, 0, 1);
	ENTITY::DELETE_ENTITY(&Handle);
}

void drawText3(char * text, int font, float x, float y, float scalex, float scaley, int r, int b, int g, int a, bool center)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_WRAP(0.0f, 1.0f);
	UI::SET_TEXT_CENTRE(center);
	UI::_SET_TEXT_ENTRY("STRING");
	//UI::_ADD_TEXT_COMPONENT_STRING(text);
	int(__cdecl *unk)(void *) = (int(__cdecl *)(void *))PRINT_POINTER; // isnt hashed so needs to be updated every TU!
	unk(text);
	UI::_DRAW_TEXT(x, y);
}

void RightSidedModifier(char* string)
{
	Vector3 texture_res;
	int screen_res_x;
	char buf[64];
	sprintf(buf, "[%s]", string);
	if (currentOption == optionCount)
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
		{
			PrintText(buf, optionsFont, (0.113f + (menuXVal)), (optionCount * 0.035f + 0.11f), 0.423f, 0.423f, 255, 155, 0, 255, 2, 0);
		}
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
		{
			PrintText(buf, optionsFont, (0.113f + (menuXVal)) - (texture_res.x / (float)screen_res_x), ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.11f), 0.423f, 0.423f, 255, 155, 0, 255, 2, 0);
		}
	}
	else
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			PrintText(buf, optionsFont, (0.110f + (menuXVal)), (optionCount * 0.035f + 0.11f), 0.423f, 0.423f, 255, 255, 255, 255, 2, 0);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			PrintText(buf, optionsFont, (0.110f + (menuXVal)), ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.11f), 0.423f, 0.423f, 255, 255, 255, 255, 2, 0);
	}
}


void SetupTimerMENU(int tickTime)
{
	if (newTimerTickMENU)
	{
		maxTimerCountMENU = GAMEPLAY::GET_GAME_TIMER() + tickTime;
		newTimerTickMENU = false;
	}
}

void SetupTimer2(int tickTime)
{
	if (newTimerTick2) {
		maxTimerCount2 = GAMEPLAY::GET_GAME_TIMER() + tickTime;
		newTimerTick2 = false;
	}
}


bool IsTimerReadyMENU()
{
	return GAMEPLAY::GET_GAME_TIMER() > maxTimerCountMENU;
}


void ResetTimerMENU()
{
	newTimerTickMENU = true;
}

char *FloatToString(float number)
{
	sprintf(ITStringOut, "%.3f", number);
	return ITStringOut;
}


void FreezeTypes(int id)
{
	if (id == 0) { VehicleIndex = 0x3F119114; fatalcrash_loop = true; }
	if (id == 1) { VehicleIndex = 0xC703DB5F; fatalcrash_loop = true; }
	if (id == 2) { ModelToFreeze = 0x3F039CBA; DoSlod = true; FreezeCameraFroze = true; }
	if (id == 3) { ModelToFreeze = 0x856CFB02; DoSlod = true; FreezeCameraFroze = true; }
	if (id == 4) { ModelToFreeze = 0x2D7030F3; DoSlod = true; FreezeCameraFroze = true; }
	if (id == 5) { FreezeTaxi = true; PlayerID = selectedPlayer; }
}

void AddToggle(char *option, bool *b00l, char *info = NULL)
{
	char buf[30];
	if (*b00l)
	{
		sprintf(buf, "%s: ~b~On", option);
		addOption(buf);
	}
	else
	{
		sprintf(buf, "%s: ~r~Off", option);
		addOption(buf);
	}
	if (currentOption == optionCount && optionPress)
	{
		*b00l = !*b00l;
	}
}

void resetPlayerView(int player) {

	int args[3];
	args[0] = 0x2;
	args[1] = player;
	args[2] = 0x2e;
	TriggerScriptEvent(args, 3, player);
}
void NetExistPeds(int Handle)
{
	RequestNetworkControl(Handle);
	DWORD id2 = NETWORK::PED_TO_NET(Handle);
	DWORD id = NETWORK::NET_TO_ENT(Handle);
	NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(id, true);
	NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(id2, true);
	ENTITY::ATTACH_ENTITY_TO_ENTITY(Handle, PLAYER::GET_PLAYER_PED(selectedPlayer), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
	ENTITY::DETACH_ENTITY(Handle, true, true);
	ENTITY::FREEZE_ENTITY_POSITION(Handle, true);
}
void FreezeStuffFuncA(int Handle)
{
	STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Handle);
	ENTITY::SET_ENTITY_INVINCIBLE(Handle, true);
	VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Handle, false);
	ENTITY::SET_ENTITY_COLLISION(Handle, true);
	ENTITY::SET_ENTITY_PROOFS(Handle, true, true, true, true, true, false, false, true);
	ENTITY::SET_ENTITY_VISIBLE(Handle, false);
}

int FreeSlots()
{
	int slots = 0;
	for (int i = 0; i < 18; i++)
	{
		int ped = PLAYER::GET_PLAYER_PED(i);
		if (!ENTITY::DOES_ENTITY_EXIST(ped))
		{
			slots++;
		}
	}
	return slots;
}

void AddFloatMemoryPeekPoker(char* option, DWORD ADDRESS, float min, float max, float increments)
{
	addOption(option);
	RightSidedModifier(FloatToString(*(float*)ADDRESS));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(float*)ADDRESS >= max)
					*(float*)ADDRESS = min;
				else
					*(float*)ADDRESS = *(float*)ADDRESS + increments;
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(float*)ADDRESS >= max)
						*(float*)ADDRESS = min;
					else
						*(float*)ADDRESS = *(float*)ADDRESS + increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(float*)ADDRESS <= min)
					*(float*)ADDRESS = max;
				else
					*(float*)ADDRESS = *(float*)ADDRESS - increments;
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(float*)ADDRESS <= min)
						*(float*)ADDRESS = max;
					else
						*(float*)ADDRESS = *(float*)ADDRESS - increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}


void AddClockSecondChanger(char* option, DWORD ADDRESS)
{
	addOption(option);
	RightSidedModifier(IntToString(*(int*)ADDRESS));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED8) < 60)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), *(int*)(0x83901ED8) + 1);
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), 0);
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED8) < 60)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), *(int*)(0x83901ED8) + 1);
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), 0);
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED8) > 0)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), *(int*)(0x83901ED8) - 1);
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), 60);
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED8) > 0)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), *(int*)(0x83901ED8) - 1);
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4), 60);
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}



void AddClockMinuteChanger(char* option, DWORD ADDRESS)
{
	addOption(option);
	RightSidedModifier(IntToString(*(int*)ADDRESS));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED4) < 60)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4) + 1, *(int*)(0x83901ED8));
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), 0, *(int*)(0x83901ED8));
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED4) < 60)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4) + 1, *(int*)(0x83901ED8));
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), 0, *(int*)(0x83901ED8));
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED4) > 0)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4) - 1, *(int*)(0x83901ED8));
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), 60, *(int*)(0x83901ED8));
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED4) > 0)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), *(int*)(0x83901ED4) - 1, *(int*)(0x83901ED8));
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0), 60, *(int*)(0x83901ED8));
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}

void AddClockHourChanger(char* option, DWORD ADDRESS)
{
	addOption(option);
	RightSidedModifier(IntToString(*(int*)ADDRESS));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED0) < 24)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0) + 1, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED0) < 24)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0) + 1, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(int*)(0x83901ED0) > 0)
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0) - 1, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
				else
					NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(24, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(int*)(0x83901ED0) > 0)
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(*(int*)(0x83901ED0) - 1, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
					else
						NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(24, *(int*)(0x83901ED4), *(int*)(0x83901ED8));
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}


void moveEntityX_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.x += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}

void changeEntityYaw_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Yaw -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void drawLinesToQuads()
{
	for (int i = 0; i < (int)*(__int16*)0x83ABF7CC; i++)
	{
		waterQuad currentQuad = *(waterQuad*)(*(DWORD*)0x83ABF7C8 + (i * 0x1C));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
		int midX = ((int)currentQuad.minX + (int)currentQuad.maxX) / 2;
		int	midY = ((int)currentQuad.minY + (int)currentQuad.maxY) / 2;
		GRAPHICS::DRAW_LINE(coords.x, coords.y, coords.z, (float)midX, (float)midY, currentQuad.height + 1.0f, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
	}
}

void NewProtections()
{
	if (Protectionsywwwwe)
	{
		*(int*)VEHICLE_PROTECTION = 0x4E800020;
		*(int*)EXPLOSION_PROTECTION = 0x4E800020;
		*(int*)FIRE_PROTECTION = 0x4E800020;
		*(int*)REM_WEAP_PROTECTION = 0x4E800020;
		*(int*)TASKS_PROTECTION = 0x4E800020;
		*(int*)PTFX_PROTECTION = 0x4E800020;
		*(int*)NETWORK_START_SYNCED_SCENE_EVENT = 0x4E800020;
		*(int*)NETWORK_REQUEST_SYNCED_SCENE_EVENT = 0x4E800020;
		*(int*)NETWORK_UPDATE_SYNCED_SCENE_EVENT = 0x4E800020;
		*(int*)NETWORK_STOP_SYNCED_SCENE_EVENT = 0x4E800020;

	}

}

void drawQuadLines()
{
	for (int i = 0; i < (int)*(__int16*)0x83ABF7CC; i++)
	{
		waterQuad currentQuad = *(waterQuad*)(*(DWORD*)0x83ABF7C8 + (i * 0x1C));
		GRAPHICS::DRAW_LINE((float)((int)currentQuad.minX), (float)((int)currentQuad.minY), currentQuad.height, (float)((int)currentQuad.minX), (float)((int)currentQuad.maxY), currentQuad.height, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
		GRAPHICS::DRAW_LINE((float)((int)currentQuad.minX), (float)((int)currentQuad.maxY), currentQuad.height, (float)((int)currentQuad.maxX), (float)((int)currentQuad.maxY), currentQuad.height, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
		GRAPHICS::DRAW_LINE((float)((int)currentQuad.maxX), (float)((int)currentQuad.maxY), currentQuad.height, (float)((int)currentQuad.maxX), (float)((int)currentQuad.minY), currentQuad.height, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
		GRAPHICS::DRAW_LINE((float)((int)currentQuad.maxX), (float)((int)currentQuad.minY), currentQuad.height, (float)((int)currentQuad.minX), (float)((int)currentQuad.minY), currentQuad.height, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);
	}
}

void drawLineToUQuad(int quad)
{
	for (int i = 0; i < (int)*(__int16*)0x83ABF7CC; i++)
	{
		if (i == quad)
		{
			waterQuad currentQuad = *(waterQuad*)(*(DWORD*)0x83ABF7C8 + (i * 0x1C));
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
			int midX = ((int)currentQuad.minX + (int)currentQuad.maxX) / 2;
			int	midY = ((int)currentQuad.minY + (int)currentQuad.maxY) / 2;
			GRAPHICS::DRAW_LINE((float)((int)currentQuad.minX), (float)((int)currentQuad.minY), currentQuad.height, (float)((int)currentQuad.minX), (float)((int)currentQuad.maxY), currentQuad.height, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
			GRAPHICS::DRAW_LINE((float)((int)currentQuad.minX), (float)((int)currentQuad.maxY), currentQuad.height, (float)((int)currentQuad.maxX), (float)((int)currentQuad.maxY), currentQuad.height, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
			GRAPHICS::DRAW_LINE((float)((int)currentQuad.maxX), (float)((int)currentQuad.maxY), currentQuad.height, (float)((int)currentQuad.maxX), (float)((int)currentQuad.minY), currentQuad.height, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
			GRAPHICS::DRAW_LINE((float)((int)currentQuad.maxX), (float)((int)currentQuad.minY), currentQuad.height, (float)((int)currentQuad.minX), (float)((int)currentQuad.minY), currentQuad.height, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
			GRAPHICS::DRAW_LINE(coords.x, coords.y, coords.z, (float)midX, (float)midY, currentQuad.height + 1.0f, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
		}
	}
}
char *UIntToString(uint number)
{
	sprintf(ITStringOut, "%u", number);
	return ITStringOut;
}

void TeleportToPosition(float x, float y, float z)
{
	if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
	{
		PED::SET_PED_COORDS_KEEP_VEHICLE(PLAYER::PLAYER_PED_ID(), x, y, z + 1.0f);
		STREAMING::LOAD_ALL_OBJECTS_NOW();
	}
	else
	{
		ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), x, y, z + 1.0f, 0, 0, 0, 1);
		STREAMING::LOAD_ALL_OBJECTS_NOW();
	}
}


void DisplayHelpTextThisFrame(char* text)
{
	UI::_0xB245FC10("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::_0xB59B530D(0, 0, 1, -1);
}



void AddIntChanger(char* option, int *inttochange, int min, int max, int increments)
{
	addOption(option);
	RightSidedModifier(IntToString(*inttochange));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*inttochange >= max)
					*inttochange = min;
				else
					*inttochange = *inttochange + increments;
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*inttochange >= max)
						*inttochange = min;
					else
						*inttochange = *inttochange + increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*inttochange <= min)
					*inttochange = max;
				else
					*inttochange = *inttochange - increments;
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*inttochange <= min)
						*inttochange = max;
					else
						*inttochange = *inttochange - increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}


void AddByteMemoryChanger(char* option, DWORD ADDRESS, byte min, byte max, byte increments)
{
	unsigned char x = *(byte*)ADDRESS;
	addOption(option);
	RightSidedModifier(UIntToString((uint)x));
	if (currentOption == optionCount)
	{
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			if (!DpadRightPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(byte*)ADDRESS >= max)
					*(byte*)ADDRESS = min;
				else
					*(byte*)ADDRESS = *(byte*)ADDRESS + increments;
				ScrollTickCountVar = GetTickCount();
				DpadRightPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(byte*)ADDRESS >= max)
						*(byte*)ADDRESS = min;
					else
						*(byte*)ADDRESS = *(byte*)ADDRESS + increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
			DpadRightPressed = false;
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			if (!DpadLeftPressed)
			{
				playSound("NAV_LEFT_RIGHT");
				if (*(byte*)ADDRESS <= min)
					*(byte*)ADDRESS = max;
				else
					*(byte*)ADDRESS = *(byte*)ADDRESS - increments;
				ScrollTickCountVar = GetTickCount();
				DpadLeftPressed = true;
			}
			if ((int)GetTickCount() > (ScrollTickCountVar + 300))
			{
				SetupTimer2(500);
				SetupTimerMENU(VariantMilliseconds);
				if (IsTimerReadyMENU())
				{
					playSound("NAV_LEFT_RIGHT");
					if (*(byte*)ADDRESS <= min)
						*(byte*)ADDRESS = max;
					else
						*(byte*)ADDRESS = *(byte*)ADDRESS - increments;
					ResetTimerMENU();
				}
				if (IsTimerReady2())
					VariantMilliseconds = 0;
			}
			else
			{
				VariantMilliseconds = 60;
				ResetTimer2();
			}
		}
		else if (!CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
			DpadLeftPressed = false;
	}
}


char* quadFormatStr(int val)
{
	sprintf(hex2buf, "Quad #%i", val);
	return hex2buf;
}

void AddValueDisplay(char* string)
{
	char buf[64];
	sprintf(buf, "[%s]", string);
	if (currentOption == optionCount)
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
		{
			PrintText(buf, optionsFont, (0.113f + (0.8519531f + menuXOffset)), (optionCount * 0.04166667f + 0.11f), 0.55f, 0.55f, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255, 2, 0);
		}
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
		{
			PrintText(buf, optionsFont, (0.113f + (0.8519531f + menuXOffset)), (((optionCount - (currentOption - maxOptions)) * 0.04166667f) + 0.11f), 0.55f, 0.55f, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255, 2, 0);
		}
	}
	else
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			PrintText(buf, optionsFont, (0.113f + (0.8519531f + menuXOffset)), (optionCount * 0.04166667f + 0.11f), 0.55f, 0.55f, 255, 255, 255, 255, 2, 0);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			PrintText(buf, optionsFont, (0.113f + (0.8519531f + menuXOffset)), (((optionCount - (currentOption - maxOptions)) * 0.04166667f) + 0.11f), 0.55f, 0.55f, 255, 255, 255, 255, 2, 0);
	}
}

char* valToHex8(int val)
{
	sprintf(hex2buf, "0x%08X", val);
	return hex2buf;
}


void AddValueDisplayOption(char *option, char* val)
{
	optionCount++;
	AddValueDisplay(val);
	if (currentOption == optionCount)
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			PrintText(option, optionsFont, 0.74f + menuXOffset, (optionCount * 0.04166667f + 0.11f), 0.55f, 0.55f, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, optionsOpacity, 0, false);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			PrintText(option, optionsFont, 0.74f + menuXOffset, (((optionCount - (currentOption - maxOptions)) * 0.04166667f) + 0.11f), 0.55f, 0.55f, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, optionsOpacity, 0, false);
	}
	else
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			PrintText(option, optionsFont, 0.74f + menuXOffset, (optionCount * 0.04166667f + 0.11f), 0.55f, 0.55f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 0, false);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			PrintText(option, optionsFont, 0.74f + menuXOffset, (((optionCount - (currentOption - maxOptions)) * 0.04166667f) + 0.11f), 0.55f, 0.55f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 0, false);
	}
}


void toggleFreeze(int index)
{
	if (objectIsFrozen)
	{
		ENTITY::FREEZE_ENTITY_POSITION(index, false);
	}
	else
	{
		ENTITY::FREEZE_ENTITY_POSITION(index, true);
	}
}
void changeEntityYaw_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Yaw += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityRoll_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Roll -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}

void moveEntityX_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.x -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityY_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.y += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}

void moveEntityY_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.y -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityZ_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.z += 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void moveEntityZ_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(Handle, 1);
		Pos.z -= 0.25f;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_COORDS(Handle, Pos.x, Pos.y, Pos.z, 0, 0, 0, 1);
	}
}
void changeEntityPitch_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Pitch += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityPitch_Min(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Pitch -= 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}
void changeEntityRoll_Plus(uint Handle)
{
	if (ENTITY::DOES_ENTITY_EXIST(Handle))
	{
		RequestNetworkControl(Handle);
		float Yaw = ENTITY::GET_ENTITY_HEADING(Handle);
		float Pitch = ENTITY::GET_ENTITY_PITCH(Handle);
		float Roll = ENTITY::GET_ENTITY_ROLL(Handle);
		Roll += 2.5;
		Vector3 Rot;
		Rot.x = Pitch; Rot.y = Roll, Rot.z = Yaw;
		RequestNetworkControl(Handle);
		ENTITY::SET_ENTITY_ROTATION(Handle, Rot.x, Rot.x, Rot.z, 2, 1);
	}
}

bool Create_Object(char* ObjectName, char* Name, Vector3 Pos, bool custom = false, int hash = 0)
{
	if (custom)
	{
		if (STREAMING::IS_MODEL_IN_CDIMAGE(hash))
		{
			if (STREAMING::IS_MODEL_VALID(hash))
			{
				STREAMING::REQUEST_MODEL(hash);
				if (STREAMING::HAS_MODEL_LOADED(hash))
				{
					SpawnedObject[SpawnedObjects] = OBJECT::CREATE_OBJECT(hash, Pos.x, Pos.y - 2, Pos.z, 1, 1, 0);
					ObjectNameArray[SpawnedObjects] = Name;
					if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
					{
						SpawnedObjects++;
						if (SpawnedObjects >= 15)
							SpawnedObjects = 0;
						return true;
					}
					else return false;
				}
				else return false;
			}
		}
	}

	else
	{
		if (STREAMING::IS_MODEL_IN_CDIMAGE(GAMEPLAY::GET_HASH_KEY(ObjectName)))
		{
			if (STREAMING::IS_MODEL_VALID(GAMEPLAY::GET_HASH_KEY(ObjectName)))
			{
				STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(ObjectName));
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
				if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(ObjectName)))
				{
					SpawnedObject[SpawnedObjects] = OBJECT::CREATE_OBJECT(GAMEPLAY::GET_HASH_KEY(ObjectName), coords.x, coords.y - 2, coords.z, 1, 1, 0);
					ObjectNameArray[SpawnedObjects] = ObjectName;
					if (ENTITY::DOES_ENTITY_EXIST(SpawnedObject[SpawnedObjects]))
					{
						SpawnedObjects++;
						if (SpawnedObjects >= 15)
							SpawnedObjects = 0;
						return true;
					}
					else return false;
				}
				else return false;
			}
		}
	}
}

void DeleteEntity(int Handle)
{
	RequestNetworkControl(Handle);
	ENTITY::SET_ENTITY_AS_MISSION_ENTITY(Handle, 1, 1);
	ENTITY::DELETE_ENTITY(&Handle);
}
bool Rampamontechiliana = false;
bool Rampamontechilian()
{
	float h;
	h = ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID());
	//Above Ramp
	//ufo0 = create_object(model, -20.663967, -850.644409, 325.828614);
	//Main Ramp
	int model2 = -629735826;
	int model = -629735826;
	uo = OBJECT::CREATE_OBJECT3(model2, 509.8423, 5589.2422, 791.0656, 0, 0, 0);
	uo1 = OBJECT::CREATE_OBJECT3(model2, 520.5002, 5584.3774, 790.5033, 0, 0, 0);
	uo2 = OBJECT::CREATE_OBJECT3(model2, 531.0571, 5579.5405, 788.6912, 0, 0, 0);
	uo3 = OBJECT::CREATE_OBJECT3(model2, 541.3253, 5574.8403, 785.4896, 0, 0, 0);
	uo4 = OBJECT::CREATE_OBJECT3(model2, 551.0662, 5570.3701, 780.7990, 0, 0, 0);
	uo5 = OBJECT::CREATE_OBJECT3(model2, 560.1738, 5566.2046, 774.6979, 0, 0, 0);
	uo6 = OBJECT::CREATE_OBJECT3(model2, 568.6718, 5562.3198, 767.4281, 0, 0, 0);
	uo7 = OBJECT::CREATE_OBJECT3(model2, 576.9716, 5558.5269, 759.5663, 0, 0, 0);
	uo8 = OBJECT::CREATE_OBJECT3(model2, 585.2493, 5554.7471, 751.7451, 0, 0, 0);
	uo9 = OBJECT::CREATE_OBJECT3(model2, 593.5072, 5550.9722, 743.9170, 0, 0, 0);
	uo10 = OBJECT::CREATE_OBJECT3(model, 601.7770, 5547.1912, 736.0764, 0, 0, 0);
	uo12 = OBJECT::CREATE_OBJECT3(model, 610.0651, 5543.3994, 728.2167, 0, 0, 0);
	uo13 = OBJECT::CREATE_OBJECT3(model, 618.3337, 5539.6226, 720.3861, 0, 0, 0);
	uo14 = OBJECT::CREATE_OBJECT3(model, 626.6017, 5535.8477, 712.5473, 0, 0, 0);
	uo15 = OBJECT::CREATE_OBJECT3(model, 634.8616, 5532.0669, 704.7252, 0, 0, 0);
	uo16 = OBJECT::CREATE_OBJECT3(model, 643.1213, 5528.2861, 696.8940, 0, 0, 0);
	uo17 = OBJECT::CREATE_OBJECT3(model, 651.3914, 5524.5059, 689.0526, 0, 0, 0);
	uo18 = OBJECT::CREATE_OBJECT3(model, 659.6512, 5520.7275, 681.2211, 0, 0, 0);
	uo19 = OBJECT::CREATE_OBJECT3(model, 667.9110, 5516.9424, 673.3893, 0, 0, 0);
	uo20 = OBJECT::CREATE_OBJECT3(model, 676.1708, 5513.1670, 665.5580, 0, 0, 0);
	uo22 = OBJECT::CREATE_OBJECT3(model, 684.4307, 5509.3789, 657.7266, 0, 0, 0);
	uo23 = OBJECT::CREATE_OBJECT3(model, 692.6906, 5505.6079, 649.9052, 0, 0, 0);
	uo24 = OBJECT::CREATE_OBJECT3(model, 700.9504, 5501.8271, 642.0737, 0, 0, 0);
	uo25 = OBJECT::CREATE_OBJECT3(model, 709.2201, 5498.0464, 634.2426, 0, 0, 0);
	uo26 = OBJECT::CREATE_OBJECT3(model, 717.4602, 5494.2759, 626.4309, 0, 0, 0);
	uo27 = OBJECT::CREATE_OBJECT3(model, 725.7202, 5490.4980, 618.5996, 0, 0, 0);
	uo28 = OBJECT::CREATE_OBJECT3(model, 733.9800, 5486.7226, 610.7783, 0, 0, 0);
	uo29 = OBJECT::CREATE_OBJECT3(model, 742.5997, 5482.7764, 603.1669, 0, 0, 0);
	uo30 = OBJECT::CREATE_OBJECT3(model, 751.8304, 5478.5518, 596.3347, 0, 0, 0);
	uo32 = OBJECT::CREATE_OBJECT3(model, 761.7103, 5474.0220, 590.6132, 0, 0, 0);
	uo33 = OBJECT::CREATE_OBJECT3(model, 772.0702, 5469.2827, 586.0803, 0, 0, 0);
	uo34 = OBJECT::CREATE_OBJECT3(model, 782.8400, 5464.3433, 582.8604, 0, 0, 0);
	uo35 = OBJECT::CREATE_OBJECT3(model, 793.8899, 5459.2847, 581.1174, 0, 0, 0);
	uo36 = OBJECT::CREATE_OBJECT3(model, 805.1001, 5454.1479, 580.8762, 0, 0, 0);
	uo37 = OBJECT::CREATE_OBJECT3(model, 816.1702, 5449.0796, 581.9746, 0, 0, 0);
	uo38 = OBJECT::CREATE_OBJECT3(model, 827.1907, 5444.0405, 584.5823, 0, 0, 0);
	uo39 = OBJECT::CREATE_OBJECT3(model, 837.6807, 5439.2407, 588.8990, 0, 0, 0);

	ENTITY::SET_ENTITY_ROTATION(uo, 0.1410, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo1, 5.4410, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo2, 12.4410, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo3, 19.4409, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo4, 27.5407, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo5, 35.0403, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo6, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo7, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo8, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo9, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo10, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo12, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo13, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo14, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo15, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo16, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo17, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo18, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo19, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo20, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo22, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo23, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo24, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo25, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo26, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo27, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo28, 40.7396, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo29, 36.9395, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo30, 31.0392, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo32, 24.5989, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo33, 18.9288, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo34, 11.5788, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo35, 5.0787, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo36, -2.5212, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo37, -7.6213, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo38, -16.6212, 0.0, 65.3998, 2, 1);
	ENTITY::SET_ENTITY_ROTATION(uo39, -24.4210, 0.0, 65.3998, 2, 1);

	ENTITY::FREEZE_ENTITY_POSITION(uo, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo1, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo2, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo3, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo4, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo5, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo6, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo7, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo8, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo9, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo10, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo12, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo13, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo14, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo15, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo16, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo17, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo18, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo19, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo20, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo22, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo23, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo24, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo25, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo26, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo27, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo28, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo29, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo30, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo32, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo33, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo34, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo35, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo36, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo37, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo38, true);
	ENTITY::FREEZE_ENTITY_POSITION(uo39, true);
	int myhandle = PLAYER::PLAYER_PED_ID(),
		myvehicle;
	if (PED::IS_PED_IN_ANY_VEHICLE(myhandle, true)) {
		myvehicle = PED::GET_VEHICLE_PED_IS_IN(myhandle, 0);
		if (ENTITY::DOES_ENTITY_EXIST(myvehicle) && ENTITY::IS_ENTITY_A_VEHICLE(myvehicle)) {
			ENTITY::SET_ENTITY_COORDS2(myvehicle, 509.8423, 5589.2422, 792.0000, 0, 0, 0, 1);
		}
		else {
			ENTITY::SET_ENTITY_COORDS2(myhandle, 509.8423, 5589.2422, 792.0000, 0, 0, 0, 1);
		}

	}
	return 0;
}


bool spawnBumpercar()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = -0.34, a.y = 0.32, a.z = -0.25;
	Vector3 b; b.x = 0, b.y = 0, b.z = 180;
	Vector3 Tire; Tire.x = 0.0, Tire.y = 0.0; Tire.z = 0.0;//Right Front(inner tire)
	Vector3 TireA; TireA.x = 0.40, TireA.y = 1.0, TireA.z = -0.51;//X Coord - Y Coord - Z Coord
	Vector3 TireB; TireB.x = 0.0, TireB.y = 0.0, TireB.z = 88.0;//Pitch - Roll - Yaw
	Vector3 Tire01; Tire01.x = 0.0, Tire01.y = 0.0; Tire01.z = 0;//Right Front(outter tire)
	Vector3 TireC; TireC.x = 0.59, TireC.y = 1.0, TireC.z = -0.51;//X Coord - Y Coord - Z Coord
	Vector3 TireD; TireD.x = 0.0, TireD.y = 0.0, TireD.z = -90.0;//Pitch - Roll - Yaw
	Vector3 Tire02; Tire02.x = 0.0, Tire02.y = 0.0; Tire02.z = 0.0;//Left Front(inner tire)
	Vector3 TireE; TireE.x = -1.09, TireE.y = 1.0, TireE.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireF; TireF.x = 0.0, TireF.y = 0.0, TireF.z = -88.0;//Pitch - Roll - Yaw
	Vector3 Tire03; Tire03.x = 0.0, Tire03.y = 0.0; Tire03.z = 0.0;//Left Front(outter tire)
	Vector3 TireG; TireG.x = -1.264, TireG.y = 1.0, TireG.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireH; TireH.x = 0.0, TireH.y = 0.0, TireH.z = 92.0;//Pitch - Roll - Yaw
	Vector3 Engine1; Engine1.x = 0.0, Engine1.y = 0.0; Engine1.z = 0.0;//Engine
	Vector3 EngineA; EngineA.x = -0.39, EngineA.y = -1.60, EngineA.z = -0.70;//X Coord - Y Coord - Z Coord
	Vector3 EngineB; EngineB.x = 0.0, EngineB.y = 0.0, EngineB.z = 0.0;//Pitch - Roll - Yaw
	Vector3 Tire04; Tire04.x = 0.0, Tire04.y = 0.0; Tire04.z = 0.0;//Right Rear(inner tire)
	Vector3 TireI; TireI.x = 0.22, TireI.y = -1.40, TireI.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireJ; TireJ.x = 0.0, TireJ.y = 0.0, TireJ.z = -88.0;//Pitch - Roll - Yaw
	Vector3 Tire05; Tire05.x = 0.0, Tire05.y = 0.0; Tire05.z = 0.0;//Right Rear(middle tire)
	Vector3 TireK; TireK.x = 0.42, TireK.y = -1.40, TireK.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireL; TireL.x = 0.0, TireL.y = 0.0, TireL.z = 90.0;//Pitch - Roll - Yaw
	Vector3 Tire06; Tire06.x = 0.0, Tire06.y = 0.0; Tire06.z = 0.0;//Right Rear(outter tire)
	Vector3 TireM; TireM.x = 0.593, TireM.y = -1.40, TireM.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireN; TireN.x = 0.0, TireN.y = 0.0, TireN.z = -89.0;//Pitch - Roll - Yaw
	Vector3 Tire07; Tire07.x = 0.0, Tire07.y = 0.0; Tire07.z = 0.0;//Left Rear(inner tire)
	Vector3 TireO; TireO.x = -0.81, TireO.y = -1.40, TireO.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireP; TireP.x = 0.0, TireP.y = 0.0, TireP.z = 88.0;//Pitch - Roll - Yaw
	Vector3 Tire08; Tire08.x = 0.0, Tire08.y = 0.0; Tire08.z = 0.0;//Left Rear(middle tire)
	Vector3 TireQ; TireQ.x = -1.01, TireQ.y = -1.40, TireQ.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireR; TireR.x = 0.0, TireR.y = 0.0, TireR.z = -91.0;//Pitch - Roll - Yaw
	Vector3 Tire09; Tire09.x = 0.0, Tire09.y = 0.0; Tire09.z = 0.0;//Left Rear(outter tire)
	Vector3 TireSs; TireSs.x = -1.184, TireSs.y = -1.40, TireSs.z = -0.50;//X Coord - Y Coord - Z Coord
	Vector3 TireT; TireT.x = 0.0, TireT.y = 0.0, TireT.z = 88.0;//Pitch - Roll - Yaw
	Vector3 Hood1; Hood1.x = 0, Hood1.y = 0; Hood1.z = 0;//Hood
	Vector3 HoodA; HoodA.x = -0.34, HoodA.y = 1.2, HoodA.z = -0.40;//X Coord - Y Coord - Z Coord
	Vector3 HoodB; HoodB.x = -24.0, HoodB.y = 0.0, HoodB.z = 0.0;//Pitch - Roll - Yaw
	Vector3 Battery1; Battery1.x = 0.0, Battery1.y = 0.0; Battery1.z = 0.0;//Battery
	Vector3 BatteryA; BatteryA.x = -0.34, BatteryA.y = 1.06, BatteryA.z = -0.06;//X Coord - Y Coord - Z Coord
	Vector3 BatteryB; BatteryB.x = -24.0, BatteryB.y = 0.0, BatteryB.z = 0.0;//Pitch - Roll - Yaw
	int hash = GAMEPLAY::GET_HASH_KEY("blista");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_bumper_car_01");
	int Tires = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
	int Engine = GAMEPLAY::GET_HASH_KEY("prop_car_engine_01");
	int Hood = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
	int Battery = GAMEPLAY::GET_HASH_KEY("prop_power_cell");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(Tires);
	STREAMING::REQUEST_MODEL(Engine);
	STREAMING::REQUEST_MODEL(Hood);
	STREAMING::REQUEST_MODEL(Battery);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(Tires) && STREAMING::HAS_MODEL_LOADED(Engine) && STREAMING::HAS_MODEL_LOADED(Hood) && STREAMING::HAS_MODEL_LOADED(Battery))
	{
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, 1, 0, 1);
		int Tire1 = OBJECT::CREATE_OBJECT(Tires, Tire.x, Tire.y, Tire.z, 1, 0, 1);//Right Front(inner tire)
		int Tire2 = OBJECT::CREATE_OBJECT(Tires, Tire01.x, Tire01.y, Tire01.z, 1, 0, 1);//right Front(outter tire)
		int Tire3 = OBJECT::CREATE_OBJECT(Tires, Tire02.x, Tire02.y, Tire02.z, 1, 0, 1);//Left Front(inner tire)
		int Tire4 = OBJECT::CREATE_OBJECT(Tires, Tire03.x, Tire03.y, Tire03.z, 1, 0, 1);//Left Front(outter tire)
		int Engine01 = OBJECT::CREATE_OBJECT(Engine, Engine1.x, Engine1.y, Engine1.z, 1, 0, 1);//Engine
		int Tire5 = OBJECT::CREATE_OBJECT(Tires, Tire04.x, Tire04.y, Tire04.z, 1, 0, 1);//Right Rear(inner tire)
		int Tire6 = OBJECT::CREATE_OBJECT(Tires, Tire05.x, Tire05.y, Tire05.z, 1, 0, 1);//Right Rear(middle tire)
		int Tire7 = OBJECT::CREATE_OBJECT(Tires, Tire06.x, Tire06.y, Tire06.z, 1, 0, 1);//Right Rear(outter tire)
		int Tire8 = OBJECT::CREATE_OBJECT(Tires, Tire07.x, Tire07.y, Tire07.z, 1, 0, 1);//Left Rear(inner tire)
		int Tire9 = OBJECT::CREATE_OBJECT(Tires, Tire08.x, Tire08.y, Tire08.z, 1, 0, 1);//Left Rear(middle tire)
		int Tire10 = OBJECT::CREATE_OBJECT(Tires, Tire09.x, Tire09.y, Tire09.z, 1, 0, 1);//Left Rear(outter tire)
		int Hood01 = OBJECT::CREATE_OBJECT(Hood, Hood1.x, Hood1.y, Hood1.z, 1, 0, 1);//Hood
		int Battery01 = OBJECT::CREATE_OBJECT(Battery, Battery1.x, Battery1.y, Battery1.z, 1, 0, 1);//Battery
		if (ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Tire1) && ENTITY::DOES_ENTITY_EXIST(Tire2) && ENTITY::DOES_ENTITY_EXIST(Tire3) && ENTITY::DOES_ENTITY_EXIST(Tire4) && ENTITY::DOES_ENTITY_EXIST(Engine01) && ENTITY::DOES_ENTITY_EXIST(Tire5) && ENTITY::DOES_ENTITY_EXIST(Tire6) && ENTITY::DOES_ENTITY_EXIST(Tire7) && ENTITY::DOES_ENTITY_EXIST(Tire8) && ENTITY::DOES_ENTITY_EXIST(Tire9) && ENTITY::DOES_ENTITY_EXIST(Tire10) && ENTITY::DOES_ENTITY_EXIST(Hood01) && ENTITY::DOES_ENTITY_EXIST(Battery01))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire1, Vehicle, 0, TireA.x, TireA.y, TireA.z, TireB.x, TireB.y, TireB.z, 0, 1, 0, 0, 2, 1);//Right Front(inner tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire2, Vehicle, 0, TireC.x, TireC.y, TireC.z, TireD.x, TireD.y, TireD.z, 0, 1, 0, 0, 2, 1);//right Front(outter tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire3, Vehicle, 0, TireE.x, TireE.y, TireE.z, TireF.x, TireF.y, TireF.z, 0, 1, 0, 0, 2, 1);//Left Front(inner tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire4, Vehicle, 0, TireG.x, TireG.y, TireG.z, TireH.x, TireH.y, TireH.z, 0, 1, 0, 0, 2, 1);//Left Front(outter tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Engine01, Vehicle, 0, EngineA.x, EngineA.y, EngineA.z, EngineB.x, EngineB.y, EngineB.z, 0, 1, 0, 0, 2, 1);//Engine
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire5, Vehicle, 0, TireI.x, TireI.y, TireI.z, TireJ.x, TireJ.y, TireJ.z, 0, 1, 0, 0, 2, 1);//Right Rear(inner tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire6, Vehicle, 0, TireK.x, TireK.y, TireK.z, TireL.x, TireL.y, TireL.z, 0, 1, 0, 0, 2, 1);//Right Rear(middle tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire7, Vehicle, 0, TireM.x, TireM.y, TireM.z, TireN.x, TireN.y, TireN.z, 0, 1, 0, 0, 2, 1);//Right Rear(outter tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire8, Vehicle, 0, TireO.x, TireO.y, TireO.z, TireP.x, TireP.y, TireP.z, 0, 1, 0, 0, 2, 1);//Left Rear(inner tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire9, Vehicle, 0, TireQ.x, TireQ.y, TireQ.z, TireR.x, TireR.y, TireR.z, 0, 1, 0, 0, 2, 1);//Left Rear(middle tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire10, Vehicle, 0, TireSs.x, TireSs.y, TireSs.z, TireT.x, TireT.y, TireT.z, 0, 1, 0, 0, 2, 1);//Left Rear(outter tire)
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Hood01, Vehicle, 0, HoodA.x, HoodA.y, HoodA.z, HoodB.x, HoodB.y, HoodB.z, 0, 1, 0, 0, 2, 1);//Hood
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Battery01, Vehicle, 0, BatteryA.x, BatteryA.y, BatteryA.z, BatteryB.x, BatteryB.y, BatteryB.z, 0, 1, 0, 0, 2, 1);//Battery
				ENTITY::SET_ENTITY_VISIBLE(Handle, true);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}


bool spawnBike()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//Tires
	Vector3 Tire; Tire.x = 0.0, Tire.y = 0.0; Tire.z = 0.0;//Right Outter Tire (Front)
	Vector3 TireA; TireA.x = 0.20, TireA.y = 0.75, TireA.z = -0.22;
	Vector3 TireB; TireB.x = 0.0, TireB.y = 0.0, TireB.z = -88.0;
	Vector3 Tire02; Tire02.x = 0.0, Tire02.y = 0.0; Tire02.z = 0.0;//Middle Tire
	Vector3 TireC; TireC.x = 0.0, TireC.y = 0.75, TireC.z = -0.22;
	Vector3 TireD; TireD.x = 0.0, TireD.y = 0.0, TireD.z = 88.0;
	Vector3 Tire03; Tire03.x = 0.0, Tire03.y = 0.0; Tire03.z = 0.0;//Left Outter Tire
	Vector3 TireE; TireE.x = -0.19, TireE.y = 0.756, TireE.z = -0.22;
	Vector3 TireF; TireF.x = 0.0, TireF.y = 0.0, TireF.z = 88.0;
	Vector3 Tire04; Tire04.x = 0.0, Tire04.y = 0.0; Tire04.z = 0.0;//Middle Tire (Rear)
	Vector3 TireG; TireG.x = 0.0, TireG.y = -0.664, TireG.z = -0.22;
	Vector3 TireH; TireH.x = 0.0, TireH.y = 0.0, TireH.z = 88.0;
	Vector3 Tire05; Tire05.x = 0.0, Tire05.y = 0.0; Tire05.z = 0.0;//Left Outter Tire
	Vector3 TireI; TireI.x = -0.19, TireI.y = -0.657, TireI.z = -0.22;
	Vector3 TireJ; TireJ.x = 0.0, TireJ.y = 0.0, TireJ.z = 88.0;
	Vector3 Tire06; Tire06.x = 0.0, Tire06.y = 0.0; Tire06.z = 0.0;//Right Outter Tire
	Vector3 TireK; TireK.x = 0.19, TireK.y = -0.67, TireK.z = -0.22;
	Vector3 TireL; TireL.x = 0.0, TireL.y = 0.0, TireL.z = -91.0;
	//MiniGuns
	Vector3 MiniGun; MiniGun.x = 0.0, MiniGun.y = 0.0; MiniGun.z = 0.0;//Right
	Vector3 MiniGunA; MiniGunA.x = 0.40, MiniGunA.y = 0.90, MiniGunA.z = -0.20;
	Vector3 MiniGunB; MiniGunB.x = -0.89, MiniGunB.y = 0.0, MiniGunB.z = 88.0;
	Vector3 MiniGun02; MiniGun02.x = 0.0, MiniGun02.y = 0.0; MiniGun02.z = 0.0;//Left
	Vector3 MiniGunC; MiniGunC.x = -0.40, MiniGunC.y = 0.90, MiniGunC.z = -0.20;
	Vector3 MiniGunD; MiniGunD.x = 0.89, MiniGunD.y = 0.0, MiniGunD.z = 88.0;
	//Tablets
	Vector3 Tablet; Tablet.x = 0.0, Tablet.y = 0.0; Tablet.z = 0.0;
	Vector3 TabletA; TabletA.x = -0.0, TabletA.y = -0.771, TabletA.z = 0.27;
	Vector3 TabletB; TabletB.x = -25.0, TabletB.y = 89.0, TabletB.z = 0.0;
	//Flares
	Vector3 Flare; Flare.x = 0.0, Flare.y = 0.0; Flare.z = 0.0;//Right
	Vector3 FlareA; FlareA.x = 0.09, FlareA.y = -0.53, FlareA.z = 0.38;
	Vector3 FlareB; FlareB.x = -93.0, FlareB.y = 0.0, FlareB.z = 0.0;
	Vector3 Flare02; Flare02.x = 0.0, Flare02.y = 0.0; Flare02.z = 0.0;//Left
	Vector3 FlareC; FlareC.x = -0.09, FlareC.y = -0.53, FlareC.z = 0.38;
	Vector3 FlareD; FlareD.x = -93.0, FlareD.y = 0.0, FlareD.z = 0.0;
	int Carbon_RS = GAMEPLAY::GET_HASH_KEY("carbonrs");
	int Tires = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
	int MiniGuns = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
	int Tablets = GAMEPLAY::GET_HASH_KEY("prop_cs_tablet");
	int Flares = GAMEPLAY::GET_HASH_KEY("prop_flare_01");
	STREAMING::REQUEST_MODEL(Carbon_RS);
	STREAMING::REQUEST_MODEL(Tires);
	STREAMING::REQUEST_MODEL(MiniGuns);
	STREAMING::REQUEST_MODEL(Tablets);
	STREAMING::REQUEST_MODEL(Flares);
	STREAMING::REQUEST_MODEL(Tires);
	if (STREAMING::HAS_MODEL_LOADED(Carbon_RS) && STREAMING::HAS_MODEL_LOADED(Tires) && STREAMING::HAS_MODEL_LOADED(MiniGuns) && STREAMING::HAS_MODEL_LOADED(Tablets) && STREAMING::HAS_MODEL_LOADED(Flares))
	{
		int Tire1 = OBJECT::CREATE_OBJECT(Tires, Tire.x, Tire.y, Tire.z, 1, 0, 1);
		int Tire2 = OBJECT::CREATE_OBJECT(Tires, Tire02.x, Tire02.y, Tire02.z, 1, 0, 1);
		int Tire3 = OBJECT::CREATE_OBJECT(Tires, Tire03.x, Tire03.y, Tire03.z, 1, 0, 1);
		int Tire4 = OBJECT::CREATE_OBJECT(Tires, Tire04.x, Tire04.y, Tire04.z, 1, 0, 1);
		int Tire5 = OBJECT::CREATE_OBJECT(Tires, Tire05.x, Tire05.y, Tire05.z, 1, 0, 1);
		int Tire6 = OBJECT::CREATE_OBJECT(Tires, Tire06.x, Tire06.y, Tire06.z, 1, 0, 1);
		int MiniGun1 = OBJECT::CREATE_OBJECT(MiniGuns, MiniGun.x, MiniGun.y, MiniGun.z, 1, 0, 1);
		int MiniGun2 = OBJECT::CREATE_OBJECT(MiniGuns, MiniGun02.x, MiniGun02.y, MiniGun02.z, 1, 0, 1);
		int Tablet1 = OBJECT::CREATE_OBJECT(Tablets, Tablet.x, Tablet.y, Tablet.z, 1, 0, 1);
		int Flare1 = OBJECT::CREATE_OBJECT(Flares, Flare.x, Flare.y, Flare.z, 1, 0, 1);
		int Flare2 = OBJECT::CREATE_OBJECT(Flares, Flare02.x, Flare02.y, Flare02.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Tire1) && ENTITY::DOES_ENTITY_EXIST(Tire2) && ENTITY::DOES_ENTITY_EXIST(Tire3) && ENTITY::DOES_ENTITY_EXIST(Tire4) && ENTITY::DOES_ENTITY_EXIST(Tire5) && ENTITY::DOES_ENTITY_EXIST(Tire6) && ENTITY::DOES_ENTITY_EXIST(MiniGun1) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(Tablet1) && ENTITY::DOES_ENTITY_EXIST(Flare1) && ENTITY::DOES_ENTITY_EXIST(Flare2))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(Carbon_RS, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(Carbon_RS);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire1, Vehicle, 0, TireA.x, TireA.y, TireA.z, TireB.x, TireB.y, TireB.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire2, Vehicle, 0, TireC.x, TireC.y, TireC.z, TireD.x, TireD.y, TireD.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire3, Vehicle, 0, TireE.x, TireE.y, TireE.z, TireF.x, TireF.y, TireF.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire4, Vehicle, 0, TireG.x, TireG.y, TireG.z, TireH.x, TireH.y, TireH.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire5, Vehicle, 0, TireI.x, TireI.y, TireI.z, TireJ.x, TireJ.y, TireJ.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tire6, Vehicle, 0, TireK.x, TireK.y, TireK.z, TireL.x, TireL.y, TireL.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun1, Vehicle, 0, MiniGunA.x, MiniGunA.y, MiniGunA.z, MiniGunB.x, MiniGunB.y, MiniGunB.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, MiniGunC.x, MiniGunC.y, MiniGunC.z, MiniGunD.x, MiniGunD.y, MiniGunD.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Tablet1, Vehicle, 0, TabletA.x, TabletA.y, TabletA.z, TabletB.x, TabletB.y, TabletB.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Flare1, Vehicle, 0, FlareA.x, FlareA.y, FlareA.z, FlareB.x, FlareB.y, FlareB.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Flare2, Vehicle, 0, FlareC.x, FlareC.y, FlareC.z, FlareD.x, FlareD.y, FlareD.z, 0, 1, 0, 0, 2, 1);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool doTeddycar = false;
bool spawnTeddycar()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//hash2_RollerCar
	Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
	Vector3 a; a.x = 0.0, a.y = 0.0, a.z = -0.5;//X Coord - Y Coord - Z Coord
	Vector3 b; b.x = 0.0, b.y = 0.0, b.z = 180.0;//Pitch - Roll - Yaw
												 //hash3_Seats
	Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
	Vector3 a1; a1.x = 0.0, a1.y = 0.0, a1.z = 0.0;
	Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 0.0;
	//hash3_FLWheel1
	Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
	Vector3 a2; a2.x = -0.97, a2.y = 1.0, a2.z = -0.25;
	Vector3 b2; b2.x = 0.0, b2.y = 0.0, b2.z = -89.0;
	//hash3_RLWheel1
	Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
	Vector3 a3; a3.x = -1.00, a3.y = -1.10, a3.z = -0.24;
	Vector3 b3; b3.x = 0.0, b3.y = 0.0, b3.z = -89.0;
	//hash3_RFWheel1
	Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
	Vector3 a4; a4.x = 0.97, a4.y = 1.00, a4.z = -0.24;
	Vector3 b4; b4.x = 0.0, b4.y = 0.0, b4.z = 89.0;
	//hash3_RRWheel1
	Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
	Vector3 a5; a5.x = 1.00, a5.y = -1.10, a5.z = -0.24;
	Vector3 b5; b5.x = 0.0, b5.y = 0.0, b5.z = 89.0;
	int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
	int hash2_RollerCar = GAMEPLAY::GET_HASH_KEY("ind_prop_dlc_roller_car");
	int hash3_Seats = GAMEPLAY::GET_HASH_KEY("prop_hd_seats_01");
	int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");
	STREAMING::REQUEST_MODEL(hash_T20);
	STREAMING::REQUEST_MODEL(hash2_RollerCar);
	STREAMING::REQUEST_MODEL(hash3_Seats);
	STREAMING::REQUEST_MODEL(hash4_Wheel);
	if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_RollerCar) && STREAMING::HAS_MODEL_LOADED(hash3_Seats) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
	{
		int RollerCar = OBJECT::CREATE_OBJECT(hash2_RollerCar, null.x, null.y, null.z, 1, 0, 1);
		int Seats = OBJECT::CREATE_OBJECT(hash3_Seats, null1.x, null1.y, null1.z, 1, 0, 1);
		int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
		int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
		int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
		int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(RollerCar) && ENTITY::DOES_ENTITY_EXIST(Seats) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, false);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RollerCar, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(Seats, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
				ENTITY::SET_ENTITY_VISIBLE(Handle, true);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool doModdedT20 = false;
bool spawnModdedT20()
{
	uint Handle = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	//hash2_EMP
	Vector3 null; null.x = 0.0, null.y = 0.0; null.z = 0.0;
	Vector3 a; a.x = 0.0, a.y = 1.61, a.z = -0.12;//X Coord - Y Coord - Z Coord
	Vector3 b; b.x = -12.0, b.y = 0.0, b.z = 0.0;//Pitch - Roll - Yaw
												 //hash3_MiniGun
	Vector3 null1; null1.x = 0.0, null1.y = 0.0; null1.z = 0.0;
	Vector3 a1; a1.x = -0.60, a1.y = 1.60, a1.z = 0.20;
	Vector3 b1; b1.x = 0.0, b1.y = 0.0, b1.z = 88.0;
	//hash3_MiniGun2
	Vector3 null0; null0.x = 0.0, null0.y = 0.0; null0.z = 0.0;
	Vector3 a0; a0.x = 0.60, a0.y = 1.60, a0.z = 0.20;
	Vector3 b0; b0.x = 0.0, b0.y = 0.0, b0.z = 88.0;
	//hash4_FLWheel1
	Vector3 null2; null2.x = 0.0, null2.y = 0.0; null2.z = 0.0;
	Vector3 a2; a2.x = -0.94, a2.y = 1.32, a2.z = -0.25;
	Vector3 b2; b2.x = 9.0, b2.y = -28.0, b2.z = 87.0;
	//hash4_RLWheel1
	Vector3 null3; null3.x = 0.0, null3.y = 0.0; null3.z = 0.0;
	Vector3 a3; a3.x = -0.95, a3.y = -1.34, a3.z = -0.25f;
	Vector3 b3; b3.x = 9.0, b3.y = 38.0, b3.z = 87.0;
	//hash4_RFWheel1
	Vector3 null4; null4.x = 0.0, null4.y = 0.0; null4.z = 0.0;
	Vector3 a4; a4.x = 0.95, a4.y = 1.33, a4.z = -0.23;
	Vector3 b4; b4.x = 11.0, b4.y = 26.0, b4.z = -89.0;
	//hash4_RRWheel1
	Vector3 null5; null5.x = 0.0, null5.y = 0.0; null5.z = 0.0;
	Vector3 a5; a5.x = 0.96, a5.y = -1.31, a5.z = -0.23;
	Vector3 b5; b5.x = 10.0, b5.y = 20.0, b5.z = -92.0;

	int hash_T20 = GAMEPLAY::GET_HASH_KEY("t20");
	int hash2_EMP = GAMEPLAY::GET_HASH_KEY("hei_prop_heist_emp");
	int hash3_MiniGun = GAMEPLAY::GET_HASH_KEY("prop_minigun_01");
	int hash4_Wheel = GAMEPLAY::GET_HASH_KEY("prop_wheel_01");

	STREAMING::REQUEST_MODEL(hash_T20);
	STREAMING::REQUEST_MODEL(hash2_EMP);
	STREAMING::REQUEST_MODEL(hash3_MiniGun);
	STREAMING::REQUEST_MODEL(hash4_Wheel);

	if (STREAMING::HAS_MODEL_LOADED(hash_T20) && STREAMING::HAS_MODEL_LOADED(hash2_EMP) && STREAMING::HAS_MODEL_LOADED(hash3_MiniGun) && STREAMING::HAS_MODEL_LOADED(hash4_Wheel))
	{
		int EMP = OBJECT::CREATE_OBJECT(hash2_EMP, null.x, null.y, null.z, 1, 0, 1);
		int MiniGun = OBJECT::CREATE_OBJECT(hash3_MiniGun, null1.x, null1.y, null1.z, 1, 0, 1);
		int MiniGun2 = OBJECT::CREATE_OBJECT(hash3_MiniGun, null0.x, null0.y, null0.z, 1, 0, 1);
		int FLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null2.x, null2.y, null2.z, 1, 0, 1);
		int RLWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null3.x, null3.y, null3.z, 1, 0, 1);
		int RFWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null4.x, null4.y, null4.z, 1, 0, 1);
		int RRWheel1 = OBJECT::CREATE_OBJECT(hash4_Wheel, null5.x, null5.y, null5.z, 1, 0, 1);

		if (ENTITY::DOES_ENTITY_EXIST(EMP) && ENTITY::DOES_ENTITY_EXIST(MiniGun) && ENTITY::DOES_ENTITY_EXIST(MiniGun2) && ENTITY::DOES_ENTITY_EXIST(FLWheel1) && ENTITY::DOES_ENTITY_EXIST(RLWheel1) && ENTITY::DOES_ENTITY_EXIST(RFWheel1) && ENTITY::DOES_ENTITY_EXIST(RRWheel1))
		{
			int Vehicle = VEHICLE::CREATE_VEHICLE(hash_T20, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Handle), 1, 0);

			if (ENTITY::DOES_ENTITY_EXIST(Vehicle))
			{
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash_T20);
				ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
				ENTITY::SET_ENTITY_VISIBLE(PLAYER::PLAYER_PED_ID(), true);

				ENTITY::ATTACH_ENTITY_TO_ENTITY(EMP, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(MiniGun2, Vehicle, 0, a0.x, a0.y, a0.z, b0.x, b0.y, b0.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(FLWheel1, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RLWheel1, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RFWheel1, Vehicle, 0, a4.x, a4.y, a4.z, b4.x, b4.y, b4.z, 0, 1, 0, 0, 2, 1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(RRWheel1, Vehicle, 0, a5.x, a5.y, a5.z, b5.x, b5.y, b5.z, 0, 1, 0, 0, 2, 1);
				return true;
			}
			return false;
		}
		return false;
	}
	return false;
}

bool doBoatNTrailer = false;
bool spawnBoatNTrailer()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.61, a.z = 0.28;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("suntrap");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}

bool doFlatBed = false;
bool spawnFlatBed()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -2.0, a.z = 1.1;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	Vector3 null1; null1.x = 0, null1.y = 0; null1.z = 0;
	Vector3 a1; a1.x = -1.06, a1.y = -0.1, a1.z = 0.46;
	Vector3 b1; b1.x = 91.0, b1.y = 0, b1.z = 0;
	Vector3 null2; null2.x = 0, null2.y = 0; null2.z = 0;
	Vector3 a2; a2.x = -0.9, a2.y = 0.61, a2.z = 0.62;
	Vector3 b2; b2.x = 0.0, b2.y = 100.0, b2.z = 0;
	Vector3 null3; null3.x = 0, null3.y = 0; null3.z = 0;
	Vector3 a3; a3.x = 0.9, a3.y = 0.8, a3.z = 0.41;
	Vector3 b3; b3.x = -25.0, b3.y = 0, b3.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("flatbed");
	int hash2 = GAMEPLAY::GET_HASH_KEY("t20");
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_broom");
	int hash4 = GAMEPLAY::GET_HASH_KEY("prop_roadcone01a");
	int hash5 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_02");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hash3);
	STREAMING::REQUEST_MODEL(hash4);
	STREAMING::REQUEST_MODEL(hash5);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3) && STREAMING::HAS_MODEL_LOADED(hash4) && STREAMING::HAS_MODEL_LOADED(hash5))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Broom = OBJECT::CREATE_OBJECT(hash3, null1.x, null1.y, null1.z, 1, 0, 1);
		int Cone = OBJECT::CREATE_OBJECT(hash4, null2.x, null2.y, null2.z, 1, 0, 1);
		int Tool = OBJECT::CREATE_OBJECT(hash5, null3.x, null3.y, null3.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Broom) && ENTITY::DOES_ENTITY_EXIST(Cone) && ENTITY::DOES_ENTITY_EXIST(Tool))
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Broom, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Cone, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Tool, Vehicle, 0, a3.x, a3.y, a3.z, b3.x, b3.y, b3.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}

bool doTruck = false;
bool spawnTruck()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -2.0, a.z = 0.6;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("guardian");
	int hash2 = GAMEPLAY::GET_HASH_KEY("blazer");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::SET_ENTITY_PROOFS(Vehicle, 1, 1, 1, 1, 1, 1, 1, 1);
			VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle, false);
			VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(Vehicle, false);
			VEHICLE::SET_VEHICLE_MOD_KIT(Vehicle, 0);
			VEHICLE::TOGGLE_VEHICLE_MOD(Vehicle, 18, 1);
			VEHICLE::TOGGLE_VEHICLE_MOD(Vehicle, 22, 1);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 16, 5, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 12, 2, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 11, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 14, 14, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 15, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 13, 2, 0);
			VEHICLE::SET_VEHICLE_WHEEL_TYPE(Vehicle, 6);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 23, 19, 1);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 0, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 1, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 2, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 3, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 4, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 5, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 6, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 7, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 8, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 9, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Vehicle, 10, 1, 0);
			VEHICLE::TOGGLE_VEHICLE_MOD(Vehicle, 20, 1);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}

bool doJetSki = false;
bool spawnJetSki()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0.;
	Vector3 a; a.x = -0.625, a.y = -1.9, a.z = -0.09;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	Vector3 a1; a1.x = 0.625, a1.y = -1.9, a1.z = -0.09;
	Vector3 b1; b1.x = 0, b1.y = 0, b1.z = 0;

	Vector3 a2; a2.x = 0.0, a2.y = 0.9, a2.z = -0.45;
	Vector3 b2; b2.x = 0, b2.y = 0, b2.z = 180.0;

	int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("seashark");
	int hash3 = GAMEPLAY::GET_HASH_KEY("prop_tool_box_05");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	STREAMING::REQUEST_MODEL(hash3);

	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2) && STREAMING::HAS_MODEL_LOADED(hash3))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object1 = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object2 = OBJECT::CREATE_OBJECT(hash3, null.x, null.y, null.z, 1, 0, 1);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object) && ENTITY::DOES_ENTITY_EXIST(Object1) && ENTITY::DOES_ENTITY_EXIST(Object2))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object1, Vehicle, 0, a1.x, a1.y, a1.z, b1.x, b1.y, b1.z, 0, false, 0, 0, 2, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object2, Vehicle, 0, a2.x, a2.y, a2.z, b2.x, b2.y, b2.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			ENTITY::SET_ENTITY_COLLISION(Object1, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}

bool doCustom01 = false;
bool spawnCustom01()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = -0.61, a.z = 0.28;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("boattrailer");
	int hash2 = GAMEPLAY::GET_HASH_KEY("suntrap");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doRampTruck = false;
bool RampTruck()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 10.0, a.z = -0.3;
	Vector3 b; b.x = 0, b.y = -147.0, b.z = 90.0;
	int hash = GAMEPLAY::GET_HASH_KEY("phantom");
	int hash2 = GAMEPLAY::GET_HASH_KEY("prop_lev_des_barge_01");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = OBJECT::CREATE_OBJECT(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			ENTITY::SET_ENTITY_COLLISION(Object, 1, 0);
			return true;
		}
		return false;
	}
	return false;
}

bool doBusTruck = false;
bool BusTruck()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("monster");
	int hash2 = GAMEPLAY::GET_HASH_KEY("riot");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doBufCustom = false;
bool BufCustom()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("police2");
	int hash2 = GAMEPLAY::GET_HASH_KEY("buffalo2");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Vehicle, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_EXTRA_COLOURS(Object, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doInsurg = false;
bool Insurg()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("insurgent");
	int hash2 = GAMEPLAY::GET_HASH_KEY("insurgent2");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSuper1 = false;
bool Super1()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = -0.25;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("t20");
	int hash2 = GAMEPLAY::GET_HASH_KEY("cheetah");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doSuper2 = false;
bool Super2()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("feltzer2");
	int hash2 = GAMEPLAY::GET_HASH_KEY("rapidgt");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doMuscle1 = false;
bool Muscle1()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = -0.2;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("hotknife");
	int hash2 = GAMEPLAY::GET_HASH_KEY("jb700");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}

bool doMuscle2 = false;
bool Muscle2()
{
	uint Me = PLAYER::PLAYER_PED_ID();
	Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
	Vector3 null; null.x = 0, null.y = 0; null.z = 0;
	Vector3 a; a.x = 0, a.y = 0, a.z = 2.0;
	Vector3 b; b.x = 0, b.y = 0, b.z = 0;
	int hash = GAMEPLAY::GET_HASH_KEY("coquette2");
	int hash2 = GAMEPLAY::GET_HASH_KEY("hotknife");
	STREAMING::REQUEST_MODEL(hash);
	STREAMING::REQUEST_MODEL(hash2);
	if (STREAMING::HAS_MODEL_LOADED(hash) && STREAMING::HAS_MODEL_LOADED(hash2))
	{
		int Vehicle = VEHICLE::CREATE_VEHICLE(hash, MyCoords.x, MyCoords.y, MyCoords.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		int Object = VEHICLE::CREATE_VEHICLE(hash2, null.x, null.y, null.z, ENTITY::GET_ENTITY_HEADING(Me), 1, 0);
		if (ENTITY::DOES_ENTITY_EXIST(Vehicle) && ENTITY::DOES_ENTITY_EXIST(Object))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(hash);
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Vehicle, -1);
			ENTITY::SET_ENTITY_VISIBLE(Vehicle, true);
			VEHICLE::SET_VEHICLE_MOD_KIT(Object, 0);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Object, 5);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Object, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle, 0, 0, 0);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(Object, Vehicle, 0, a.x, a.y, a.z, b.x, b.y, b.z, 0, false, 0, 0, 2, true);
			return true;
		}
		return false;
	}
	return false;
}


void SetTunable(int index, int value)
{
	FindTunablesPointer();
	if (TunablesAddress != 4)
	{
		int temp = TunablesAddress;
		temp += (index * 4);
		*(int*)temp = value;
	}
}

char* playerIPs[18];
char* GetIP(int player)
{
	{
		if (PLAYER::IS_PLAYER_PLAYING(selectedPlayer))
		{
			char* pName = PLAYER::GET_PLAYER_NAME(selectedPlayer);
			char output[76];
			unsigned char ip[4];
			ip[0] = *(UINT16*)(pName - 0x49);
			ip[1] = *(UINT16*)(pName - 0x48);
			ip[2] = *(UINT16*)(pName - 0x47);
			ip[3] = *(UINT16*)(pName - 0x46);
			sprintf(output, "%u.%u.%u.%u", ip[0], ip[1], ip[2], ip[3]);
			printf("%s", output);
			return output;
		}
		else
			return "0.0.0.0";
	}
}


void CloneCrashLoop(int player)
{
	const int _MAX_PEDS = 100;

	int cloneped;
	int netid;
	int PlayerH = PLAYER::GET_PLAYER_PED(player);
	int YourHandle = PLAYER::GET_PLAYER_PED(PLAYER::PLAYER_ID());
	Vector3 their_Pos = ENTITY::GET_ENTITY_COORDS(PlayerH, false);
	Vector3 your_Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	char* anim = "rcmpaparazzo_2";
	char* animID = "shag_loop_a";
	if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(your_Pos.x, your_Pos.y, your_Pos.z, their_Pos.x, their_Pos.y, their_Pos.z, false) > 200.0f)
	{
		if (NETWORK::NETWORK_IS_PLAYER_CONNECTED(player))
		{

			cloneped = PED::CLONE_PED(PlayerH, 1, 1, 1);
			AI::TASK_PLAY_ANIM(cloneped, anim, animID, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
			ENTITY::ATTACH_ENTITY_TO_ENTITY(cloneped, PlayerH, -1, 0, -0.3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
			netid = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(cloneped);
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(netid, 1);
			ENTITY::SET_PED_AS_NO_LONGER_NEEDED(&cloneped);
			ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&cloneped);
		}
		else if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(player) || YourHandle == PlayerH)
		{
			//MapNotify("SUCCESFULLY CRASHED THIS FGT");
			crashPlayaa = !crashPlayaa;
		}
	}
	else
	{
		drawNotification("~HUD_COLOUR_RADAR_DAMAGE~ Disabled, You're too close to the target");
		crashPlayaa = !crashPlayaa;
	}
}
void enablevehmods()
{
	int vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, 0);
}
void MaxUpgades()
{
	enablevehmods();
	int vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
	VEHICLE::SET_VEHICLE_MOD_KIT(vehicle, 0);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(vehicle, "The E-Live Network");
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(vehicle, 5);
	VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, 18, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, 22, 1);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 16, 5, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 12, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 11, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 14, 14, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 15, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 13, 2, 0);
	VEHICLE::SET_VEHICLE_WHEEL_TYPE(vehicle, 22);
	VEHICLE::SET_VEHICLE_WINDOW_TINT(vehicle, 5);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 23, 19, 1);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 0, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 1, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 2, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 3, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 4, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 5, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 6, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 7, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 8, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 9, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(vehicle, 10, 1, 0);
}
void AllowVehicleToBePlacedInGarage(int player, int veh)
{
	int uVar0 = veh;
	if (DECORATOR::_0x7CF0971D("Player_Vehicle", 3)) // if decor is registered as an int
	{
		if (DECORATOR::_0x7CF0971D("Not_Allow_As_Saved_Veh", 3)) // if decor is registered as an int
		{
			if (DECORATOR::_0x7CF0971D("Veh_Modded_By_Player", 3)) // if decor is registered as an int
			{
				if (!DECORATOR::_0x74EF9C40(uVar0, "Player_Vehicle"))// if the decor doesnt exist
				{
					if (!DECORATOR::_0x74EF9C40(uVar0, "Not_Allow_As_Saved_Veh"))// if it hasnt got the decor
					{
						if (!DECORATOR::_0x74EF9C40(uVar0, "Veh_Modded_By_Player"))
						{
							int var;
							DECORATOR::DECOR_REGISTER("Player_Vehicle", 3);
							DECORATOR::DECOR_REGISTER("Veh_Modded_By_Player", 3);

							DECORATOR::DECOR_SET_INT(uVar0, "Player_Vehicle", NETWORK::_0xF8D7AF3B(player));
							DECORATOR::DECOR_SET_INT(uVar0, "Veh_Modded_By_Player", GAMEPLAY::GET_HASH_KEY(PLAYER::GET_PLAYER_NAME(player)));
							DECORATOR::DECOR_SET_INT(uVar0, "Not_Allow_As_Saved_Veh", 0);
							if (DECORATOR::_0x74EF9C40(uVar0, "MPBitset"))
							{
								var = DECORATOR::_0xDDDE59B5(uVar0, "MPBitset");
							}
							GAMEPLAY::SET_BIT(&var, 3);
							DECORATOR::DECOR_SET_INT(uVar0, "MPBitset", var);
							VEHICLE::SET_VEHICLE_IS_STOLEN(uVar0, false);
							drawNotification("Bypassed checks, this vehicle can now be placed in player's garage!");
						}
					}
				}
			}
		}
	}
}

void maxVehicle(int VehicleHandle)
{
	int R = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
	int G = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
	int B = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
	VEHICLE::SET_VEHICLE_MOD_KIT(VehicleHandle, 0);
	VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehicleHandle, R, G, B);
	VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehicleHandle, R, G, B);
	VEHICLE::SET_VEHICLE_COLOURS(VehicleHandle, 131, 131);
	VEHICLE::SET_VEHICLE_EXTRA_COLOURS(VehicleHandle, 131, 131);
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(VehicleHandle, "ExploitCE");
	VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(VehicleHandle, 5);
	VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 18, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 22, 1);
	VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 20, 1);
	VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehicleHandle, 0, 0, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 16, 5, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 12, 2, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 11, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 14, 14, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 15, 3, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 13, 2, 0);
	VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehicleHandle, 6);
	VEHICLE::SET_VEHICLE_WINDOW_TINT(VehicleHandle, 5);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 23, 19, 1);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 0, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 1, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 2, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 3, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 4, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 5, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 6, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 7, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 8, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 9, 1, 0);
	VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 10, 1, 0);
}

int irand(int min, int max, int Add = 0)
{
	srand(GetTickCount() + Add);
	return min + (rand() % (int)(max - min + 1));
}

void crashtestv3(int player)
{
	STREAMING::REQUEST_MODEL(vehToSpawnHash);
	int PlayerH = PLAYER::GET_PLAYER_PED(player);
	int YourHandle = PLAYER::GET_PLAYER_PED(PLAYER::PLAYER_ID());
	Vector3 their_Pos = ENTITY::GET_ENTITY_COORDS(PlayerH, false);
	Vector3 your_Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
	Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(player), false);
	int handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
	float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10) * 3.14159265359;
	float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10) * 5.0f;
	float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
	float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);
	int spawnvehicle;
	if (GAMEPLAY::GET_DISTANCE_BETWEEN_COORDS(your_Pos.x, your_Pos.y, your_Pos.z, their_Pos.x, their_Pos.y, their_Pos.z, false) > 200.0f)
	{
		Freeze_Player = true;
		//crashtesting = true;

		NETWORK::NETWORK_SESSION_KICK_PLAYER(PLAYER::GET_PLAYER_PED(selectedPlayer));

		char buf[500];
		snprintf(buf, sizeof(buf), "Freezing Console: ~r~%s~", PLAYER::GET_PLAYER_NAME(selectedPlayer));
		drawNotification(buf);

		if (STREAMING::HAS_MODEL_LOADED(vehToSpawnHash))
		{
			STREAMING::REQUEST_ANIM_DICT("move_f@sexy@a");
			if (STREAMING::HAS_ANIM_DICT_LOADED("move_f@sexy@a"))
			{
				spawnvehicle = VEHICLE::CREATE_VEHICLE(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle = VEHICLE::CREATE_VEHICLE(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle = VEHICLE::CREATE_VEHICLE(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle = VEHICLE::CREATE_VEHICLE(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle = VEHICLE::CREATE_VEHICLE(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle))
				{
					spawnvehicle = CREATE_VEHICLE_NORMAL4(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
					spawnvehicle = CREATE_VEHICLE_NORMAL4(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
					spawnvehicle = CREATE_VEHICLE_NORMAL4(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
					spawnvehicle = CREATE_VEHICLE_NORMAL4(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
					spawnvehicle = CREATE_VEHICLE_NORMAL4(vehToSpawnHash, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
					if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle)) {
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle);
						ENTITY::SET_ENTITY_INVINCIBLE(spawnvehicle, true);
						VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(spawnvehicle, false);
						ENTITY::SET_ENTITY_VISIBLE(spawnvehicle, false);
						ENTITY::SET_ENTITY_COLLISION(spawnvehicle, true, true);
						ENTITY::SET_ENTITY_PROOFS(spawnvehicle, true, true, true, true, false, false, true, true);
						ENTITY::SET_ENTITY_COORDS(spawnvehicle, x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, false, false, false, true);
					}
				}
			}
		}
		if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(player))
		{
			crashtest2 = false;
			Freeze_Player = false;
			//crashtesting = false;
			drawNotification("Console should be frozen.");
			ENTITY::SET_ENTITY_AS_MISSION_ENTITY(spawnvehicle, 0, 1);
			VEHICLE::DELETE_VEHICLE(&spawnvehicle);
			ENTITY::DELETE_ENTITY(&spawnvehicle);
			CrashCounter = 0;
		}
		if (CrashCounter >= CrashCounterOut)
		{
			crashtest2 = false;
			Freeze_Player = false;
			//crashtesting = false;
			drawNotification("Console should be frozen.");
			ENTITY::SET_ENTITY_AS_MISSION_ENTITY(spawnvehicle, 0, 1);
			VEHICLE::DELETE_VEHICLE(&spawnvehicle);
			ENTITY::DELETE_ENTITY(&spawnvehicle);
			CrashCounter = 0;
		}
		CrashCounter++;
	}
	else
	{
		drawNotification("~HUD_COLOUR_RADAR_DAMAGE~ Disabled, You're too close to the target");
		crashtest = false;
		Freeze_Player = false;
		crashtesting = false;
		drawNotification("Console should be frozen.");
		ENTITY::SET_ENTITY_AS_MISSION_ENTITY(spawnvehicle, 0, 1);
		VEHICLE::DELETE_VEHICLE(&spawnvehicle);
		ENTITY::DELETE_ENTITY(&spawnvehicle);
		CrashCounter = 0;
	}
}
void AddFloatOption(char *option, float *var, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[512];
	snprintf(buf, sizeof(buf), "%s: < %f >", option, *var);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.001f;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.001f;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.001f;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.001f;
			}
		}
	}
}


void AttachNearbyPedsToPlayer(Player selectedPlayer)
{
	const int numElements = 15;
	const int arrSize = numElements * 2 + 2; //Start at index 2, and the odd elements are padding
	int pedz[arrSize];

	pedz[0] = numElements;

	int count = PED::GET_PED_NEARBY_PEDS(selectedPlayer, pedz, -1);
	for (int i = 0; i < count; ++i)
	{
		int offsettedID = i * 2 + 2;
		if (ENTITY::DOES_ENTITY_EXIST(pedz[offsettedID]))
		{
			if (pedz[offsettedID] == selectedPlayer) continue;
			{
				if (!ENTITY::IS_ENTITY_DEAD(pedz[offsettedID]))
				{
					ENTITY::ATTACH_ENTITY_TO_ENTITY(pedz[offsettedID], selectedPlayer, PED::GET_PED_BONE_INDEX(selectedPlayer, 0xe0fd), 0.0, -1.0, 0.0, 0.0, 0.0, 0, false, false, false, false, 2, true);
				}
			}
		}
	}
}

void AttachNearbyVehsToPlayer(Player selectedPlayer)
{
	const int numElements = 15;
	const int arrSize = numElements * 2 + 2; //Start at index 2, and the odd elements are padding
	int vehz[arrSize];
	//0 index is the size of the array
	vehz[0] = numElements;

	int count = PED::GET_PED_NEARBY_VEHICLES(selectedPlayer, vehz);
	for (int i = 0; i < count; ++i)
	{
		int offsettedID = i * 2 + 2;
		if (ENTITY::DOES_ENTITY_EXIST(vehz[offsettedID]))
		{
			if (vehz[offsettedID] == PED::GET_VEHICLE_PED_IS_IN(selectedPlayer, 0)) continue;
			{
				ENTITY::ATTACH_ENTITY_TO_ENTITY(vehz[offsettedID], selectedPlayer, PED::GET_PED_BONE_INDEX(selectedPlayer, 0xe0fd), 0.0, 0.0, 0.0, 0.0, 90.0, 0, false, false, false, false, 2, true);
			}
		}
	}
}
void teleportToCrash(int player)
{
	int targ_ped = PLAYER::GET_PLAYER_PED(player);
	STREAMING::REQUEST_ANIM_DICT(dict);
	if (STREAMING::HAS_ANIM_DICT_LOADED(dict))
	{
		int sceneID = CLIENT::CLIENT_CREATE_ANIMATION(23.400757, 7640.037109, 17.566275, 0, 0, 0, 2, 0, 1, 1.0f, 0.0f, 1.0f);
		CLIENT::_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(targ_ped, sceneID, dict, anim, 1000.0f, -1000.0f, 3, 1, 1148846080);
		CLIENT::_NETWORK_START_SYNCHRONISED_SCENE(sceneID);
	}
}

void fxtest(int player)
{
	Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), false);
	float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 5) * 3.14159265359;
	float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 5) * 5.0f;
	float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
	float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_repeat_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_repeat_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_repeat_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_repeat_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_repeat_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_exp_clown", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_exp_clown", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_exp_clown", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_exp_clown", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_rcbarry2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_exp_clown", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_spiral_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_spiral_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_spiral_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_spiral_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("proj_xmas_firework");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_firework_xmas_spiral_burst_rgw", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_exile2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_ex2_car_impact", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_exile2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_ex2_car_impact", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_exile2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_ex2_car_impact", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_exile2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_ex2_car_impact", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
	STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_exile2");
	GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("scr_exile2");
	GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_AT_COORD_2("scr_ex2_car_impact", x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, 0.0f, 0.0f, 0.0f, 20.0f, 0, 0, 0);
}

void FixWashVehicleClient(int Client = PLAYER::PLAYER_ID())
{
	uint Vehicle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(Client));
	VEHICLE::SET_VEHICLE_FIXED(Vehicle);
	VEHICLE::SET_VEHICLE_DEFORMATION_FIXED(Vehicle);
	VEHICLE::SET_VEHICLE_DIRT_LEVEL(Vehicle, 0);
}

void nosForplayer(Player player)
{
	Ped ped = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(player), NO);
	if (PLAYER::IS_PLAYER_PRESSING_HORN(player))
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED(player), 0))//IS_HORN_ACTIVE
		{
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(ped);
			if (NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(ped))
			{
				DWORD id = NETWORK::NET_TO_ENT(ped);
				NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(id, YES);
				AUDIO::SET_VEHICLE_BOOST_ACTIVE(ped, TRUE);
				ENTITY::APPLY_FORCE_TO_ENTITY(ped, TRUE, NULL, 2.0f, NULL, NULL, NULL, NULL, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE);
			}
		}
	}
	else
		AUDIO::SET_VEHICLE_BOOST_ACTIVE(ped, FALSE);
}
void addObjOnPlayer(char *option, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
		{
			onplayerobj = option;
			spawnobjonplayer = true;
		}
	}
}
void AddKeyboard(char *option, int action, char *defaultText, int maxLength, char *info = " ")
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
			startKeyboard(action, defaultText, maxLength);
	}
}

void addCashOption(char *option, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
		{
			objectbypassselect = option;
		}
	}
}

void GiveAllWeaponsSelf()
{
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x3656C8C1, 9999, 1); // stun gun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA, 9999, 1); // knife
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x678B81B1, 9999, 1); // night stick
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x4E875F73, 9999, 1); // hammer
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x958A4A8F, 9999, 1); // bat
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x440E4788, 9999, 1); // golf club
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x84BD7BFD, 9999, 1); // crowbar
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x1B06D571, 9999, 5); // pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x5EF9FEC4, 9999, 1); // combat pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x22D8FE39, 9999, 1); // ap pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x99AEEB3B, 9999, 1); // pistol 50.
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x13532244, 9999, 1); // micro smg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x2BE6766B, 9999, 1); // smg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xEFE7E2DF, 9999, 1); // assault smg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xBFEFFF6D, 9999, 1); // assault rifle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x83BF0278, 9999, 1); // carbine rifle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xAF113F99, 9999, 1); // advanced rifle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x9D07F764, 9999, 1); // MG
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7FD62962, 9999, 1); // combat mg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x1D073A89, 9999, 1); // pump shotgun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7846A318, 9999, 1); // sawnoff shotgun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xE284C527, 9999, 1); // assault shotgun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x9D61E50F, 9999, 1); // bullpupshotgun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x05FC3C11, 9999, 1); // sniper
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x0C472FE2, 9999, 1); // heavy sniper
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xA284510B, 9999, 1); // grenade launcher
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xB1CA77B1, 9999, 1); // rpg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x42BF8A85, 9999, 1); // minigun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x93E220BD, 9999, 1); // grenades
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x2C3731D9, 9999, 1); // sticky bomb
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFDBC8A50, 9999, 1); // smoke grenade
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x34A67B97, 9999, 1); // petrol can
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x060EC506, 9999, 1); // fire extinguisher
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x24B17070, 9999, 1); // moltovs
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x497FACC3, 9999, 1); // flare
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xFDBADCED, 9999, 1); // digiscanner
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x687652CE, 9999, 1); // stinger
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 600439132, 9999, 1); // ball
																					 //DLC Weapons
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xF9E6AA4B, 9999, 1); // bottle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x61012683, 9999, 1); // gusenerg
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xC0A3098D, 9999, 1); // special carbine
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xD205520E, 9999, 1); // heavy pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xBFD21232, 9999, 1); // sns pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7F229F94, 9999, 1); // bullpup rifle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x92A27487, 9999, 1); // dagger
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x083839C4, 9999, 1); // vintage pistol
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x7F7497E5, 9999, 1); // firework launcher
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xA89CB99E, 9999, 1); // musket
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x63AB0442, 9999, 1); // homing launcher
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xAB564B93, 9999, 1); // proxmine
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x787F0BB, 9999, 1); // snowball
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0xC734385A, 9999, 1); // marksman rifle
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x47757124, 9999, 1); // flare gun
	WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PLAYER::PLAYER_PED_ID(), 0x0A3D4D34, 9999, 1); // Combat PDW
}

void addIntOption2(char *option, int *var, int min, int max, bool keyboard, bool holdPress, char *info = NULL)
{
	char buf[3000];
	snprintf(buf, sizeof(buf), "%s: [%i]", option, *var);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 1;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 1;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.01f;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.01f;
			}
		}
		if (keyboard)
		{
			squareInstruction = true;
			if (squarePress)
			{
				startKeyboard(0, "", (strlen(ItoS(max)) + 1));
				keyboardVar = var;
			}
		}
	}
}

void PRINT_TEXT(char *text, ...)
{
	UI::_SET_NOTIFICATION_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, "~r~ExploitCE", "~c~By: ExploitCE", 1, "___DEV*", 8);
	UI::_DRAW_NOTIFICATION(5000, 1);
}

void FixVehicle()
{
	int myhandle = PLAYER::GET_PLAYER_PED(PLAYER::PLAYER_ID());
	int myvehicle;
	if (PED::IS_PED_IN_ANY_VEHICLE(myhandle, 0))
	{
		myvehicle = PED::GET_VEHICLE_PED_IS_IN(myhandle, 0);
		if (ENTITY::DOES_ENTITY_EXIST(myvehicle) && ENTITY::IS_ENTITY_A_VEHICLE(myvehicle))
		{
			VEHICLE::SET_VEHICLE_FIXED(myvehicle);
			VEHICLE::SET_VEHICLE_DIRT_LEVEL(myvehicle, 0.0f);
			PRINT_TEXT("~w~ Fixed Vehicle!");
		}
	}
	else
	{
		PRINT_TEXT("~w~ You aren't in a vehicle!");
	}

}





void AddInt(char *Option, int *var, int min, int max, bool keyboard, char *info = " ")
{
	char buf[30];
	snprintf(buf, sizeof(buf), "< %i >", *var);
	addOption(Option, info); AddOptionRight(buf);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = min;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= min)
				*var = max;
			else
				*var = *var - 1;
		}
		if (keyboard)
		{
			squareInstruction = true;
			if (squarePress)
			{
				startKeyboard(0, "", (strlen(ItoS(max)) + 1));
				keyboardVar = var;
			}
		}
	}
}
Hash getHashKey2(char *str)
{
	return GAMEPLAY::GET_HASH_KEY(str);
}


void VehicleCreator2(char* Vehicle)
{
	{
		Hash VehicleCreator2 = getHashKey2(Vehicle);
		if (optionPress && STREAMING::IS_MODEL_VALID(VehicleCreator2) && STREAMING::IS_MODEL_A_VEHICLE(VehicleCreator2))
		{
			VehicleCreatorSpawner2 = true;
			VehicleCreatorSpawnerHash2 = VehicleCreator2;
			VehicleNameSpawned2 = Vehicle;
			STREAMING::REQUEST_MODEL(VehicleCreator2);
		}
	}
}

void funciones()
{
	if (VehicleCreatorSpawner2)
	{
		if (STREAMING::HAS_MODEL_LOADED(VehicleCreatorSpawnerHash2))
		{
			Vector3 coords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::PLAYER_PED_ID(), 0.0, 6.0, 0.0);
			CustomVehicle2 = VEHICLE::CREATE_VEHICLE(VehicleCreatorSpawnerHash2, coords.x, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), true, false);
			VehicleNameArray2[SpawnedVehicle_2] = VehicleNameSpawned2;
			if (ENTITY::DOES_ENTITY_EXIST(SpawnedVehicle2[SpawnedVehicle_2]))
			{
				SpawnedVehicle_2++;
				if (SpawnedVehicle_2 >= 20)
					SpawnedVehicle_2 = 0;
				VEHICLE::SET_VEHICLE_DIRT_LEVEL(SpawnedVehicle2[SpawnedVehicle_2], 0.0f);
				ENTITY::SET_ENTITY_PROOFS(SpawnedVehicle2[SpawnedVehicle_2], true, true, true, true, true, false, false, true);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleCreatorSpawnerHash2);
				STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
				GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_firework_xmas_burst_rgw", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
				VehicleCreatorSpawner2 = false;
			}
		}
	}
}
void addPresetVehicleColour(char *option, int Decimal, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		if (optionPress)
		{
			Vehicle VehicleHandle;
			VehicleHandle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			VEHICLE::SET_VEHICLE_DIRT_LEVEL(VehicleHandle, 0.0f);
			VEHICLE::SET_VEHICLE_COLOURS(VehicleHandle, Decimal, Decimal);
			VEHICLE::SET_VEHICLE_EXTRA_COLOURS(VehicleHandle, Decimal, Decimal);
		}
	}
}

void AddCharOption(char *option, char **NameVar, int*var, int min, int max, char *info = NULL) 
{
	if (!Norting)
	{
		char buf[120];
		snprintf(buf, sizeof(buf), "%s~c~(%i|%i)", NameVar[*var], *var, max);
		addOption(option); AddOptionRight(buf);
		if (currentOption == optionCount)
		{
			lrInstruction = true;
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 1;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 1;
			}
		}
	}
}

void drawText2(char * text, int font, float x, float y, float scalex, float scaley, int r, int g, int b, int a, bool center)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_CENTRE(center);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
	UI::_SET_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::_DRAW_TEXT(x, y);
}

void Money_FastLoop() {

	NETWORKCASH::NETWORK_EARN_FROM_ROCKSTAR2(10000000);
}
bool Write_Global(int a_uiGlobalID, int a_uiValue)
{
	int Ptr = *(int*)((TUNABLES_POINTER - 0x04) + (((a_uiGlobalID / 0x40000) & 0x3F) * 4));
	if (Ptr != 0)
	{
		*(int*)(Ptr + ((a_uiGlobalID % 0x40000) * 4)) = a_uiValue;
		return true;
	}
	return false;
}

void TesteOutfy()
{
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, 40, 1, 0);// hats
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, 10, 0, 0); // glasses
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 2, 0, 0, 0);// EARS
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 0, 1, 0, 0);//face
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 1, 16, 3, 0);//head
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 2, 31, 0, 0);//hair
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, 17, 0, 0);//torso
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, 44, 0, 0);//legs
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, 45, 0, 0);//heands
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, 26, 8, 0);//feet
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, 30, 2, 0);//accesorios 1
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, 20, 4, 0);// accesories 2
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, 11, 5, 0);// accesorios 3
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 10, 2, 0, 0);// textures
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, 68, 0, 0);// torso2
}
void Hackerman()
{
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, 4, 2, 0);// hats
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, 5, 0, 0); // glasses
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 2, 0, 0, 0);// EARS
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 0, 1, 0, 0);//face
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 1, 54, 8, 0);//head
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 2, 0, 0, 0);//hair
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, 17, 0, 0);//torso
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, 8, 1, 0);//legs
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 5, 44, 0, 0);//heands
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, 4, 3, 0);//feet
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 7, 30, 0, 0);//accesorios 1
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, 1, 2, 0);// accesories 2
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 9, 0, 0, 0);// accesorios 3
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 10, 2, 0, 0);// textures
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, 4, 5, 0);// torso2
}
void OutfitGhostRider()
{
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 0, 24, 0, 0);// sombrero
	PED::SET_PED_PROP_INDEX(PLAYER::PLAYER_PED_ID(), 1, 14, 0, 0);//
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 1, 2, 3, 0);//Head
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 3, 17, 0, 0);// torso
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 4, 31, 0, 0);// Legs
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 6, 24, 0, 0);// shoes
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 8, 44, 0, 0);//
	PED::SET_PED_COMPONENT_VARIATION(PLAYER::PLAYER_PED_ID(), 11, 64, 0, 0);//torso 2
}

int _CREATE_VEHICLE(Hash VehicleHash, Vector3 Location, bool Invisible = false)
{
	Vehicle Handle = 0;
	STREAMING::REQUEST_MODEL(VehicleHash);
	if (STREAMING::HAS_MODEL_LOADED(VehicleHash))
	{
		Handle = VEHICLE::CREATE_VEHICLE(VehicleHash, Location.x, Location.y, Location.z, 0, true, false);

		if (Invisible)
			ENTITY::SET_ENTITY_VISIBLE(Handle, false);
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
		{
			Vehicle Prev = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
			Vector3 PrevRotation = ENTITY::GET_ENTITY_ROTATION(Prev, false);
			Vector3 Location = ENTITY::GET_ENTITY_COORDS(Prev, false);
			float Speed = ENTITY::GET_ENTITY_SPEED(Prev);
			VEHICLE::DELETE_VEHICLE(&Prev);
			VEHICLE::SET_VEHICLE_ENGINE_ON(Handle, true, true);
			ENTITY::SET_ENTITY_COORDS(Handle, Location.x, Location.y, Location.z, true, false, false, true);
			ENTITY::SET_ENTITY_ROTATION(Handle, PrevRotation.x, PrevRotation.y, PrevRotation.z, 0, false);
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(Handle, Speed);
			VEHICLE::SET_VEHICLE_DIRT_LEVEL(Handle, 0.0f);
			VEHICLE::SET_VEHICLE_MOD_KIT(Handle, 0);
			VEHICLE::SET_VEHICLE_TYRES_CAN_BURST(Handle, 0);
			VEHICLE::TOGGLE_VEHICLE_MOD(Handle, 18, 1);
			VEHICLE::TOGGLE_VEHICLE_MOD(Handle, 22, 1);
			VEHICLE::SET_VEHICLE_MOD(Handle, 16, 5, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 12, 2, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 11, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 14, 15, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 15, 3, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 16, 4, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 13, 2, 0);
			VEHICLE::SET_VEHICLE_WHEEL_TYPE(Handle, 6);
			VEHICLE::SET_VEHICLE_WINDOW_TINT(Handle, 5);
			VEHICLE::SET_VEHICLE_MOD(Handle, 23, 4, 1);
			VEHICLE::SET_VEHICLE_MOD(Handle, 24, 10, 1);
			VEHICLE::SET_VEHICLE_MOD(Handle, 0, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 1, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 2, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 3, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 4, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 5, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 6, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 7, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 8, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 9, 1, 0);
			VEHICLE::SET_VEHICLE_MOD(Handle, 10, 1, 0);
			ENTITY::SET_ENTITY_PROOFS(Handle, true, true, true, true, true, false, false, true);

		}
		else
		{
			ENTITY::SET_ENTITY_HEADING(Handle, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()));
		}
		PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Handle, -1);
		STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleHash);
		//
		if (SPAWN_WRAP)
		{
			PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Handle, SEAT_DRIVER);
		}
		if (spawnwithmax == true)
		{
			RaimboyAlpha = true;
		}
		else if (spawnwithmax == false)
		{
			//do nothing
		}
		if (SpawnCustomPaint)// custom paint spawn
		{
			int vehicleToSpawnHash = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicleToSpawnHash, PrimR, PrimG, PrimB);
			VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicleToSpawnHash, SecR, SecG, SecB);
			VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicleToSpawnHash, TyreR, TyreG, TyreB);
			STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
			GRAPHICS::_SET_PTFX_ASSET_NEXT_CALL("proj_xmas_firework");
			GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_ENTITY("scr_firework_xmas_burst_rgw", PLAYER::PLAYER_PED_ID(), 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		}//

	}
	return Handle;

}

void MenuFadeSetup()
{
	optionsOpacity = 0;
	MenuFade = true;
}

void HelpTextThisFrame(char* msg)
{
	UI::_0xB245FC10("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(msg);
	UI::_0xB59B530D(0, 0, 1, -1);
}

void GoBackThroughMenu(int submenus)
{
	submenu = lastSubmenu[submenuLevel - submenus];
	currentOption = lastOption[submenuLevel - submenus];
	submenuLevel--;
}

void GET_MODEL_DIMENSIONS(int model, float *Min, float *Max)
{
	int unkData = 0xFFFF;
	int ModelPointer = ((int(*)(int, int*))0x835611B8)(model, &unkData);
	if (!ModelPointer) return;
	else {
		memcpy(Min, (PVOID)(ModelPointer + 0x20), 0xC); // 12 bytes (4 bytes is per float - length, width, height)
		memcpy(Max, (PVOID)(ModelPointer + 0x30), 0xC); // 12 bytes (4 bytes is per float - length, width, height)
	}
}

void ESPVehGreen2(int num)
{
	float Min[3];
	float Max[3];
	GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(num), Min, Max);
	float height = Max[2] * 2;
	Vector3 Loc = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(num, 0.0, 0.0, height);
	GRAPHICS::DRAW_MARKER(0, Loc.x, Loc.y, Loc.z + 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0, 1.0, 1.0, 0, 255, 0, 50, 1, 1, 2, 1, 0, 0, 0);
	Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
	Vector3 Pos2 = ENTITY::GET_ENTITY_COORDS(num, true);
	GRAPHICS::DRAW_LINE(Pos.x, Pos.y, Pos.z, Pos2.x, Pos2.y, Pos2.z, 0, 255, 0, 255);
}

void DRAW_MODEL_DIMENSION_ESP(int entity, int R, int G, int B)
{
	float Min[3];
	float Max[3];
	GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(entity), Min, Max);
	float width = Max[0] * 2;
	float length = Max[1] * 2;
	float height = Max[2] * 2;

	Vector3 Offset_1 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, (width / 2) * -1, (length / 2), height / 2);
	Vector3 Offset_4 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, width / 2, (length / 2), height / 2);
	Vector3 Offset_5 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, (width / 2) * -1, (length / 2), (height / 2) * -1);
	Vector3 Offset_7 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, width / 2, (length / 2), (height / 2) * -1);

	Vector3 Offset_2 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, (width / 2) * -1, (length / 2)* -1, height / 2);
	Vector3 Offset_3 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, width / 2, (length / 2)* -1, height / 2);
	Vector3 Offset_6 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, (width / 2) * -1, (length / 2)* -1, (height / 2) * -1);
	Vector3 Offset_8 = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(entity, width / 2, (length / 2)* -1, (height / 2) * -1);

	GRAPHICS::DRAW_LINE(Offset_1.x, Offset_1.y, Offset_1.z, Offset_4.x, Offset_4.y, Offset_4.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_1.x, Offset_1.y, Offset_1.z, Offset_2.x, Offset_2.y, Offset_2.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_1.x, Offset_1.y, Offset_1.z, Offset_5.x, Offset_5.y, Offset_5.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_2.x, Offset_2.y, Offset_2.z, Offset_3.x, Offset_3.y, Offset_3.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_3.x, Offset_3.y, Offset_3.z, Offset_8.x, Offset_8.y, Offset_8.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_4.x, Offset_4.y, Offset_4.z, Offset_7.x, Offset_7.y, Offset_7.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_4.x, Offset_4.y, Offset_4.z, Offset_3.x, Offset_3.y, Offset_3.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_5.x, Offset_5.y, Offset_5.z, Offset_7.x, Offset_7.y, Offset_7.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_6.x, Offset_6.y, Offset_6.z, Offset_2.x, Offset_2.y, Offset_2.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_6.x, Offset_6.y, Offset_6.z, Offset_8.x, Offset_8.y, Offset_8.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_5.x, Offset_5.y, Offset_5.z, Offset_6.x, Offset_6.y, Offset_6.z, R, G, B, 255);
	GRAPHICS::DRAW_LINE(Offset_7.x, Offset_7.y, Offset_7.z, Offset_8.x, Offset_8.y, Offset_8.z, R, G, B, 255);
}

#pragma region Infinite Loop
using namespace Base_MENU;
void otherLoop()
{
	if (keyboardActive)
	{
		if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 1)
		{
			keyboardActive = false;
			switch (keyboardAction)
			{
			case 0: *keyboardVar = StoI(GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT()); break; //addIntOption
			case 1: GamertagBuff = GAMEPLAY::GET_ONSCREEN_KEYBOARD_RESULT(); ChangeGamertag2(GamertagBuff); break;

			}
		}
		else if (GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 2 || GAMEPLAY::UPDATE_ONSCREEN_KEYBOARD() == 3)
		{
			keyboardActive = false;
		}
	}
	if (SpawnVehicle) { if (_CREATE_VEHICLE(VehicleHash, ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false)) != 0) SpawnVehicle = false; }

	if (explodeProtection)
	{
		int i;
		for (i = 0; i < 18; i++)
			if (PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(i, PLAYER::PLAYER_PED_ID()))
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), false);
				FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, expProtection, 5.0f, true, false, 0);
			}
	}
	if (removeWeapProtection)
	{
		int i;
		for (i = 0; i < 18; i++);
		if (PLAYER::IS_PLAYER_FREE_AIMING_AT_ENTITY(i, PLAYER::PLAYER_PED_ID()))
		{
			WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED(i), true);
		}
	}
	if (GodMode)
		ENTITY::SET_ENTITY_INVINCIBLE(PLAYER::PLAYER_PED_ID(), 1);
	if (!GodMode)
		ENTITY::SET_ENTITY_INVINCIBLE(PLAYER::PLAYER_PED_ID(), 0);
	if (AmmoINF)
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_PED_ID(), 1);
	if (!AmmoINF)
		WEAPON::SET_PED_INFINITE_AMMO_CLIP(PLAYER::PLAYER_PED_ID(), 0);
	if (PYNeverWanted) { PLAYER::SET_PLAYER_WANTED_LEVEL(PLAYER::PLAYER_ID(), 0, false);
		PLAYER::SET_PLAYER_WANTED_LEVEL_NOW(PLAYER::PLAYER_ID(), false); }

	if (godcarloop)
	{
		int car = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::SET_ENTITY_PROOFS(car, true, true, true, true, true, true, true, true);
		ENTITY::SET_ENTITY_INVINCIBLE(car, true);
		VEHICLE::SET_VEHICLE_STRONG(car, true);
		VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(car, false);
	}
	if (!godcarloop)
	{
		int car = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		ENTITY::SET_ENTITY_PROOFS(car, false, false, false, false, false, false, false, false);
		ENTITY::SET_ENTITY_INVINCIBLE(car, false);
		VEHICLE::SET_VEHICLE_STRONG(car, false);
		VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(car, true);
	}
	if (Money_Fast)
		Money_FastLoop();
	if (Menuraimboy)
	{
		if (CarColourStage == 0)
		{
			CarColour.B++;
			if (CarColour.B == 255)
				CarColourStage = 1;
		}
		else if (CarColourStage == 1)
		{
			CarColour.R--;
			if (CarColour.R == 0)
				CarColourStage = 2;
		}
		else if (CarColourStage == 2)
		{
			CarColour.G++;
			if (CarColour.G == 255)
				CarColourStage = 3;
		}
		else if (CarColourStage == 3)
		{
			CarColour.B--;
			if (CarColour.B == 0)
				CarColourStage = 4;
		}
		else if (CarColourStage == 4)
		{
			CarColour.R++;
			if (CarColour.R == 255)
				CarColourStage = 5;
		}
		else if (CarColourStage == 5)
		{
			CarColour.G--;
			if (CarColour.G == 0)
				CarColourStage = 0;
		}
		bannerRectRed = CarColour.R;
		bannerRectGreen = CarColour.G;
		bannerRectBlue = CarColour.B;
	}
	if (pinfo)
	{
		/*DRAW ENTITY OF PLAYER VISUAL*/
		//ARROWS
		int health = PED::GET_PED_MAX_HEALTH(selectedPlayer);
		char modmenu[50];
		int armor = PLAYER::GET_PLAYER_MAX_ARMOUR(selectedPlayer);
		int maker = 22;
		float maker2 = 1.40;
		Vector3 Loc = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0.0, 0.0, 1.5f);
		GRAPHICS::DRAW_MARKER(maker, Loc.x, Loc.y, Loc.z, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.7f, 0.7f, 0.7f, 255, 0, 0, 50, 1, 1, 2, 1, 0, 0, 0);
		int maker1 = 27;
		float maker12 = -2.46;
		GRAPHICS::DRAW_MARKER(maker1, Loc.x, Loc.y, Loc.z + maker12, 0.0f, 0.0f, 0.0f, 180.0f, 0.0f, 0.0f, 0.7f, 0.7f, 0.7f, 255, 0, 0, 50, 0, 1, 2, 1, 0, 0, 0);
		//LINE
		Vector3 Pos777;
		Vector3 Pos2;
		int PedID = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Pos777 = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
		Pos2 = ENTITY::GET_ENTITY_COORDS(PedID, false);
		GRAPHICS::DRAW_LINE(Pos777.x, Pos777.y, Pos777.z, Pos2.x, Pos2.y, Pos2.z, 255, 0, 0, 255);
		/*DRAW PLAYER INFO*/
		int playerHealt = ENTITY::GET_ENTITY_HEALTH(PLAYER::GET_PLAYER_PED(selectedPlayer));
		Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		int playerCar = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		int thisPlayersCar = ENTITY::GET_ENTITY_MODEL(playerCar);
		char buf[1000];
		char buf2[1000];

		snprintf(buf2, sizeof(buf2), "~w~Player Information: ~r~%s", PLAYER::GET_PLAYER_NAME(selectedPlayer));
		drawText2(buf2, 0, 0.2f, 0.775f, Subx2, Suby2, 0, 50, 255, 255, false);

		snprintf(buf, sizeof(buf), "~w~Position: ~r~X = %f, Y = %f, Z = %f", Pos.x, Pos.y, Pos.z);
		drawText2(buf, 0, 0.2f, 0.80f, Subx2, Suby2, 0, 50, 255, 255, false);

		snprintf(buf, sizeof(buf2), "~w~Vehicle Status: ~r~%s", VEHICLE::GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(thisPlayersCar));
		drawText2(buf, 0, 0.2f, 0.825f, Subx2, Suby2, 0, 50, 255, 255, false);
		{
			if (NETWORK::NETWORK_PLAYER_HAS_HEADSET(selectedPlayer))
			{
				char buf[300];
				snprintf(buf, sizeof(buf), "~w~Headset: ~r~Has Headset");
				drawText2(buf, 0, 0.2f, 0.85f, Subx2, Suby2, 0, 50, 255, 255, false);
			}

			else if (!NETWORK::NETWORK_PLAYER_HAS_HEADSET(selectedPlayer))
			{
				char buf[30];
				snprintf(buf, sizeof(buf), "~w~Headset: ~r~Not Headset");
				drawText2(buf, 0, 0.2f, 0.85, Subx2, Suby2, 0, 50, 255, 255, false);
			}

			switch (armor) {
			case 1995:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~MegaMenu"); break;
			case 777:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Legacy"); break;
			case 1337:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Enforcer"); break;
			case 9229:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Mayhem"); break;
			case 5683:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~GuardianCrk"); break;
			case 47:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Infinity"); break;
			case 613:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~PURGE"); break;
			case 290:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Venom"); break;
			case 1257:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~AM Engine"); break;
			case 291:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Venom Menu"); break;
			case 571:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~SilkRoadCrk"); break;
			case 3666:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~SilkRoad Paid"); break;
			case 133769:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Havoc Public"); break;
			case 1357:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Havoc Beta"); break;
			case 3550:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Dream"); break;
			case 2017:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Enforcer"); break;
			case 2018:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Enforcer"); break;
			case 411:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~SilkRoad"); break;
			case 268:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~PotHead"); break;
			case 3412:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Guardian"); break;
			case 1549:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Mega Spoof"); break;
			case 2020:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Enforcer"); break;
			case 14653:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Infinity"); break;
			case 350:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Voltage"); break;
			case 101:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Legacy"); break;
			case 1444:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Cheat Engine"); break;
			case 3701:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~United X"); break;
			case 44:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Infinity"); break;
			case 1808:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Saymtex"); break;
			case 20:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~SkyAcro"); break;
			case 2783:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Dexedrine"); break;
			case 666:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~420"); break;
			case 4085:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Subliminal"); break;

			default:
				snprintf(modmenu, sizeof(modmenu), "~w~Menu: ~r~Unknown ~r~%i", armor); break;
			}
			drawText2(modmenu, 0, 0.2f, 0.875, Subx2, Suby2, 255, 255, 255, 255, false);

		}

		if (!GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("mphud"))
		{
			GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("mphud", 0);
		}
		addSprite("mphud", "mp_anim_cash", 0.2400, 0.7550, 0.0350, 0.0550, 0, 255, 0, 0, 200);
		snprintf(buf2, sizeof(buf2), "~g~$%s", IntToString(getGlobals(0x8, selectedPlayer)));
		drawText2(buf2, 0, 0.258, 0.7430, Subx2, Suby2, 0, 50, 255, 255, false);

		if (!GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED("mprankbadge"))
		{
			GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT("mprankbadge", 0);
		}
		addSprite("mprankbadge", "globe", 0.2100, 0.7550, 0.0400, 0.0600, 0, 255, 0, 0, 200);
		snprintf(buf2, sizeof(buf2), "~w~%s", IntToString(getGlobals(0x14, selectedPlayer)));
		drawText2(buf2, 0, 0.2100, 0.7430, Subx2, Suby2, 255, 255, 255, 255, true);

		snprintf(buf2, sizeof(buf2), "~w~Street Address: ~r~%s", getStreetNameAtCoord(ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0)));
		drawText2(buf2, 0, 0.2f, 0.90f, Subx2, Suby2, 0, 50, 255, 255, false);

		snprintf(buf2, sizeof(buf2), "~w~IP Address: ~r~%s", GetIP(selectedPlayer));
		drawText2(buf2, 0, 0.2f, 0.925, Subx2, Suby2, 0, 50, 255, 255, false);

	}

	

	if (SPECTATE == true)
	{
		AIWanderCar(PLAYER::PLAYER_PED_ID());
		SpectateMode(true, PLAYER::GET_PLAYER_PED(selectedPlayer));
	}
	if (BOX3D) {
		esplooop();
	}

	if (AnimationsPlayerOnline)
	{
		int POnline = PLAYER::GET_PLAYER_PED(SelectedClient);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(POnline, 1);
		STREAMING::REQUEST_ANIM_DICT(AnimDict);
		if (STREAMING::HAS_ANIM_DICT_LOADED(AnimDict))
		{
			int sceneID = CLIENT::CLIENT_CREATE_ANIMATION(coords.x, coords.y, coords.z, 0, 0, 0, 2, 0, 1, 1.0f, 0.0f, 1.0f);
			NETWORK::NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(POnline, sceneID, AnimDict, AnimnName, 8.0f, -8.0f, 120, 0, 100, 0);
			NETWORK::NETWORK_START_SYNCHRONISED_SCENE(sceneID);
			AnimationsPlayerOnline = false;
		}
	}

	if (nosForplayer2)
		nosForplayer(selectedPlayer);
	if (Weapon_Drop)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_STANDARD"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_ARMOUR_STANDARD"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_PARACHUTE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_LOUDHAILER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_LASSO"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_FIREEXTINGUISHER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_NIGHTSTICK"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_CROWBAR"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HAMMER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_BAT"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_KNIFE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SMOKEGRENADE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PETROLCAN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MOLOTOV"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_Shoot"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_STICKYBOMB"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_GRENADE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MINIGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_RPG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_GRENADELAUNCHER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_COMBATMG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSNIPER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SNIPERRIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_ASSAULTSHOTGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PUMPSHOTGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SAWNOFFSHOTGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_ADVANCEDRIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_CARBINERIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_ASSAULTRIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SMG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MICROSMG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_APPISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_COMBATPISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_FIREWORK"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HOMINGLAUNCHER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_PROXMINE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_FLAREGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MARKSMANRIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYSHOTGUN"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_MUSKET"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_VINTAGEPISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_DAGGER"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SPECIALCARBINE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_HEAVYPISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_GUSENBERG"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_SNSPISTOL"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_BOTTLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_BULLPUPRIFLE"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_WEAPON_COMBATPDW"), coords.x, coords.y, coords.z, 0, 9999, 1, 0, 1);
	}
	if (Armour_Drop)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_ARMOUR_STANDARD"), coords.x, coords.y, coords.z, 0, 100000, 1, 0, 1);
	}
	if (Give_Health)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_STANDARD"), coords.x, coords.y, coords.z, 0, 100000, 1, 0, 1);
	}
	if (Cash_Drop40K)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		STREAMING::REQUEST_MODEL(0x113FD533);
		if (STREAMING::HAS_MODEL_LOADED(0x113FD533))
		{
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
		}
	}

	if (badSportPlayer)
	{
		if (timer[0] + badsportVar < GAMEPLAY::GET_GAME_TIMER()) {
			timer[0] = GAMEPLAY::GET_GAME_TIMER();
			STREAMING::REQUEST_MODEL($("adder"));
			if (STREAMING::HAS_MODEL_LOADED($("adder")))
			{//
				Vector3 pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
				Vehicle vehicleBad = VEHICLE::CREATE_VEHICLE($("adder"), pos.x, pos.y, pos.z - 100.0f, 0.0f, true, false);
				if (ENTITY::DOES_ENTITY_EXIST(vehicleBad))
				{
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED($("adder"));
					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(vehicleBad, 1, 1);
					ENTITY::SET_ENTITY_VISIBLE(vehicleBad, false);
					ENTITY::FREEZE_ENTITY_POSITION(vehicleBad, true);
					DECORATOR::DECOR_SET_INT(vehicleBad, "Player_Vehicle", GAMEPLAY::GET_HASH_KEY(PLAYER::GET_PLAYER_NAME(PLAYER::PLAYER_ID())));
					int vehVar = DECORATOR::_0x74EF9C40(vehicleBad, "MPBitset");
					GAMEPLAY::SET_BIT(&vehVar, 3);
					DECORATOR::DECOR_SET_INT(vehicleBad, "MPBitset", vehVar);
					DECORATOR::DECOR_SET_BOOL(vehicleBad, "Player_Vehicle", true);
					FIRE::ADD_OWNED_EXPLOSION(PLAYER::GET_PLAYER_PED(selectedPlayer), pos.x, pos.y, pos.z - 100.0f, GRENADE, 200.0, false, true, 0);
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&vehicleBad);
				}
			}
		}
	}

	if (ProtectionTest4)
	{
		bool CheckAttached;
		float Range = 150.0f;
		if (!CheckAttached)
			Range = 150.0f;

		Vector3 playerPosition = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), false);
		Ped ped = PLAYER::GET_PLAYER_PED(selectedPlayer);
		//GET PLANES
		int veh = VEHICLE::GET_CLOSEST_VEHICLE(playerPosition.x, playerPosition.y, playerPosition.z, Range, 0, custombinary);

		//Planes Protection
		if (ENTITY::DOES_ENTITY_EXIST(veh))
		{
			bool Contin = true;
			if (CheckAttached)
			{
				if (ENTITY::GET_ENTITY_ATTACHED_TO(veh) != PLAYER::GET_PLAYER_PED(selectedPlayer))
					Contin = false;
			}
			if (Contin)
			{
				if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(veh) && NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(veh))
				{
					//ENTITY::SET_ENTITY_COORDS(veh, 6000.0, 6000.0, 6000.0, true, false, false, true);
					ENTITY::SET_ENTITY_AS_MISSION_ENTITY(veh, 0, 1);
					VEHICLE::DELETE_VEHICLE(&veh);
					sendText(PLAYER::GET_PLAYER_PED(selectedPlayer), "~r~!!WARING!! Detachted Planes, ~w~You Are Protected By ExploitCE");
				}
			}
		}
	}
	if (Freeze_Player)
		AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
	if (crashtest2)
	{
		crashtestv3(selectedPlayer);
	}
	if (crashtesting)
	{
		Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), false);

		float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10) * 3.14159265359;
		float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10) * 5.0f;
		float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
		float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);

		FIRE::ADD_EXPLOSION(x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + 1.0f, BLIMP, 0, 1, 0, 3.0f);

		int vehicles = VEHICLE::GET_CLOSEST_VEHICLE(Position.x, Position.y, Position.z, 500.0f, 0, 70);

		if (ENTITY::DOES_ENTITY_EXIST(vehicles))
		{
			if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehicles))
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(vehicles, 1, 5.0f, 5.0f, 5.0f, Position.x, Position.y, Position.z, 1, 1, 1, 1, 0, 1);
				ENTITY::SET_ENTITY_COORDS(vehicles, Position.x, Position.y + 20.0f, Position.z, true, false, false, true);
			}
		}
	}
	if (crashPlayaa)
		CloneCrashLoop(selectedPlayer);
	if (Cashdropadv)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 3.14159265359;
		float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 5.0f;
		float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
		float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);
		STREAMING::REQUEST_MODEL(0x113FD533);
		if (STREAMING::HAS_MODEL_LOADED(0x113FD533))
		{
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + moneyzcoord, 0, amount, 0x113FD533, 0, 1);
		}
	}

	if (ram)
	{
		Hash vehmodel = VEHICLE_ADDER;
		STREAMING::REQUEST_MODEL(vehmodel);
		Ped player = PLAYER::GET_PLAYER_PED(selectedPlayer);
		if (STREAMING::HAS_MODEL_LOADED(vehmodel))
		{
			Vector3 pCoords = ENTITY::GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(player, 0.0, -10.0, 0.0);
			if (STREAMING::IS_MODEL_IN_CDIMAGE(vehmodel) && STREAMING::IS_MODEL_A_VEHICLE(vehmodel))
			{
				Vector3 dim1, dim2;
				GAMEPLAY::GET_MODEL_DIMENSIONS2(vehmodel, &dim1, &dim2);

				float offset = dim2.y * 1.6;

				Vector3 dir = ENTITY::GET_ENTITY_FORWARD_VECTOR(player);
				float rot = (ENTITY::GET_ENTITY_ROTATION(player, 0)).z;

				Vehicle veh = VEHICLE::CREATE_VEHICLE(vehmodel, pCoords.x + (dir.x * offset), pCoords.y + (dir.y * offset), pCoords.z, rot, 1, 1);

				VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
				ENTITY::SET_ENTITY_VISIBLE(veh, true);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(veh, 1);
				maxVehicle(veh);
				VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, "CheatEngine");
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(veh, 700.0);
				if (STREAMING::HAS_MODEL_LOADED(vehmodel) && ENTITY::DOES_ENTITY_EXIST(veh))
				{
					ENTITY::SET_ENTITY_AS_NO_LONGER_NEEDED(&veh);
					ram = false;
				}
			}
		}
		else if (!STREAMING::HAS_MODEL_LOADED(vehmodel))
			STREAMING::REQUEST_MODEL(vehmodel);
	}
	if (crashtest)
	{
		fxtest(selectedPlayer);
	}
	if (Cashdropadv2)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 3.14159265359;
		float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 5.0f;
		float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
		float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY(objectbypassselect));
		if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY(objectbypassselect)))
		{
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, x, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + moneyzcoord, 0, amount, GAMEPLAY::GET_HASH_KEY(objectbypassselect), 0, 1);
		}
	}
	if (Snack_Drop)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		OBJECT::CREATE_AMBIENT_PICKUP(GAMEPLAY::GET_HASH_KEY("PICKUP_HEALTH_SNACK"), coords.x, coords.y, coords.z, 0, 100000, 1, 0, 1);
	}
	if (Cash_DropInsane)
	{
		int Handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
		STREAMING::REQUEST_MODEL(0x113FD533);
		if (STREAMING::HAS_MODEL_LOADED(0x113FD533))
		{
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y + 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x - 0.1, coords.y - 0.1, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
			OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, coords.x + 0.1, coords.y, coords.z + 1, 0, 40000, 0x113FD533, 0, 1);
		}
	}
	if (neverwantedonline)
	{
		int vVar0[2];
		vVar0[0] = 356;
		vVar0[1] = selectedPlayer;
		TriggerScriptEvent(vVar0, 2, selectedPlayer);
	}
	if (raimbowcar)
	{
		{
			if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
			{
				if (CarColourStage == 0)
				{
					CarColour.B++;
					if (CarColour.B == 255)
						CarColourStage = 1;
				}
				else if (CarColourStage == 1)
				{
					CarColour.R--;
					if (CarColour.R == 0)
						CarColourStage = 2;
				}
				else if (CarColourStage == 2)
				{
					CarColour.G++;
					if (CarColour.G == 255)
						CarColourStage = 3;
				}
				else if (CarColourStage == 3)
				{
					CarColour.B--;
					if (CarColour.B == 0)
						CarColourStage = 4;
				}
				else if (CarColourStage == 4)
				{
					CarColour.R++;
					if (CarColour.R == 255)
						CarColourStage = 5;
				}
				else if (CarColourStage == 5)
				{
					CarColour.G--;
					if (CarColour.G == 0)
						CarColourStage = 0;
				}

				if (CarColourStageSecondary == 0)
				{
					CarColourSecondary.B--;
					if (CarColourSecondary.B == 0)
						CarColourStageSecondary = 1;
				}
				else if (CarColourStageSecondary == 1)
				{
					CarColourSecondary.R++;
					if (CarColourSecondary.R == 255)
						CarColourStageSecondary = 2;
				}
				else if (CarColourStageSecondary == 2)
				{
					CarColourSecondary.G--;
					if (CarColourSecondary.G == 0)
						CarColourStageSecondary = 3;
				}
				else if (CarColourStageSecondary == 3)
				{
					CarColourSecondary.B++;
					if (CarColourSecondary.B == 255)
						CarColourStageSecondary = 4;
				}
				else if (CarColourStageSecondary == 4)
				{
					CarColourSecondary.R--;
					if (CarColourSecondary.R == 0)
						CarColourStageSecondary = 5;
				}
				else if (CarColourStageSecondary == 5)
				{
					CarColourSecondary.G++;
					if (CarColourSecondary.G == 255)
						CarColourStageSecondary = 0;
				}
				int VehicleID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				Vector3 Coords = ENTITY::GET_ENTITY_COORDS(VehicleID, true);
				GRAPHICS::DRAW_LIGHT_WITH_RANGE_MadJoker(Coords.x, Coords.y, Coords.z, CarColour.R, CarColour.G, CarColour.B, 4.0f, 2.0f);
				VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), CarColour.R, CarColour.G, CarColour.B);
				VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), CarColourSecondary.R, CarColourSecondary.G, CarColourSecondary.B);
			}
		}
	}
	if (Nitro)
	{
		if (EnableNitro)
		{
			Vector3 MyCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			GRAPHICS::REMOVE_PARTICLE_FX_IN_RANGE(MyCoords.x, MyCoords.y, MyCoords.z, 40);
			GRAPHICS::REMOVE_PARTICLE_FX_FROM_ENTITY(PLAYER::PLAYER_PED_ID());
		}
		int Vehid = (PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(Vehid, false);
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
		{
			if (CONTROLS::IS_CONTROL_PRESSED(2, Button_LS))
			{
				if (EnableNitro)
					FXExhaust(PLAYER::PLAYER_ID());

				if (FXNitro)
					GRAPHICS::START_SCREEN_EFFECT("RaceTurbo", 0, 0);

				AUDIO::SET_VEHICLE_BOOST_ACTIVE(Vehid, TRUE);
				ENTITY::APPLY_FORCE_TO_ENTITY(Vehid, TRUE, NULL, 2.0f, NULL, NULL, NULL, NULL, TRUE, TRUE, TRUE, TRUE, FALSE, TRUE);

			}
			else
			{
				AUDIO::SET_VEHICLE_BOOST_ACTIVE(Vehid, FALSE);
			}
		}
	}
	if (featureSpeedometerSkin)
	{

		int car = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		float speed = ENTITY::GET_ENTITY_SPEED(car);
		speed = speed * 4.30;
		int convertedspeed = (int)speed; // float to int		
										 //DrawSprite(fopen, "last_team_standing_icon", 0.12f, 0.2f, 0.2f, 0.3f, 0.0f, 255, 255, 255, 225);
		if (speed > 293) //max speed
		{
			DrawSprite("mpmissmarkers256", "darts_icon", 0.12f, 0.2f, 0.2f, 0.3f, 294 - 40, 255, 255, 255, 255);
		}
		else
		{
			DrawSprite("mpmissmarkers256", "darts_icon", 0.12f, 0.2f, 0.2f, 0.3f, speed - 40, 255, 255, 255, 255);
		}
	}
	if (flyingcar)
	{
		int Handle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0)) ENTITY::APPLY_FORCE_TO_ENTITY(Handle, true, 0, 1.0f, 0, 0, 0, 0, true, true, true, true, false, true);
		if (CONTROLS::IS_CONTROL_ENABLED(0, Button_LT)) {
			VEHICLE::SET_VEHICLE_FORWARD_SPEED(Handle, 0);
			if (CONTROLS::IS_CONTROL_JUST_PRESSED(0, Button_X)) {
				PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0);
				ENTITY::APPLY_FORCE_TO_ENTITY(Handle, true, 0, 0, 0.01f, 0, 45.0f, 0, true, true, true, true, false, true);
			}
		}
	}
	if (FlypCar)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
		{
			//
			//int VehImIn = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
			//
			if (CONTROLS::IS_CONTROL_PRESSED(0, Button_A) && GAMEPLAY::GET_GAME_TIMER() > FlyTakeOffDelay)
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), true, 0, 0, 4, 0, 15, 0, false, true, true, true, false, true);
				FlyTakeOffDelay = GAMEPLAY::GET_GAME_TIMER() + 2000;
			}

			if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_RT))
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 15);
			else if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_LT))
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), -10);
			else
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 0);
			//
			//int Analog = (int)(CONTROLS::GET_CONTROL_VALUE(0, 9) - 127) * -1;
			//if (Analog != 0)
			//	ENTITY::SET_ENTITY_HEADING(VehImIn, ENTITY::GET_ENTITY_HEADING(VehImIn) + ((float)Analog / 200));
			//
		}
	}
	if (bindJump)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false) && CONTROLS::IS_CONTROL_PRESSED(0, Button_A) && GAMEPLAY::GET_GAME_TIMER() > JumpDelay)
		{
			ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), true, 0, 0, 7, 0, 0, 0, false, true, true, true, false, true);
			JumpDelay = GAMEPLAY::GET_GAME_TIMER() + 2000;
		}
	}
	if (Wallet)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
		{
			if (CONTROLS::IS_CONTROL_PRESSED(0, Button_X) && GAMEPLAY::GET_GAME_TIMER() > DriveOnWallDelay)
			{
				ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), true, 0, 0, 4, 0, 15, 0, false, true, true, true, false, true);
				DriveOnWallDelay = GAMEPLAY::GET_GAME_TIMER() + 2000;
			}

			if (PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false) != PrevDriveOnWallCarID)
			{
				VEHICLE::SET_VEHICLE_FIXED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false));
				ENTITY::SET_ENTITY_INVINCIBLE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), true);
				VEHICLE::SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), true);
				VEHICLE::SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), false);
				VEHICLE::_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 2);//_SET_VEHICLE_ENGINE_TORQUE_MULTIPLIER
																															  //VEHICLE::_0xE943B09C(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 9999);//Carmegeddon? _SET_VEHICLE_ENGINE_POWER_MULTIPLIER
				PrevDriveOnWallCarID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
			}

			ENTITY::APPLY_FORCE_TO_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false), 1, 0, 0, -0.06, 0, 0, 0, 1, true, true, true, true, true);
		}
	}


	if (Onwhater)
	{
		if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), false))
		{
			int VehImIn = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), false);
			ENTITY::SET_ENTITY_INVINCIBLE(VehImIn, true);
			ENTITY::SET_ENTITY_CAN_BE_DAMAGED(VehImIn, false);
			PED::SET_PED_DIES_IN_SINKING_VEHICLE(PLAYER::PLAYER_PED_ID(), false);
			PED::SET_PED_DIES_IN_WATER(PLAYER::PLAYER_PED_ID(), false);

			VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(VehImIn);
			if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_RT))
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(VehImIn, ENTITY::GET_ENTITY_SPEED(VehImIn) + 5.0f);
			if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_LT))
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(VehImIn, ENTITY::GET_ENTITY_SPEED(VehImIn) - 10.0f);
			if (CONTROLS::IS_CONTROL_PRESSED(0, Button_A))
				VEHICLE::SET_VEHICLE_FORWARD_SPEED(VehImIn, 0.0);
			int Analog = (int)(CONTROLS::GET_CONTROL_VALUE(0, 9) - 127) * -1;
			if (Analog != 0)
				ENTITY::SET_ENTITY_HEADING(VehImIn, ENTITY::GET_ENTITY_HEADING(VehImIn) + ((float)Analog / 200));
		}
	}

	if (aimedEntityLoop)
	{
		PLAYER::_GET_AIMED_ENTITY(PLAYER::PLAYER_ID(), &aimedEntity);
		Vector3 ent = ENTITY::GET_ENTITY_COORDS(aimedEntity, 0);
		Vector3 ped = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 0);
		GRAPHICS::DRAW_LINE(ent.x, ent.y, ent.z, ped.x, ped.y, ped.z, 255 - bannerRectRed, 255 - bannerRectGreen, 255 - bannerRectBlue, 255);
	}

	if (vehicleSpawnNeeded)
	{
		if (STREAMING::HAS_MODEL_LOADED(vehicleToSpawnHash))
		{
			Ped ped = PLAYER::PLAYER_PED_ID();
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(ped, false);
			Vehicle vehicle = VEHICLE::CREATE_VEHICLE(vehicleToSpawnHash, coords.x, coords.y, coords.z, 0.0f, true, false);
			if (ENTITY::DOES_ENTITY_EXIST(vehicle))
			{
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehicle);
				DWORD id = NETWORK::NET_TO_VEH(vehicle);
				id;
				NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(id, TRUE);
				if (!ENTITY::IS_ENTITY_IN_AIR(PLAYER::PLAYER_PED_ID()))
					VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(vehicle);
				ENTITY::SET_ENTITY_VISIBLE(vehicle, TRUE);
				VEHICLE::SET_HELI_BLADES_FULL_SPEED(vehicle);
				VEHICLE::SET_VEHICLE_ENGINE_ON(vehicle, TRUE, TRUE);
				VEHICLE::TOGGLE_VEHICLE_MOD(vehicle, 20, TRUE);
				VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(vehicle, 255, 0, 0);
				ENTITY::SET_ENTITY_AS_MISSION_ENTITY(vehicle, TRUE, TRUE);
				NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(id, TRUE);
				VEHICLE::SET_VEHICLE_IS_STOLEN(vehicle, FALSE);
				PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), vehicle, -1);
				ENTITY::SET_ENTITY_INVINCIBLE(vehicle, TRUE);
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(vehicle);
				NETWORK::NETWORK_FADE_IN_ENTITY(vehicle, 0);
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleToSpawnHash);
				if (SpawnVehCustomRGB)
				{
					int vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);

					VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, ColR, ColG, ColB);
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, ColSR, ColSG, ColSB);
				}
				if (SpawnWithUpgrades)
				{
					MaxUpgades();
				}
				if (SpawnWithPTFX)
				{
					DoFX("proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw");
				}
				vehicleSpawnNeeded = false;
			}
		}
	}
	if (SpawnVehCustomRGB)
	{
		int vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);

		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, ColR, ColG, ColB);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, ColSR, ColSG, ColSB);
	}
	if (SpawnWithUpgrades)
	{
		MaxUpgades();
	}

	if (RaimboyAlpha)
	{
		if (RamboyTime < GAMEPLAY::GET_GAME_TIMER())
		{
			if (CarColourStage == 0)
			{
				CarColour.R++;
				if (CarColour.R == 255)
					CarColourStage = 1;
			}
			else if (CarColourStage == 1)
			{
				CarColour.R--;
				if (CarColour.R == 0)
					CarColourStage = 2;
			}
			else if (CarColourStage == 2)
			{
				CarColour.R--;
				if (CarColour.R == 255)
					CarColourStage = 0;
			}
			Entity vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PLAYER::PLAYER_PED_ID());
			if (NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PLAYER::PLAYER_PED_ID()) && NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0))) {
				NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0));
				ENTITY::SET_ENTITY_ALPHA(vehicle, vehicleapla, false);
				ENTITY::SET_ENTITY_ALPHA(PLAYER::PLAYER_PED_ID(), playerapla, false);
				playerapla = CarColour.R;
				vehicleapla = CarColour.R;
				RamboyTime = GAMEPLAY::GET_GAME_TIMER() + 00005;
			}
		}
	}

	if (constantDay)
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(12, 0, 0);
	}

	if (constantNight)
	{
		NETWORK::NETWORK_OVERRIDE_CLOCK_TIME(0, 0, 0);
	}

	if (SpawnWithPTFX)
	{
		DoFX("proj_xmas_firework", "scr_firework_xmas_spiral_burst_rgw");
	}

	if (toggleneons2)
	{
		Neonsnew();
	}

	if (SPAWN_WRAP)
	{
		PED::SET_PED_INTO_VEHICLE(PLAYER::PLAYER_PED_ID(), Handle, SEAT_DRIVER);
	}

	else if (spawnwithmax == false)
	{
		//do nothing
	}
	if (toggleNeons)
	{
		LoopingNeons();
	}
	if (CreatormodehT)
	{
		CreatorMode();
	}
	if (hashT)
	{
		hashToggle();
	}
	if (CoordPlayer)
	{
		playerCoordsToggle();
	}
	if (CoordObject)
	{
		coordsToggle();
	}
	if (quadLines)
	{
		drawLinesToQuads();
	}
	if (quadBoxes)
	{
		drawQuadLines();
	}
	if (cityBlackout) {
		GRAPHICS::_SET_BLACKOUT(true);
	}

		if (doBumpercar) { if (spawnBumpercar()) { doBumpercar = false; } }
	if (doBike) { if (spawnBike()) { doBike = false; } }
	if (doModdedT20) { if (spawnModdedT20()) { doModdedT20 = false; } }
	if (doTeddycar) { if (spawnTeddycar()) { doTeddycar = false; } }
	if (doBoatNTrailer) { if (spawnBoatNTrailer()) { doBoatNTrailer = false; } }
	if (doFlatBed) { if (spawnFlatBed()) { doFlatBed = false; } }
	if (doTruck) { if (spawnTruck()) { doTruck = false; } }
	if (doJetSki) { if (spawnJetSki()) { doJetSki = false; } }
	if (doRampTruck) { if (RampTruck()) { doRampTruck = false; } }
	if (doBusTruck) { if (BusTruck()) { doBusTruck = false; } }
	if (doBufCustom) { if (BufCustom()) { doBufCustom = false; } }
	if (doInsurg) { if (Insurg()) { doInsurg = false; } }

	if (doSuper1) { if (Super1()) { doSuper1 = false; } }
	if (doSuper2) { if (Super2()) { doSuper2 = false; } }
	if (doMuscle1) { if (Muscle1()) { doMuscle1 = false; } }
	if (doMuscle2) { if (Muscle2()) { doMuscle2 = false; } }
	if (doSpecial1) { if (Special1()) { doSpecial1 = false; } }
	if (doSpecial2) { if (Special2()) { doSpecial2 = false; } }
	if (doSpecial3) { if (Special3()) { doSpecial3 = false; } }
	if (doSpecial4) { if (Special4()) { doSpecial4 = false; } }
	if (doSpecial5) { if (Special5()) { doSpecial5 = false; } }
	if (doSpecial7) { if (Special7()) { doSpecial7 = false; } }
	if (doSpecial8) { if (Special8()) { doSpecial8 = false; } }
	if (doSpecial9) { if (Special9()) { doSpecial9 = false; } }
	if (Gokartactive) { if (Gocart()) { Gokartactive = false; } }
	if (wheddenboata) { if (wheddenboat()) { wheddenboata = false; } }
	if (ufoa) { if (ufo()) { ufoa = false; } }
	if (dragonflya) { if (dragonfly()) { dragonflya = false; } }
	if (whelerebela) { if (whelerebel()) { whelerebela = false; } }
	if (gokart2a) { if (gokart2()) { gokart2a = false; } }
	if (batebikea) { if (batebike()) { batebikea = false; } }
	if (lasrgesuba) { if (lasrgesub()) { lasrgesuba = false; } }
	if (rampea) { if (rampe()) { rampea = false; } }
	if (train2a) { if (train2()) { train2a = false; } }
	if (Destructiondervia) { if (Destructiondervi()) { Destructiondervia = false; } }
	if (dozera) { if (dozer()) { dozera = false; } }
	if (trasformera) { if (trasformer()) { trasformera = false; } }
	if (Mostertanka) { if (Mostertank()) { Mostertanka = false; } }
	if (UfoBlacka) { if (UfoBlack()) { UfoBlacka = false; } }
	if (mosterFynnya) { if (mosterFynny()) { mosterFynnya = false; } }
	if (MonkeyTrunka) { if (MonkeyTrunk()) { MonkeyTrunka = false; } }
	if (TeleportNow)
	{
		int Entity = PLAYER::PLAYER_PED_ID();
		if (Teleport_FX)
		{
			TeleportDelay -= 10;
			if (TeleportDelay < 0)
				TeleportDelay = 0;

			if (PED::GET_VEHICLE_PED_IS_IN(Entity, false) != 0)
				ENTITY::SET_ENTITY_ALPHA(PED::GET_VEHICLE_PED_IS_IN(Entity, false), TeleportDelay, false);
			ENTITY::SET_ENTITY_ALPHA(Entity, TeleportDelay, false);
			if (TeleportDelay <= 0)
			{
				if (PED::GET_VEHICLE_PED_IS_IN(Entity, false) != 0)
				{
					ENTITY::SET_ENTITY_ALPHA(PED::GET_VEHICLE_PED_IS_IN(Entity, false), 255, false);
					ENTITY::SET_ENTITY_COORDS(PED::GET_VEHICLE_PED_IS_IN(Entity, false), TeleportLocation.x, TeleportLocation.y, TeleportLocation.z, false, true, true, false);
				}
				else
					ENTITY::SET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), TeleportLocation.x, TeleportLocation.y, TeleportLocation.z, true, false, false, true);
				//PLAYER::START_PLAYER_TELEPORT(PLAYER::PLAYER_ID(), TeleportLocation.x, TeleportLocation.y, TeleportLocation.z, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), false, false, 0);

				ENTITY::SET_ENTITY_ALPHA(Entity, 255, false);
				TeleportNow = false;
				Teleport_FX = false;
				TeleportDelay = 255;
			}
		}
		else
			Teleport_FX = ParticleFX("scr_rcbarry1", "scr_alien_teleport");
	}
	if (DrawPalette3)
	{
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xC3);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCA);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCB);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCD);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCD);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xC3);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCA);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCB);
		uint rows = 0, end_col = 161, last_down = 161;
		DrawPalette();

		PaletteInstruction();

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xC3)) {
			DrawPalette3 = false;
			selectedMenuItem = 0;
		}

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCC) && selectedMenuItem != 1) {
			selectedMenuItem = selectedMenuItem - 1;
			AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCD) && selectedMenuItem != end_col) {
			selectedMenuItem = selectedMenuItem + 1;
			AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
		}

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCA)) { //UP
			if (selectedMenuItem <= 17) {
				selectedMenuItem = end_col;
			}
			else if (selectedMenuItem > 17) {
				selectedMenuItem = selectedMenuItem - 17;
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
			}
		}

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCB)) { //DOWN
			if (selectedMenuItem < last_down) {
				selectedMenuItem = selectedMenuItem + 17;
			}
			else if (selectedMenuItem >= last_down) {
				selectedMenuItem = 1;
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
			}
		}

		uint car_colours_r[162], car_colours_g[162], car_colours_b[162];

		car_colours_r[1] = 10;
		car_colours_g[1] = 10;
		car_colours_b[1] = 10;

		car_colours_r[2] = 37;
		car_colours_g[2] = 37;
		car_colours_b[2] = 39;

		car_colours_r[3] = 101;
		car_colours_g[3] = 106;
		car_colours_b[3] = 121;

		car_colours_r[4] = 88;
		car_colours_g[4] = 89;
		car_colours_b[4] = 90;

		car_colours_r[5] = 156;
		car_colours_g[5] = 161;
		car_colours_b[5] = 163;

		car_colours_r[6] = 150;
		car_colours_g[6] = 145;
		car_colours_b[6] = 140;

		car_colours_r[7] = 81;
		car_colours_g[7] = 84;
		car_colours_b[7] = 89;

		car_colours_r[8] = 63;
		car_colours_g[8] = 62;
		car_colours_b[8] = 69;

		car_colours_r[9] = 165;
		car_colours_g[9] = 169;
		car_colours_b[9] = 167;

		car_colours_r[10] = 151;
		car_colours_g[10] = 149;
		car_colours_b[10] = 146;

		car_colours_r[11] = 118;
		car_colours_g[11] = 123;
		car_colours_b[11] = 124;

		car_colours_r[12] = 90;
		car_colours_g[12] = 87;
		car_colours_b[12] = 82;

		car_colours_r[13] = 33;
		car_colours_g[13] = 34;
		car_colours_b[13] = 34;

		car_colours_r[14] = 57;
		car_colours_g[14] = 58;
		car_colours_b[14] = 58;

		car_colours_r[15] = 148;
		car_colours_g[15] = 157;
		car_colours_b[15] = 159;

		car_colours_r[16] = 0;
		car_colours_g[16] = 0;
		car_colours_b[16] = 0;

		car_colours_r[17] = 88;
		car_colours_g[17] = 88;
		car_colours_b[17] = 83;

		car_colours_r[18] = 164;
		car_colours_g[18] = 160;
		car_colours_b[18] = 150;

		car_colours_r[19] = 175;
		car_colours_g[19] = 177;
		car_colours_b[19] = 177;

		car_colours_r[20] = 109;
		car_colours_g[20] = 108;
		car_colours_b[20] = 110;

		car_colours_r[21] = 100;
		car_colours_g[21] = 104;
		car_colours_b[21] = 106;

		car_colours_r[22] = 82;
		car_colours_g[22] = 86;
		car_colours_b[22] = 97;

		car_colours_r[23] = 140;
		car_colours_g[23] = 146;
		car_colours_b[23] = 154;

		car_colours_r[24] = 169;
		car_colours_g[24] = 169;
		car_colours_b[24] = 169;

		car_colours_r[25] = 189;
		car_colours_g[25] = 190;
		car_colours_b[25] = 198;

		car_colours_r[26] = 182;
		car_colours_g[26] = 182;
		car_colours_b[26] = 182;

		car_colours_r[27] = 100;
		car_colours_g[27] = 100;
		car_colours_b[27] = 100;

		car_colours_r[28] = 226;
		car_colours_g[28] = 6;
		car_colours_b[28] = 6;

		car_colours_r[29] = 150;
		car_colours_g[29] = 8;
		car_colours_b[29] = 0;

		car_colours_r[30] = 107;
		car_colours_g[30] = 0;
		car_colours_b[30] = 0;

		car_colours_r[31] = 97;
		car_colours_g[31] = 16;
		car_colours_b[31] = 9;

		car_colours_r[32] = 74;
		car_colours_g[32] = 10;
		car_colours_b[32] = 10;

		car_colours_r[33] = 115;
		car_colours_g[33] = 11;
		car_colours_b[33] = 11;

		car_colours_r[34] = 87;
		car_colours_g[34] = 7;
		car_colours_b[34] = 7;

		car_colours_r[35] = 38;
		car_colours_g[35] = 3;
		car_colours_b[35] = 6;

		car_colours_r[36] = 158;
		car_colours_g[36] = 0;
		car_colours_b[36] = 0;

		car_colours_r[37] = 255;
		car_colours_g[37] = 128;
		car_colours_b[37] = 0;

		car_colours_r[38] = 199;
		car_colours_g[38] = 126;
		car_colours_b[38] = 0;

		car_colours_r[39] = 250;
		car_colours_g[39] = 127;
		car_colours_b[39] = 3;

		car_colours_r[40] = 255;
		car_colours_g[40] = 0;
		car_colours_b[40] = 0;

		car_colours_r[41] = 102;
		car_colours_g[41] = 0;
		car_colours_b[41] = 0;

		car_colours_r[42] = 255;
		car_colours_g[42] = 161;
		car_colours_b[42] = 65;

		car_colours_r[43] = 230;
		car_colours_g[43] = 230;
		car_colours_b[43] = 0;

		car_colours_r[44] = 149;
		car_colours_g[44] = 40;
		car_colours_b[44] = 23;

		car_colours_r[45] = 210;
		car_colours_g[45] = 44;
		car_colours_b[45] = 19;

		car_colours_r[46] = 140;
		car_colours_g[46] = 38;
		car_colours_b[46] = 21;

		car_colours_r[47] = 193;
		car_colours_g[47] = 86;
		car_colours_b[47] = 70;

		car_colours_r[48] = 233;
		car_colours_g[48] = 197;
		car_colours_b[48] = 126;

		car_colours_r[49] = 102;
		car_colours_g[49] = 0;
		car_colours_b[49] = 0;

		car_colours_r[50] = 0;
		car_colours_g[50] = 51;
		car_colours_b[50] = 0;

		car_colours_r[51] = 0;
		car_colours_g[51] = 51;
		car_colours_b[51] = 21;

		car_colours_r[52] = 30;
		car_colours_g[52] = 121;
		car_colours_b[52] = 3;

		car_colours_r[53] = 124;
		car_colours_g[53] = 186;
		car_colours_b[53] = 106;

		car_colours_r[54] = 0;
		car_colours_g[54] = 255;
		car_colours_b[54] = 0;

		car_colours_r[55] = 87;
		car_colours_g[55] = 213;
		car_colours_b[55] = 205;

		car_colours_r[56] = 0;
		car_colours_g[56] = 255;
		car_colours_b[56] = 0;

		car_colours_r[57] = 25;
		car_colours_g[57] = 56;
		car_colours_b[57] = 38;

		car_colours_r[58] = 61;
		car_colours_g[58] = 179;
		car_colours_b[58] = 96;

		car_colours_r[59] = 51;
		car_colours_g[59] = 95;
		car_colours_b[59] = 63;

		car_colours_r[60] = 71;
		car_colours_g[60] = 120;
		car_colours_b[60] = 60;

		car_colours_r[61] = 147;
		car_colours_g[61] = 163;
		car_colours_b[61] = 150;

		car_colours_r[62] = 0;
		car_colours_g[62] = 51;
		car_colours_b[62] = 51;

		car_colours_r[63] = 4;
		car_colours_g[63] = 92;
		car_colours_b[63] = 179;

		car_colours_r[64] = 142;
		car_colours_g[64] = 188;
		car_colours_b[64] = 235;

		car_colours_r[65] = 0;
		car_colours_g[65] = 0;
		car_colours_b[65] = 255;

		car_colours_r[66] = 93;
		car_colours_g[66] = 126;
		car_colours_b[66] = 141;

		car_colours_r[67] = 138;
		car_colours_g[67] = 138;
		car_colours_b[67] = 138;

		car_colours_r[68] = 255;
		car_colours_g[68] = 255;
		car_colours_b[68] = 255;

		car_colours_r[69] = 149;
		car_colours_g[69] = 185;
		car_colours_b[69] = 220;

		car_colours_r[70] = 94;
		car_colours_g[70] = 140;
		car_colours_b[70] = 186;

		car_colours_r[71] = 0;
		car_colours_g[71] = 230;
		car_colours_b[71] = 255;

		car_colours_r[72] = 102;
		car_colours_g[72] = 0;
		car_colours_b[72] = 204;

		car_colours_r[73] = 76;
		car_colours_g[73] = 0;
		car_colours_b[73] = 153;

		car_colours_r[74] = 0;
		car_colours_g[74] = 128;
		car_colours_b[74] = 255;

		car_colours_r[75] = 124;
		car_colours_g[75] = 212;
		car_colours_b[75] = 222;

		car_colours_r[76] = 14;
		car_colours_g[76] = 49;
		car_colours_b[76] = 109;

		car_colours_r[77] = 140;
		car_colours_g[77] = 181;
		car_colours_b[77] = 252;

		car_colours_r[78] = 195;
		car_colours_g[78] = 206;
		car_colours_b[78] = 225;

		car_colours_r[79] = 189;
		car_colours_g[79] = 213;
		car_colours_b[79] = 238;

		car_colours_r[80] = 125;
		car_colours_g[80] = 168;
		car_colours_b[80] = 242;

		car_colours_r[81] = 205;
		car_colours_g[81] = 174;
		car_colours_b[81] = 223;

		car_colours_r[82] = 166;
		car_colours_g[82] = 91;
		car_colours_b[82] = 209;

		car_colours_r[83] = 72;
		car_colours_g[83] = 47;
		car_colours_b[83] = 235;

		car_colours_r[84] = 92;
		car_colours_g[84] = 73;
		car_colours_b[84] = 219;

		car_colours_r[85] = 56;
		car_colours_g[85] = 86;
		car_colours_b[85] = 148;

		car_colours_r[86] = 84;
		car_colours_g[86] = 121;
		car_colours_b[86] = 223;

		car_colours_r[87] = 89;
		car_colours_g[87] = 110;
		car_colours_b[87] = 135;

		car_colours_r[88] = 106;
		car_colours_g[88] = 173;
		car_colours_b[88] = 239;

		car_colours_r[89] = 255;
		car_colours_g[89] = 230;
		car_colours_b[89] = 0;

		car_colours_r[90] = 255;
		car_colours_g[90] = 255;
		car_colours_b[90] = 0;

		car_colours_r[91] = 175;
		car_colours_g[91] = 145;
		car_colours_b[91] = 49;

		car_colours_r[92] = 255;
		car_colours_g[92] = 241;
		car_colours_b[92] = 105;

		car_colours_r[93] = 0;
		car_colours_g[93] = 255;
		car_colours_b[93] = 0;

		car_colours_r[94] = 174;
		car_colours_g[94] = 155;
		car_colours_b[94] = 127;

		car_colours_r[95] = 150;
		car_colours_g[95] = 129;
		car_colours_b[95] = 108;

		car_colours_r[96] = 122;
		car_colours_g[96] = 117;
		car_colours_b[96] = 96;

		car_colours_r[97] = 51;
		car_colours_g[97] = 0;
		car_colours_b[97] = 0;

		car_colours_r[98] = 153;
		car_colours_g[98] = 76;
		car_colours_b[98] = 0;

		car_colours_r[99] = 156;
		car_colours_g[99] = 141;
		car_colours_b[99] = 113;

		car_colours_r[100] = 243;
		car_colours_g[100] = 218;
		car_colours_b[100] = 185;

		car_colours_r[101] = 174;
		car_colours_g[101] = 160;
		car_colours_b[101] = 95;

		car_colours_r[102] = 153;
		car_colours_g[102] = 102;
		car_colours_b[102] = 51;

		car_colours_r[103] = 242;
		car_colours_g[103] = 199;
		car_colours_b[103] = 157;

		car_colours_r[104] = 156;
		car_colours_g[104] = 118;
		car_colours_b[104] = 79;

		car_colours_r[105] = 218;
		car_colours_g[105] = 131;
		car_colours_b[105] = 45;

		car_colours_r[106] = 249;
		car_colours_g[106] = 222;
		car_colours_b[106] = 195;

		car_colours_r[107] = 255;
		car_colours_g[107] = 248;
		car_colours_b[107] = 240;

		car_colours_r[108] = 253;
		car_colours_g[108] = 251;
		car_colours_b[108] = 249;

		car_colours_r[109] = 171;
		car_colours_g[109] = 85;
		car_colours_b[109] = 0;

		car_colours_r[110] = 171;
		car_colours_g[110] = 132;
		car_colours_b[110] = 94;

		car_colours_r[111] = 206;
		car_colours_g[111] = 181;
		car_colours_b[111] = 156;

		car_colours_r[112] = 255;
		car_colours_g[112] = 255;
		car_colours_b[112] = 255;

		car_colours_r[113] = 201;
		car_colours_g[113] = 201;
		car_colours_b[113] = 201;

		car_colours_r[114] = 213;
		car_colours_g[114] = 200;
		car_colours_b[114] = 187;

		car_colours_r[115] = 146;
		car_colours_g[115] = 110;
		car_colours_b[115] = 73;

		car_colours_r[116] = 105;
		car_colours_g[116] = 93;
		car_colours_b[116] = 81;

		car_colours_r[117] = 185;
		car_colours_g[117] = 144;
		car_colours_b[117] = 103;

		car_colours_r[118] = 183;
		car_colours_g[118] = 183;
		car_colours_b[118] = 183;

		car_colours_r[119] = 151;
		car_colours_g[119] = 151;
		car_colours_b[119] = 151;

		car_colours_r[120] = 225;
		car_colours_g[120] = 225;
		car_colours_b[120] = 225;

		car_colours_r[121] = 210;
		car_colours_g[121] = 210;
		car_colours_b[121] = 210;

		car_colours_r[122] = 246;
		car_colours_g[122] = 246;
		car_colours_b[122] = 246;

		car_colours_r[123] = 246;
		car_colours_g[123] = 247;
		car_colours_b[123] = 246;

		car_colours_r[124] = 252;
		car_colours_g[124] = 166;
		car_colours_b[124] = 80;

		car_colours_r[125] = 255;
		car_colours_g[125] = 191;
		car_colours_b[125] = 127;

		car_colours_r[126] = 200;
		car_colours_g[126] = 236;
		car_colours_b[126] = 138;

		car_colours_r[127] = 255;
		car_colours_g[127] = 230;
		car_colours_b[127] = 0;

		car_colours_r[128] = 0;
		car_colours_g[128] = 195;
		car_colours_b[128] = 243;

		car_colours_r[129] = 53;
		car_colours_g[129] = 80;
		car_colours_b[129] = 35;

		car_colours_r[130] = 128;
		car_colours_g[130] = 115;
		car_colours_b[130] = 80;

		car_colours_r[131] = 228;
		car_colours_g[131] = 173;
		car_colours_b[131] = 23;

		car_colours_r[132] = 228;
		car_colours_g[132] = 225;
		car_colours_b[132] = 216;

		car_colours_r[133] = 228;
		car_colours_g[133] = 225;
		car_colours_b[133] = 216;

		car_colours_r[134] = 104;
		car_colours_g[134] = 131;
		car_colours_b[134] = 86;

		car_colours_r[135] = 255;
		car_colours_g[135] = 255;
		car_colours_b[135] = 255;

		car_colours_r[136] = 255;
		car_colours_g[136] = 0;
		car_colours_b[136] = 255;

		car_colours_r[137] = 255;
		car_colours_g[137] = 214;
		car_colours_b[137] = 255;


		// ------------------------------

		car_colours_r[138] = 250;
		car_colours_g[138] = 147;
		car_colours_b[138] = 250;

		car_colours_r[139] = 247;
		car_colours_g[139] = 186;
		car_colours_b[139] = 15;

		car_colours_r[140] = 137;
		car_colours_g[140] = 253;
		car_colours_b[140] = 70;

		car_colours_r[141] = 70;
		car_colours_g[141] = 253;
		car_colours_b[141] = 247;

		car_colours_r[142] = 10;
		car_colours_g[142] = 11;
		car_colours_b[142] = 34;

		car_colours_r[143] = 2;
		car_colours_g[143] = 4;
		car_colours_b[143] = 50;

		car_colours_r[144] = 0;
		car_colours_g[144] = 2;
		car_colours_b[144] = 70;

		car_colours_r[145] = 154;
		car_colours_g[145] = 154;
		car_colours_b[145] = 158;

		car_colours_r[146] = 247;
		car_colours_g[146] = 0;
		car_colours_b[146] = 255;

		car_colours_r[147] = 50;
		car_colours_g[147] = 0;
		car_colours_b[147] = 186;

		car_colours_r[148] = 0;
		car_colours_g[148] = 0;
		car_colours_b[148] = 0;

		car_colours_r[149] = 124;
		car_colours_g[149] = 0;
		car_colours_b[149] = 186;

		car_colours_r[150] = 10;
		car_colours_g[150] = 10;
		car_colours_b[150] = 10;

		car_colours_r[151] = 226;
		car_colours_g[151] = 9;
		car_colours_b[151] = 9;

		car_colours_r[152] = 61;
		car_colours_g[152] = 97;
		car_colours_b[152] = 0;

		car_colours_r[153] = 102;
		car_colours_g[153] = 127;
		car_colours_b[153] = 60;

		car_colours_r[154] = 135;
		car_colours_g[154] = 107;
		car_colours_b[154] = 50;

		car_colours_r[155] = 199;
		car_colours_g[155] = 171;
		car_colours_b[155] = 115;

		car_colours_r[156] = 168;
		car_colours_g[156] = 179;
		car_colours_b[156] = 94;

		car_colours_r[157] = 193;
		car_colours_g[157] = 193;
		car_colours_b[157] = 193;

		car_colours_r[158] = 170;
		car_colours_g[158] = 243;
		car_colours_b[158] = 243;

		car_colours_r[159] = 191;
		car_colours_g[159] = 152;
		car_colours_b[159] = 94;

		car_colours_r[160] = 196;
		car_colours_g[160] = 165;
		car_colours_b[160] = 118;

		car_colours_r[161] = 246;
		car_colours_g[161] = 255;
		car_colours_b[161] = 112;

		float Ipos_x = 0.0895 + 0.15, Ipos_y = 0.0930 + 0.15;
		uint r, g, b;

		int I;
		for (I = 1; I <= end_col; I++)
		{
			r = car_colours_r[I], g = car_colours_g[I], b = car_colours_b[I];

			if (I != 1)
			{
				Ipos_x = Ipos_x + 0.0320;
				if (rows == 17)
				{
					Ipos_x = 0.0895 + 0.15;
					Ipos_y = Ipos_y + 0.0320;
					rows = 0;
				}
			}

			//draw_rect(Ipos_x, Ipos_y, 0.0282, 0.0282, r, g, b, 255);

			//draw_rect(0.3200, 0.1870, 0.5520f, 0.2990f, 0, 0, 0, 90); ///Black

			//rows++;

			if (selectedMenuItem == I)//{

				GRAPHICS::DRAW_RECT(Ipos_x, Ipos_y, 0.0342, 0.0342, 255, 255, 255, 255);

			GRAPHICS::DRAW_RECT(Ipos_x, Ipos_y, 0.0282, 0.0282, r, g, b, 255);

			rows++;

			//}
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Button_A))
		{
			if (TableID == 1)
			{
				int vehicle;
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
				{
					int item_selected;
					item_selected = selectedMenuItem;
					vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
					if (ENTITY::DOES_ENTITY_EXIST(vehicle) && ENTITY::IS_ENTITY_A_VEHICLE(vehicle))
					{
						VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle, 0.0f);
						VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, car_colours_r[item_selected], car_colours_g[item_selected], car_colours_b[item_selected]);
						VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, car_colours_r[item_selected], car_colours_g[item_selected], car_colours_b[item_selected]);
					}
				}
			}
			if (TableID == 2)
			{
				int item_selected;
				item_selected = selectedMenuItem;
				NeonR = car_colours_r[item_selected], NeonG = car_colours_g[item_selected], NeonB = car_colours_b[item_selected];
			}
			if (TableID == 3)
			{
				int item_selected;
				item_selected = selectedMenuItem;
				bannerRectRed2 = car_colours_r[item_selected], bannerRectGreen2 = car_colours_g[item_selected], bannerRectBlue2 = car_colours_b[item_selected];
			}
			if (TableID == 4)
			{
				int item_selected;
				item_selected = selectedMenuItem;
				bannerRectRed2 = car_colours_r[item_selected], bannerRectGreen2 = car_colours_g[item_selected], bannerRectBlue2 = car_colours_b[item_selected];
			}
		}
	}
	if (DrawPalette2)
	{
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xC3);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCA);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCB);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCD);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCD);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xC3);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCA);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCB);
		GRAPHICS::DRAW_RECT(0.500, 0.500, 0.200, 0.500, 10, 10, 10, 255); ///Black
		PaletteInstruction2();

		uint rows = 0, end_col = 10, last_down = 10;

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCC) && selectedMenuItem != 1) {
			selectedMenuItem = selectedMenuItem - 1;
			AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCD) && selectedMenuItem != end_col) {
			selectedMenuItem = selectedMenuItem + 1;
			AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
		}

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCA)) { //UP
			if (selectedMenuItem <= 3) {
				selectedMenuItem = end_col;
			}
			else if (selectedMenuItem > 3) {
				selectedMenuItem = selectedMenuItem - 3;
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
			}
		}

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, 0xCB)) { //DOWN
			if (selectedMenuItem < last_down) {
				selectedMenuItem = selectedMenuItem + 3;
			}
			else if (selectedMenuItem >= last_down) {
				selectedMenuItem = 1;
				AUDIO::PLAY_SOUND_FRONTEND(-1, "NAV_UP_DOWN", "HUD_FRONTEND_DEFAULT_SOUNDSET");
			}
		}

		uint NumberIndex[10];

		NumberIndex[1] = 1;
		NumberIndex[2] = 2;
		NumberIndex[3] = 3;
		NumberIndex[4] = 4;
		NumberIndex[5] = 5;
		NumberIndex[6] = 6;
		NumberIndex[7] = 7;
		NumberIndex[8] = 8;
		NumberIndex[9] = 9;
		NumberIndex[10] = 0;

		float Ipos_x = 0.0895 + 0.15, Ipos_y = 0.0930 + 0.15;
		uint Indexs;

		int I;
		for (I = 1; I <= end_col; I++)
		{
			Indexs = NumberIndex[I];

			if (I != 1)
			{
				Ipos_x = Ipos_x + 0.0320;
				if (rows == 3)
				{
					Ipos_x = 0.0895 + 0.15;
					Ipos_y = Ipos_y + 0.0320;
					rows = 0;
				}
			}

			if (selectedMenuItem == I)

				GRAPHICS::DRAW_RECT(Ipos_x + ConvertionXValue, Ipos_y, 0.0342, 0.0342, 255, 0, 0, 255);//Scroller

			GRAPHICS::DRAW_RECT(Ipos_x + ConvertionXValue, Ipos_y, 0.0282, 0.0282, 25, 25, 25, 255);//Buttons
			drawText2(ItoS(Indexs), 7, Ipos_x + ConvertionXValue, Ipos_y + 0.01, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);

			rows++;

		}
		if (NumberIndexer >= 9)
		{
			drawNotification("~r~Max number leght limited, please return or set value.");
		}
		else
		{
			if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Button_A))
			{
				int item_selected;
				item_selected = selectedMenuItem;
				NumberIndexer++;
				if (NumberIndexer == 1)
				{
					NumberAdder1 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 2)
				{
					NumberAdder2 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 3)
				{
					NumberAdder3 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 4)
				{
					NumberAdder4 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 5)
				{
					NumberAdder5 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 6)
				{
					NumberAdder6 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 7)
				{
					NumberAdder7 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 8)
				{
					NumberAdder8 += NumberIndex[item_selected];
				}
				else if (NumberIndexer == 9)
				{
					NumberAdder9 += NumberIndex[item_selected];
				}
			}
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Button_Back))
		{
			switch (IntAction)
			{
			case 0: *keyboardVar = StoI(TabbleValue); break;
			}
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Button_B))
		{
			NumberIndexer = 0;
			NumberAdder1 = 0;
			NumberAdder2 = 0;
			NumberAdder3 = 0;
			NumberAdder4 = 0;
			NumberAdder5 = 0;
			NumberAdder6 = 0;
			NumberAdder7 = 0;
			NumberAdder8 = 0;
			NumberAdder9 = 0;
			DrawPalette2 = false;
			selectedMenuItem = 0;
		}
		if (NumberIndexer == 1)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i", NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 2)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i", NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 3)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i%i", NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 4)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i,%i%i%i", NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 5)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i,%i%i%i", NumberAdder5, NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 6)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i%i,%i%i%i", NumberAdder6, NumberAdder5, NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 7)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i,%i%i%i,%i%i%i", NumberAdder7, NumberAdder6, NumberAdder5, NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 8)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i,%i%i%i,%i%i%i", NumberAdder8, NumberAdder7, NumberAdder6, NumberAdder5, NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		else if (NumberIndexer == 9)
		{
			snprintf(TabbleValue, sizeof(TabbleValue), "%i%i%i,%i%i%i,%i%i%i", NumberAdder9, NumberAdder8, NumberAdder7, NumberAdder6, NumberAdder5, NumberAdder4, NumberAdder3, NumberAdder2, NumberAdder1);
			drawText2(TabbleValue, 6, 0.500, 0.400, 0.40f, 0.40f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, true);
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Button_X))
		{
			NumberIndexer--;
			if (NumberIndexer == 1)
			{
				NumberAdder1 = 0;
			}
			else if (NumberIndexer == 2)
			{
				NumberAdder2 = 0;
			}
			else if (NumberIndexer == 3)
			{
				NumberAdder3 = 0;
			}
			else if (NumberIndexer == 4)
			{
				NumberAdder4 = 0;
			}
			else if (NumberIndexer == 5)
			{
				NumberAdder5 = 0;
			}
			else if (NumberIndexer == 6)
			{
				NumberAdder6 = 0;
			}
			else if (NumberIndexer == 7)
			{
				NumberAdder7 = 0;
			}
			else if (NumberIndexer == 8)
			{
				NumberAdder8 = 0;
			}
			else if (NumberIndexer == 9)
			{
				NumberAdder9 = 0;
			}
		}
	}
	if (RGBColourTable)
	{
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xC3);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCA);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCB);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCD);
		CONTROLS::DISABLE_CONTROL_ACTION(0, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCD);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCC);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xC3);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCA);
		CONTROLS::SET_INPUT_EXCLUSIVE(2, 0xCB);
		RGBColourTableInstruction();
		if (RGBTableIndex == 1)
		{
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (0 * 0.060f), 0.600f, 0.060f, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);//Red Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (1 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 240);//Green Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (2 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 220);//Blue Background
		}
		if (RGBTableIndex == 2)
		{
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (0 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 220);//Red Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (1 * 0.060f), 0.600f, 0.060f, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);//Green Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (2 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 220);//Blue Background
		}
		if (RGBTableIndex == 3)
		{
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (0 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 220);//Red Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (1 * 0.060f), 0.600f, 0.060f, 10, 10, 10, 240);//Green Background
			GRAPHICS::DRAW_RECT(0.500f, 0.280f + (2 * 0.060f), 0.600f, 0.060f, bannerRectRed, bannerRectGreen, bannerRectBlue, 255);//Blue Background
		}

		GRAPHICS::DRAW_RECT(0.500f, 0.280f + (0 * 0.060f), 0.600f, 0.050f, 255, 0, 0, 255);//Red Line
		GRAPHICS::DRAW_RECT(0.500f, 0.280f + (1 * 0.060f), 0.600f, 0.050f, 0, 255, 0, 255);//Green Line
		GRAPHICS::DRAW_RECT(0.500f, 0.280f + (2 * 0.060f), 0.600f, 0.050f, 0, 0, 255, 255);//Blue Line

		addSprite("mpentry", "mp_main_gradient", 0.500f - GradientXValue, 0.280f + (0 * 0.060f), 0.600f, 0.050f, -90.0f, 0, 255, 0, 255);
		addSprite("mpentry", "mp_main_gradient", 0.500f - GradientXValue, 0.280f + (1 * 0.060f), 0.600f, 0.050f, -90.0f, 0, 255, 0, 255);
		addSprite("mpentry", "mp_main_gradient", 0.500f - GradientXValue, 0.280f + (2 * 0.060f), 0.600f, 0.050f, -90.0f, 0, 255, 0, 255);

		GRAPHICS::DRAW_RECT(0.200f + (ScrollVarIndexR * 0.00235f), 0.280f + (0 * 0.060f), 0.002f, 0.050f, 255, 255, 255, 255);//Red Line Var
		GRAPHICS::DRAW_RECT(0.200f + (ScrollVarIndexG * 0.00235f), 0.280f + (1 * 0.060f), 0.002f, 0.050f, 255, 255, 255, 255);//Green Line Var
		GRAPHICS::DRAW_RECT(0.200f + (ScrollVarIndexB * 0.00235f), 0.280f + (2 * 0.060f), 0.002f, 0.050f, 255, 255, 255, 255);//Blue Line Var

		GRAPHICS::DRAW_RECT(0.500f, 0.150f, 0.160f, 0.135f, 10, 10, 10, 255);//Background
		GRAPHICS::DRAW_RECT(0.500f, 0.150f, 0.150f, 0.125f, ScrollVarIndexR, ScrollVarIndexG, ScrollVarIndexB, 255);//Var Result

		GRAPHICS::DRAW_RECT(0.822f, 0.280f + (0 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Right
		GRAPHICS::DRAW_RECT(0.822f, 0.280f + (1 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Right
		GRAPHICS::DRAW_RECT(0.822f, 0.280f + (2 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Right
		GRAPHICS::DRAW_RECT(0.177f, 0.280f + (0 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Left
		GRAPHICS::DRAW_RECT(0.177f, 0.280f + (1 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Left
		GRAPHICS::DRAW_RECT(0.177f, 0.280f + (2 * 0.060f), 0.045f, 0.060f, 10, 10, 10, 255);//Var Left

		if (RGBTableIndex == 1)
		{
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Right))
			{
				ScrollVarIndexAlphaR1 = 255;
			}
			else
			{
				ScrollVarIndexAlphaR1 = 180;
			}
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Left))
			{
				ScrollVarIndexAlphaL1 = 255;
			}
			else
			{
				ScrollVarIndexAlphaL1 = 180;
			}
		}
		if (RGBTableIndex == 2)
		{
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Right))
			{
				ScrollVarIndexAlphaR2 = 255;
			}
			else
			{
				ScrollVarIndexAlphaR2 = 180;
			}
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Left))
			{
				ScrollVarIndexAlphaL2 = 255;
			}
			else
			{
				ScrollVarIndexAlphaL2 = 180;
			}
		}
		if (RGBTableIndex == 3)
		{
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Right))
			{
				ScrollVarIndexAlphaR3 = 255;
			}
			else
			{
				ScrollVarIndexAlphaR3 = 180;
			}
			if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Left))
			{
				ScrollVarIndexAlphaL3 = 255;
			}
			else
			{
				ScrollVarIndexAlphaL3 = 180;
			}
		}
		addSprite("commonmenutu", "arrowright", 0.822f, 0.280f + (0 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaR1);
		addSprite("commonmenutu", "arrowright", 0.822f, 0.280f + (1 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaR2);
		addSprite("commonmenutu", "arrowright", 0.822f, 0.280f + (2 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaR3);
		addSprite("commonmenutu", "arrowleft", 0.177f, 0.280f + (0 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaL1);
		addSprite("commonmenutu", "arrowleft", 0.177f, 0.280f + (1 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaL2);
		addSprite("commonmenutu", "arrowleft", 0.177f, 0.280f + (2 * 0.060f), 0.030f, 0.040f, 0.0f, 255, 255, 255, ScrollVarIndexAlphaL3);

		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Dpad_Down))
		{
			playSound("NAV_UP_DOWN");
			if (RGBTableIndex >= 3)
				RGBTableIndex = 1;
			else
				RGBTableIndex = RGBTableIndex + 1;
		}
		if (CONTROLS::IS_CONTROL_JUST_PRESSED(2, Dpad_Up))
		{
			playSound("NAV_UP_DOWN");
			if (RGBTableIndex <= 1)
				RGBTableIndex = 3;
			else
				RGBTableIndex = RGBTableIndex - 1;
		}
		if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Right))
		{
			playSound("NAV_UP_DOWN");
			if (RGBTableIndex == 1)
			{
				if (ScrollVarIndexR >= 255)
					ScrollVarIndexR = 0;
				else
					ScrollVarIndexR = ScrollVarIndexR + 1;
			}
			if (RGBTableIndex == 2)
			{
				if (ScrollVarIndexG >= 255)
					ScrollVarIndexG = 0;
				else
					ScrollVarIndexG = ScrollVarIndexG + 1;
			}
			if (RGBTableIndex == 3)
			{
				if (ScrollVarIndexB >= 255)
					ScrollVarIndexB = 0;
				else
					ScrollVarIndexB = ScrollVarIndexB + 1;
			}
		}
		if (CONTROLS::IS_CONTROL_PRESSED(2, Dpad_Left))
		{
			playSound("NAV_UP_DOWN");
			if (RGBTableIndex == 1)
			{
				if (ScrollVarIndexR <= 0)
					ScrollVarIndexR = 255;
				else
					ScrollVarIndexR = ScrollVarIndexR - 1;
			}
			if (RGBTableIndex == 2)
			{
				if (ScrollVarIndexG <= 0)
					ScrollVarIndexG = 255;
				else
					ScrollVarIndexG = ScrollVarIndexG - 1;
			}
			if (RGBTableIndex == 3)
			{
				if (ScrollVarIndexB <= 0)
					ScrollVarIndexB = 255;
				else
					ScrollVarIndexB = ScrollVarIndexB - 1;
			}
		}
		if (CONTROLS::IS_CONTROL_PRESSED(2, Button_B))
		{
			RGBColourTable = false;
		}
		if (RGBVarID == 1)
		{
			int vehicle;
			if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::PLAYER_PED_ID(), 0))
			{
				int item_selected;
				item_selected = selectedMenuItem;
				vehicle = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
				if (ENTITY::DOES_ENTITY_EXIST(vehicle) && ENTITY::IS_ENTITY_A_VEHICLE(vehicle))
				{
					VEHICLE::SET_VEHICLE_DIRT_LEVEL(vehicle, 0.0f);
					VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(vehicle, ScrollVarIndexR, ScrollVarIndexG, ScrollVarIndexB);
					VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(vehicle, ScrollVarIndexR, ScrollVarIndexG, ScrollVarIndexB);
				}
			}
		}
		if (RGBVarID == 2)
		{
			bannerRectRed = ScrollVarIndexR;
			bannerRectGreen = ScrollVarIndexG;
			bannerRectBlue = ScrollVarIndexB;
		}
		if (RGBVarID == 3)
		{
			bannerRectRed2 = ScrollVarIndexR;
			bannerRectGreen2 = ScrollVarIndexG;
			bannerRectBlue2 = ScrollVarIndexB;
		}
	}
	if (Drawneons)
	{
		DrawNeons(NeonR, NeonG, NeonB);
	}
	if (Drawneons2)
	{
		DrawNeons2(NeonR, NeonG, NeonB);
	}
	if (Toggle_RainBowCar)
	{
		Primary_Paint = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Primary_Paint2 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Primary_Paint3 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
		Secondary_Paint3 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Secondary_Paint4 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255),
			Secondary_Paint5 = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 255);
		CPaintMenu = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 0);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(CPaintMenu, Primary_Paint, Primary_Paint2, Primary_Paint3);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(CPaintMenu, Secondary_Paint3, Secondary_Paint4, Secondary_Paint5);
	}
	if (RankSystem)
	{
		int ModeratorA = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 1873);
		int Rank = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(ModeratorA, 5687);
		int i = 0;
		for (i = 0; i < 16; i++)
		{
			RPDrop12(Levels[Rank], i);
		}
	}
	if (NeverWantedSesion)
	{
		int i = 0;
		for (i = 0; i < 16; i++)
		{
			takewantedlevel(i);
		}
	}
	if (TeleportToOnFoot2)
	{
		int i = 0; for (i = 0; i < 16; i++)
		{
			if (i == PLAYER::PLAYER_ID()) continue;
			int Handle = PLAYER::GET_PLAYER_PED(i);
			if (!ENTITY::DOES_ENTITY_EXIST(Handle)) continue;
			Vector3 MyLoc = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			STREAMING::REQUEST_ANIM_DICT("move_f@sexy@a");
			if (STREAMING::HAS_ANIM_DICT_LOADED("move_f@sexy@a"))
			{
				int Cm = PALOMO::_NETWORK_CREATE_SYNCHRONISED_SCENE(MyLoc.x + (i * 2.5), MyLoc.y, MyLoc.z, 0.0f, 0.0f, 0.0f, 2, 0, 0, 0x3F800000, 0, 1065353216);
				PALOMO::_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(PLAYER::GET_PLAYER_PED(i), Cm, "move_f@sexy@a", "idle", 1000.0f, -1000.0f, 3, 1, 1148846080);
				PALOMO::_NETWORK_START_SYNCHRONISED_SCENE(Cm); PALOMO::_NETWORK_STOP_SYNCHRONISED_SCENE(Cm);
				TeleportToOnFoot2 = false;
			}
		}
	}

	if (Freeze_AllPlayers)
	{
		int i = 0;
		for (i = 0; i<16; i++)
		{
			if (i == PLAYER::PLAYER_ID()) continue;
			int Handle = PLAYER::GET_PLAYER_PED(i);
			if (!ENTITY::DOES_ENTITY_EXIST(Handle)) continue;
			AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(i));
		}
	}
	if (Freeze_AllPlayersCars)
	{
		int i = 0;
		int Vehicle = PED::GET_VEHICLE_PED_IS_IN(i, 0);
		for (i = 0; i<16; i++)
		{
			if (i == PLAYER::PLAYER_ID()) continue;
			int Handle = PLAYER::GET_PLAYER_PED(i);
			if (!ENTITY::DOES_ENTITY_EXIST(Handle)) continue;
			ENTITY::FREEZE_ENTITY_POSITION(Vehicle, true);
		}
	}
	if (NukeLoopAll)
	{
		for (int i = 0; i < 16; i++)
		{
			if (i != PLAYER::PLAYER_ID()) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), 0);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, BLIMP, 5, 1, 0, 0);
			}
		}
	}
	if (WaterLoopAll)
	{
		for (int i = 0; i < 16; i++)
		{
			if (i != PLAYER::PLAYER_ID()) {
				Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), 0);
				FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, 13, 5, 1, 0, 0);
			}
		}
	}
	if (AttachLinePlayers)
	{
		int i = 0; for (i = 0; i < 16; i++)
		{
			if (i == PLAYER::PLAYER_ID()) continue;
			int Handle = PLAYER::GET_PLAYER_PED(i);
			if (!ENTITY::DOES_ENTITY_EXIST(Handle)) continue;
			Vector3 MyLoc = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), false);
			STREAMING::REQUEST_ANIM_DICT("move_f@sexy@a");
			if (STREAMING::HAS_ANIM_DICT_LOADED("move_f@sexy@a"))
			{
				int Cm = PALOMO::_NETWORK_CREATE_SYNCHRONISED_SCENE(MyLoc.x, MyLoc.y, MyLoc.z + (i * 2.0), 0.0f, 0.0f, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), 2, 0, 0, 0x3F800000, 0, 1065353216);
				PALOMO::_NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(PLAYER::GET_PLAYER_PED(i), Cm, "move_f@sexy@a", "idle", 1000.0f, -1000.0f, 3, 1, 1148846080);
				PALOMO::_NETWORK_START_SYNCHRONISED_SCENE(Cm); PALOMO::_NETWORK_STOP_SYNCHRONISED_SCENE(Cm);
			}
		}
	}
	if (CashDropAll)
	{
		STREAMING::REQUEST_MODEL(0x113FD533);
		for (int i = 0; i < 16; i++)
		{
			int Handle = PLAYER::GET_PLAYER_PED(i);
			Vector3 coords = ENTITY::GET_ENTITY_COORDS(Handle, false);
			float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 3.14159265359;
			float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_) * 5.0f;
			float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true).x + radius * SYSTEM::COS(angle);
			float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true).y + radius * SYSTEM::SIN(angle);
			if (STREAMING::HAS_MODEL_LOADED(0x113FD533))
			{
				if (cashDelayA >= cashDelayB)
				{
					OBJECT::CREATE_AMBIENT_PICKUP(0xCE6FDD6B, x - MoneyRange_, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true).z + moneyzcoord + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, MoneyRange_), 0, amount, 0x113FD533, 0, 1);
					cashDelayA = 0;
				}
			}
			cashDelayA++;
			if (CashA >= CashB)
			{
				Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true);
				STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_paletoscore");
				GRAPHICS::_0x9C720B61("scr_paletoscore");
				GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_banknotes", Pos.x, Pos.y, Pos.z + 5.0f, 0.0, 0.0, 0.0, 10.0f, false, false, false);
				CashA = 0;
			}
		}
		CashA++;
	}
	if (ShootBulletAPlayer)
	{
		Vector3 mycoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1);
		Vector3 pcoords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		int hash;
		hash = GAMEPLAY::GET_HASH_KEY(BulletAtPlayerString);
		GAMEPLAY::SHOOT_SINGLE_BULLET_BETWEEN_COORDS(mycoords.x, mycoords.y, mycoords.z, pcoords.x, pcoords.y, pcoords.z, 0, 0, hash, PLAYER::PLAYER_PED_ID(), 0, 0, 500);
		if (!ShootBulletAPlayerLoop)
		{
			ShootBulletAPlayer = false;
		}
	}
	if (Explosions)
	{
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		FIRE::ADD_EXPLOSION(coords.x, coords.y, coords.z, ExplosionType, 100.0f, 1, 0, 5);
		if (!ExplosionsLoop)
		{
			Explosions = false;
		}
	}

	if (planecrash)
	{
		int handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), false);
		if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle1A))
		{
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(VehicleIndex);
			FatalFuncH4X(spawnvehicle1A);
			FatalFuncH4X(spawnvehicle2A);
			FatalFuncH4X(spawnvehicle3A);
			FatalFuncH4X(spawnvehicle4A);
			FatalFuncH4X(spawnvehicle5A);
			FatalFuncH4X(spawnvehicle6A);
			FatalFuncH4X(spawnvehicle7A);
			FatalFuncH4X(spawnvehicle8A);
			FatalFuncH4X(spawnvehicle9A);
			FatalFuncH4X(spawnvehicle10A);
			FatalFuncH4X(spawnvehicle11A);
			FatalFuncH4X(spawnvehicle12A);
			FatalFuncH4X(spawnvehicle13A);
			FatalFuncH4X(spawnvehicle14A);
			FatalFuncH4X(spawnvehicle15A);
			FatalFuncH4X(spawnvehicle16A);
			FatalFuncH4X(spawnvehicle17A);
			FatalFuncH4X(spawnvehicle18A);
			FatalFuncH4X(spawnvehicle19A);
			FatalFuncH4X(spawnvehicle20A);
			FatalFuncH4X(spawnvehicle21A);
			FatalFuncH4X(spawnvehicle22A);
			FatalFuncH4X(spawnvehicle23A);
			FatalFuncH4X(spawnvehicle24A);
			FatalFuncH4X(spawnvehicle25A);
			if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(selectedPlayer))
			{
				drawNotification("~c~Unknown. ~s~- Console Freeze Whit Planes: ~g~Success~s~!");
				DeleteEntH4X(spawnvehicle1A);
				DeleteEntH4X(spawnvehicle2A);
				DeleteEntH4X(spawnvehicle3A);
				DeleteEntH4X(spawnvehicle4A);
				DeleteEntH4X(spawnvehicle5A);
				DeleteEntH4X(spawnvehicle6A);
				DeleteEntH4X(spawnvehicle7A);
				DeleteEntH4X(spawnvehicle8A);
				DeleteEntH4X(spawnvehicle9A);
				DeleteEntH4X(spawnvehicle10A);
				DeleteEntH4X(spawnvehicle12A);
				DeleteEntH4X(spawnvehicle13A);
				DeleteEntH4X(spawnvehicle14A);
				DeleteEntH4X(spawnvehicle15A);
				DeleteEntH4X(spawnvehicle16A);
				DeleteEntH4X(spawnvehicle17A);
				DeleteEntH4X(spawnvehicle18A);
				DeleteEntH4X(spawnvehicle19A);
				DeleteEntH4X(spawnvehicle20A);
				DeleteEntH4X(spawnvehicle21A);
				DeleteEntH4X(spawnvehicle22A);
				DeleteEntH4X(spawnvehicle23A);
				DeleteEntH4X(spawnvehicle24A);
				DeleteEntH4X(spawnvehicle25A);
				planecrash = false;
			}
		}
		else
		{
			spawnvehicle1A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle2A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle3A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle4A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle5A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle6A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle7A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle8A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle9A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle10A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle11A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle12A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle13A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle14A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle15A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle16A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle17A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle18A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle19A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle20A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle21A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle22A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle23A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle24A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle25A = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
		}
	}
	if (fatalcrash_loop)
	{
		resetPlayerView(selectedPlayer);
		int handle = PLAYER::GET_PLAYER_PED(selectedPlayer);
		Vector3 Position = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), false);
		if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle1))
		{
			drawNotification("Freezing Console...");
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(spawnvehicle1);
			FatalFuncH4X(spawnvehicle1);
			FatalFuncH4X(spawnvehicle2);
			FatalFuncH4X(spawnvehicle3);
			FatalFuncH4X(spawnvehicle4);
			FatalFuncH4X(spawnvehicle5);
			FatalFuncH4X(spawnvehicle6);
			FatalFuncH4X(spawnvehicle7);
			FatalFuncH4X(spawnvehicle8);
			FatalFuncH4X(spawnvehicle9);
			FatalFuncH4X(spawnvehicle10);
			FatalFuncH4X(spawnvehicle11);
			FatalFuncH4X(spawnvehicle12);
			FatalFuncH4X(spawnvehicle13);
			FatalFuncH4X(spawnvehicle14);
			FatalFuncH4X(spawnvehicle15);
			FatalFuncH4X(spawnvehicle16);
			FatalFuncH4X(spawnvehicle17);
			FatalFuncH4X(spawnvehicle18);
			FatalFuncH4X(spawnvehicle19);
			FatalFuncH4X(spawnvehicle20);
			FatalFuncH4X(spawnvehicle21);
			FatalFuncH4X(spawnvehicle22);
			FatalFuncH4X(spawnvehicle23);
			FatalFuncH4X(spawnvehicle24);
			FatalFuncH4X(spawnvehicle25);
			float angle = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2.5) * 3.14159265359;
			float radius = GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 2.5) * 5.0f;
			float x = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).x + radius * SYSTEM::COS(angle);
			float y = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).y + radius * SYSTEM::SIN(angle);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle1, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle2, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle3, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle4, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle5, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle6, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle7, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle8, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle9, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle10, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle11, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle12, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle13, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle14, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle15, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle16, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle17, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle18, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle19, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle20, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle21, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle22, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle23, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle24, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			ENTITY::SET_ENTITY_COORDS(spawnvehicle25, x - 5, y, ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true).z + GAMEPLAY::GET_RANDOM_INT_IN_RANGE(0, 10), true, false, false, true);
			if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(selectedPlayer))
			{
				DeleteEntH4X(spawnvehicle1);
				DeleteEntH4X(spawnvehicle2);
				DeleteEntH4X(spawnvehicle3);
				DeleteEntH4X(spawnvehicle4);
				DeleteEntH4X(spawnvehicle5);
				DeleteEntH4X(spawnvehicle6);
				DeleteEntH4X(spawnvehicle7);
				DeleteEntH4X(spawnvehicle8);
				DeleteEntH4X(spawnvehicle9);
				DeleteEntH4X(spawnvehicle10);
				DeleteEntH4X(spawnvehicle12);
				DeleteEntH4X(spawnvehicle13);
				DeleteEntH4X(spawnvehicle14);
				DeleteEntH4X(spawnvehicle15);
				DeleteEntH4X(spawnvehicle16);
				DeleteEntH4X(spawnvehicle17);
				DeleteEntH4X(spawnvehicle18);
				DeleteEntH4X(spawnvehicle19);
				DeleteEntH4X(spawnvehicle20);
				DeleteEntH4X(spawnvehicle21);
				DeleteEntH4X(spawnvehicle22);
				DeleteEntH4X(spawnvehicle23);
				DeleteEntH4X(spawnvehicle24);
				DeleteEntH4X(spawnvehicle25);
				drawNotification("Console Should Be Frozen");
				fatalcrash_loop = false;
			}
		}
		else
		{
			spawnvehicle1 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle2 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle3 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle4 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle5 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle6 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle7 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle8 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle9 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle10 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle11 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle12 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle13 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle14 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle15 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle16 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle17 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle18 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle19 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle20 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle21 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle22 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle23 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle24 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
			spawnvehicle25 = CREATE_VEHICLE_NORMAL4(VehicleIndex, Position.x, Position.y, Position.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
		}
	}
	if (DoSlod)
	{
		STREAMING::REQUEST_MODEL(GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"));
		Vector3 coords = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
		int handle = PLAYER::GET_PLAYER_PED(PLAYER::PLAYER_ID());
		Vector3 MyPos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
		if (IS_ENTITY_IN_AREA(handle, MyPos, 100))
		{
			drawNotification("~r~Warning, Victim is in your area range");
			DoSlod = false;
		}
		else
		{
			AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
			if (ENTITY::DOES_ENTITY_EXIST(FreezeModel1)) {}
			else
			{
				if (STREAMING::HAS_MODEL_LOADED(GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01")))
				{
					resetPlayerView(selectedPlayer);
					FreezeModel1 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel2 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel3 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel4 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel5 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel6 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel7 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel8 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel9 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					FreezeModel10 = (PED::CREATE_PED(21, ModelToFreeze, coords.x, coords.y, coords.z, 0, 1, 0));
					if (ENTITY::DOES_ENTITY_EXIST(FreezeModel1))
					{
						AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
						STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(GAMEPLAY::GET_HASH_KEY("s_m_y_clown_01"));
						NetExistPeds(FreezeModel1);
						NetExistPeds(FreezeModel2);
						NetExistPeds(FreezeModel3);
						NetExistPeds(FreezeModel4);
						NetExistPeds(FreezeModel5);
						NetExistPeds(FreezeModel6);
						NetExistPeds(FreezeModel7);
						NetExistPeds(FreezeModel8);
						NetExistPeds(FreezeModel9);
						NetExistPeds(FreezeModel10);
						STREAMING::_REQUEST_DLC_PTFX_ASSET("scr_rcbarry1");
						GRAPHICS::_0x9C720B61("scr_rcbarry1");
						GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_alien_teleport", coords.x, coords.y, coords.z, 0.0, 0.0, 0.0, 50.0f, false, false, false);
						drawNotification("In a matter of seconds your ~r~console will freeze");
					}
				}
			}
			if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle1)) {}
			else
			{
				spawnvehicle1 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x - 5.0f, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle2 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x + 5.0f, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle3 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y - 5.0f, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle4 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y + 5.0f, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle5 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y, coords.z + 10.0f, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle6 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y, coords.z + 5.0f, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle7 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x - 5.0f, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle8 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x + 5.0f, coords.y, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle9 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y - 5.0f, coords.z, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				spawnvehicle10 = CREATE_VEHICLE_NORMAL4(0x3F119114, coords.x, coords.y, coords.z + 5.0f, ENTITY::GET_ENTITY_HEADING(handle), 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(spawnvehicle1))
				{
					AI::CLEAR_PED_TASKS_IMMEDIATELY(PLAYER::GET_PLAYER_PED(selectedPlayer));
					STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x782A236D);
					FreezeStuffFuncA(spawnvehicle1);
					FreezeStuffFuncA(spawnvehicle2);
					FreezeStuffFuncA(spawnvehicle3);
					FreezeStuffFuncA(spawnvehicle4);
					FreezeStuffFuncA(spawnvehicle5);
					FreezeStuffFuncA(spawnvehicle6);
					FreezeStuffFuncA(spawnvehicle7);
					FreezeStuffFuncA(spawnvehicle8);
					FreezeStuffFuncA(spawnvehicle9);
					FreezeStuffFuncA(spawnvehicle10);
				}
			}
			if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(selectedPlayer))
			{
				drawNotification("~c~Unknown ~s~- ~g~Console Freeze Successfully.");
				DeleteEntH4X(FreezeModel1);
				DeleteEntH4X(FreezeModel2);
				DeleteEntH4X(FreezeModel3);
				DeleteEntH4X(FreezeModel4);
				DeleteEntH4X(FreezeModel5);
				DeleteEntH4X(FreezeModel6);
				DeleteEntH4X(FreezeModel7);
				DeleteEntH4X(FreezeModel8);
				DeleteEntH4X(FreezeModel9);
				DeleteEntH4X(FreezeModel10);
				DeleteEntH4X(spawnvehicle1);
				DeleteEntH4X(spawnvehicle2);
				DeleteEntH4X(spawnvehicle3);
				DeleteEntH4X(spawnvehicle4);
				DeleteEntH4X(spawnvehicle5);
				DeleteEntH4X(spawnvehicle6);
				DeleteEntH4X(spawnvehicle7);
				DeleteEntH4X(spawnvehicle8);
				DeleteEntH4X(spawnvehicle9);
				DeleteEntH4X(spawnvehicle10);
				DoSlod = false;
			}
		}
	}
	if (FreezeTaxi)
	{
		using namespace STREAMING;
		using namespace PED;
		using namespace PLAYER;
		using namespace ENTITY;
		using namespace VEHICLE;
		REQUEST_MODEL(FREEZEMODEL);
		Ped ped = GET_PLAYER_PED(PlayerID);
		Vector3 Loc = GET_ENTITY_COORDS(ped, 1);
		int Bone = GET_PED_BONE_INDEX(ped, 57597);
		if (HAS_MODEL_LOADED(FREEZEMODEL))
		{
			if (ENTITY::DOES_ENTITY_EXIST(VehicleFreezetaxi))
			{
				SET_ENTITY_ALPHA(VehicleFreezetaxi, 0, false);
				if (!NETWORK::NETWORK_IS_PLAYER_CONNECTED(PlayerID))
				{
					drawNotification("~c~Unknown ~s~- ~g~Console Freeze Successfully.");
					DeleteEntH4X(VehicleFreezetaxi);
					FreezeTaxi = false;
				}
			}
			else
			{
				drawNotification("~c~Unknown ~s~- ~r~Console Freeze Started.");
				VehicleFreezetaxi = CREATE_VEHICLE_NORMAL4(FREEZEMODEL, Loc.x, Loc.y, Loc.z, ENTITY::GET_ENTITY_HEADING(ped), 1, 0);
				int Ped = PED::CREATE_PED(0x1A, 0xB881AEE, Loc.x, Loc.y, Loc.z, ENTITY::GET_ENTITY_HEADING(ped), 1, 0);
				PED::SET_PED_INTO_VEHICLE(Ped, VehicleFreezetaxi, -1);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(VehicleFreezetaxi, PLAYER::GET_PLAYER_PED(PlayerID), Bone, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
				AI::TASK_GO_STRAIGHT_TO_COORD(Ped, Loc.x, Loc.y, Loc.z, 4.0, 20000, 40000.0f, 0.5f);
				SET_ENTITY_ALPHA(VehicleFreezetaxi, 0, false);
				SET_ENTITY_ALPHA(Ped, 0, false);
			}
		}
	}
	if (FreezeCameraFroze)
	{
		resetPlayerView(selectedPlayer);
		if (FreezeCameraFrozeA >= FreezeCameraFrozeB)
		{
			FreezeCameraFrozeA = 0;
			FreezeCameraFroze = false;
		}
		FreezeCameraFrozeA++;
	}
	if (ShowTalking)
	{
		for (int i = 0; i < 16; i++)
		{
			if (NETWORK::NETWORK_PLAYER_HAS_HEADSET(i))
				Height++;
		}
		if (Height <= 1)
			Height = 0;
		float BoxHeight = PixelY(30 * Height);

		int Current = 1;
		for (int i = 0; i < 16; i++)
		{
			if (NETWORK::NETWORK_PLAYER_HAS_HEADSET(i))
			{
				char* Icon = "leaderboard_audio_inactive";
				if (NETWORK::NETWORK_IS_PLAYER_MUTED_BY_ME(i))
					Icon = "leaderboard_audio_mute";

				else if (NETWORK::NETWORK_IS_PLAYER_TALKING(i))
					Icon = "leaderboard_audio_3";

				drawText2(PLAYER::GET_PLAYER_NAME(i), 0, PixelX(60), PixelY(50) + (PixelY(30) * Current), 0.4, 0.4, 240, 240, 240, 255, false);
				addSprite("mpleaderboard", Icon, PixelX(45), PixelY(60) + (PixelY(30) * Current), 0.03, 0.05, 0, 255, 255, 255, 255);
				Current++;
			}
		}
	}
	if (Show_Host)
	{
		drawText3("Host:", 6, 0.05f, 0.03f, 0.6050f, 0.6050f, 255, 255, 255, 255, 0);
		drawText3(PLAYER::GET_PLAYER_NAME(NETWORK::NETWORK_GET_HOST_OF_SCRIPT("Freemode", 4294967295, 0)), 6, 0.08f, 0.03f, 0.6050f, 0.6050f, 255, 0, 0, 255, 0);
	}
	if (AtlasOpenText)
	{
		drawText3("Free Slots:", 6, 0.05f, 0.06f, 0.6050f, 0.6050f, 255, 255, 255, 255, 0);
		drawText3(ItoS(FreeSlots()), 6, 0.11f, 0.06f, 0.6050f, 0.6050f, 255, 0, 0, 255, false);
	}
	if (Show_FPS_Counter)
	{
		float LastFrameTime = GAMEPLAY::GET_FRAME_TIME();
		int getFPS = (1.0f / LastFrameTime);
		char FPStext[60];
		snprintf(FPStext, sizeof(FPStext), "FPS: ~r~ %d", getFPS);
		UI::SET_TEXT_FONT(6);
		UI::SET_TEXT_SCALE(0.5f, 0.5f);
		UI::SET_TEXT_COLOUR(255, 255, 255, 255);
		UI::SET_TEXT_WRAP(0.0f, 1.0f);
		UI::SET_TEXT_CENTRE(0);
		UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
		UI::_SET_TEXT_ENTRY("STRING");
		UI::_ADD_TEXT_COMPONENT_STRING(FPStext);
		UI::_DRAW_TEXT(0.040f, 0.030f);
	}
	if (ShowReports)
	{
		float Left = 45;
		if (Height > 1)
			Left = 345;

		char* Report_Ac_names[17] = { "Report Strength", "Commend Strength", "Friendly", "Helpful", "Griefing", "Annoying", "Hate", "Offensive Language", "Offensive Tagplate", "Offensive UGC", "Bad Crew Name", "Bad Crew Motto", "Bad Crew Status", "Bad Crew Emblem", "Game Exploits", "Exploits", "Punished" };
		float BoxHeight = PixelY(30 * 18);

		GRAPHICS::DRAW_RECT(PixelX(Left + 105), PixelY(45) + (BoxHeight / 2), PixelX(250), BoxHeight, 0, 0, 0, 150);//Background
		drawText2("Reports", 0, PixelX(Left), PixelY(50) + (PixelY(30) * 0), 0.5, 0.5, bannerRectRed, bannerRectGreen, bannerRectBlue, 255, false);
		for (int i = 0; i < 17; i++)
		{
			char Buffer[300];
			snprintf(Buffer, sizeof(Buffer), "%s: %i", Report_Ac_names[i], a_Report_Values[i]);
			drawText2(Buffer, 0, PixelX(Left), PixelY(50) + (PixelY(30) * (i + 1)), 0.4, 0.4, 240, 240, 240, 255, false);

		}
	}
	if (PlayerQuick)
	{
		GRAPHICS::DRAW_SPRITE("frontend", "gtav_logo", 0.14f, 0.415f, 0.204f, 0.104f, 0.0f, 0, 0, 0, 100);// Background left
		PrintToScreen((PLAYER::GET_PLAYER_NAME(selectedPlayer)), 0.061f, 0.36f, 255, 0, 0, 255, 0.6500f, 0.8500f, 0, 6); // Info Left
		PrintToScreen((PLAYER::GET_PLAYER_NAME(selectedPlayer)), 0.0622f, 0.3612f, 255, 255, 255, 255, 0.6500f, 0.8500f, 0, 6); // Info Left
		if (PLAYER::IS_PLAYER_DEAD(selectedPlayer))
		{
			PrintToScreen(" ~w~Status:", 0.215f, 0.366f, 255, 65, 100, 255, 0.3200f, 0.3200f, 0, 6);
			PrintToScreen("[Dead!]", 0.215f, 0.386f, 10, 255, 25, 255, 0.3200f, 0.3200f, 0, 6);
		}
		else
		{
			PrintToScreen(" ~w~Status:", 0.215f, 0.366f, 255, 65, 100, 255, 0.3200f, 0.3200f, 0, 6);
			PrintToScreen("[Alive!]", 0.215f, 0.386f, 10, 255, 25, 255, 0.3200f, 0.3200f, 0, 6);
		}

		GRAPHICS::DRAW_SPRITE("frontend", "gtav_logo", 0.14f, 0.49f, 0.204f, 0.154f, 0.0f, 255, 0, 0, 180);// Background left
		GRAPHICS::DRAW_SPRITE("frontend", "gtav_logo", 0.14f, 0.49f, 0.20f, 0.15f, 0.0f, 25, 25, 25, 255);// Background left
		GRAPHICS::DRAW_SPRITE("shared", "bggradient_32x1024", 0.14f, 0.46f, 0.20f, 0.09f, 0.0f, 25, 25, 25, 140);//BG Shader
		GRAPHICS::DRAW_SPRITE("commonmenutu", "rockstar", 0.225f, 0.44f, 0.025f, 0.025f, 0.0f, 255, 0, 0, 250);//RockStar Logo

		PrintToScreen(" ~w~Press ~b~[LB] ~w~To Teleport To Player", 0.06f, 0.42f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
		PrintToScreen(" ~w~Press ~b~[RB] ~w~To Drop Cash", 0.06f, 0.44f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
		PrintToScreen(" ~w~Press ~b~[Dpad Right] ~w~To Take Away Weapons", 0.06f, 0.46f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
		PrintToScreen(" ~w~Press ~b~[Dpad Left] ~w~To Explode Player", 0.06f, 0.48f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
		PrintToScreen(" ~w~Press ~b~[Dpad Down] ~w~To Kick Player", 0.06f, 0.50f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
		PrintToScreen(" ~w~Press ~b~[Back] ~w~To Exit Sub Menu", 0.06f, 0.52f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left

		if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_B))
		{
			PlayerQuick = false;
		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_LB))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.42f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left 
			Ped ped = PLAYER::PLAYER_PED_ID();
			Vector3 coords1101;
			coords1101 = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), 1);
			Entity entityToTele = ped;
			if (PED::IS_PED_SITTING_IN_ANY_VEHICLE(ped))
				entityToTele = PED::GET_VEHICLE_PED_IS_USING(ped);
			ENTITY::SET_ENTITY_COORDS(entityToTele, coords1101.x, coords1101.y, coords1101.z, false, false, false, true);
			Vector3 PedCoords = ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), true);
			STREAMING::LOAD_ALL_OBJECTS_NOW();
		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xBUTTON_RB))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.44f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left 
			Cash_Drop40K = !Cash_Drop40K;
		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_RIGHT))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.46f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left 
			WEAPON::REMOVE_ALL_PED_WEAPONS(PLAYER::GET_PLAYER_PED(selectedPlayer), 0);
		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_LEFT))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.48f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left 
		//	Explode_Player = !Explode_Player;
		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_DOWN))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.50f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left
			{
				int Args[3];
				Args[0] = 2;
				Args[1] = selectedPlayer;
				Args[2] = 0x35;
				TriggerScriptEvent(Args, 3, selectedPlayer);
			}

		}
		if (CONTROLS::IS_CONTROL_PRESSED(0, xDPAD_UP))
		{
			PrintToScreen("~b~>>>", 0.045f, 0.52f, 250, 0, 0, 255, 0.4000f, 0.4000f, 0, 6); // Info Left 

		}
	}

	if (freezecaraccionador)
	{
		if (typecarcrash == 1) {
			*(int*)0xCD78AE28 = 0x00000006;
			*(int*)0xCD78AE6C = 0x000000F1;
			modelhashfreezecar = 0x3D8FA25C;
		}
		if (typecarcrash == 2) {
			*(int*)0xCD78B098 = 0x00000006;
			*(int*)0xCD78B0DC = 0x000000F1;
			modelhashfreezecar = 0xA8E38B01;
		}
		if (typecarcrash == 3) {
			*(int*)0xCD79F9A8 = 0x00000006;
			*(int*)0xCD79F9EC = 0x000000F1;
			modelhashfreezecar = 0xA46462F7;
		}
		if (typecarcrash == 4) {
			*(int*)0xCD79F738 = 0x00000006;
			*(int*)0xCD79F77C = 0x000000F1;
			modelhashfreezecar = 0x95F4C618;
		}
		if (typecarcrash == 5) {
			*(int*)0xCD78AE28 = 0x00000001;
			*(int*)0xCD78AE6C = 0x000000F1;
			modelhashfreezecar = 0x3D8FA25C;
		}
		if (typecarcrash == 6) {
			*(int*)0xCD78B098 = 0x00000001;
			*(int*)0xCD78B0DC = 0x000000F1;
			modelhashfreezecar = 0xA8E38B01;
		}
		if (typecarcrash == 7) {
			*(int*)0xCD79F9A8 = 0x00000001;
			*(int*)0xCD79F9EC = 0x000000F1;
			modelhashfreezecar = 0xA46462F7;
		}
		if (typecarcrash == 8) {
			*(int*)0xCD79F738 = 0x00000001;
			*(int*)0xCD79F77C = 0x000000F1;
			modelhashfreezecar = 0x95F4C618;
		}
		STREAMING::REQUEST_MODEL(modelhashfreezecar);
		if (STREAMING::HAS_MODEL_LOADED(modelhashfreezecar))
		{
			Vector3 Loc = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(selectedPlayer), true);
			int vehiclefreezecm = VEHICLE::CREATE_VEHICLE(modelhashfreezecar, Loc.x, Loc.y, Loc.z, ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 0);
			int vehiclefreezecm2 = VEHICLE::CREATE_VEHICLE(modelhashfreezecar, Loc.x, Loc.y, Loc.z, ENTITY::GET_ENTITY_HEADING(PLAYER::GET_PLAYER_PED(selectedPlayer)), 1, 0);
			if (ENTITY::DOES_ENTITY_EXIST(vehiclefreezecm))
			{
				STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(modelhashfreezecar);
				if (typecarcrash == 1) {
					*(int*)0xCD78AE28 = 0x00000006;
					*(int*)0xCD78AE6C = 0x000000F1;
					modelhashfreezecar = 0x3D8FA25C;
				}
				if (typecarcrash == 2) {
					*(int*)0xCD78B098 = 0x00000006;
					*(int*)0xCD78B0DC = 0x000000F1;
					modelhashfreezecar = 0xA8E38B01;
				}
				if (typecarcrash == 3) {
					*(int*)0xCD79F9A8 = 0x00000006;
					*(int*)0xCD79F9EC = 0x000000F1;
					modelhashfreezecar = 0xA46462F7;
				}
				if (typecarcrash == 4) {
					*(int*)0xCD79F738 = 0x00000006;
					*(int*)0xCD79F77C = 0x000000F1;
					modelhashfreezecar = 0x95F4C618;
				}
				if (typecarcrash == 5) {
					*(int*)0xCD78AE28 = 0x00000001;
					*(int*)0xCD78AE6C = 0x000000F1;
					modelhashfreezecar = 0x3D8FA25C;
				}
				if (typecarcrash == 6) {
					*(int*)0xCD78B098 = 0x00000001;
					*(int*)0xCD78B0DC = 0x000000F1;
					modelhashfreezecar = 0xA8E38B01;
				}
				if (typecarcrash == 7) {
					*(int*)0xCD79F9A8 = 0x00000001;
					*(int*)0xCD79F9EC = 0x000000F1;
					modelhashfreezecar = 0xA46462F7;
				}
				if (typecarcrash == 8) {
					*(int*)0xCD79F738 = 0x00000001;
					*(int*)0xCD79F77C = 0x000000F1;
					modelhashfreezecar = 0x95F4C618;
				}
				ENTITY::SET_ENTITY_PROOFS(vehiclefreezecm, true, true, true, true, true, false, false, false);
				ENTITY::SET_ENTITY_PROOFS(vehiclefreezecm2, true, true, true, true, true, false, false, false);
				ENTITY::ATTACH_ENTITY_TO_ENTITY(vehiclefreezecm2, PLAYER::GET_PLAYER_PED(selectedPlayer), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1);
				ENTITY::SET_ENTITY_INVINCIBLE(vehiclefreezecm, false);
				ENTITY::SET_ENTITY_INVINCIBLE(vehiclefreezecm2, false);
				freezecaraccionador = false;
			}
		}
	}

	if (scriptsetModel != -1) {
		if (!STREAMING::IS_MODEL_IN_CDIMAGE(scriptsetModel)) { scriptsetModel = -1; }
		STREAMING::REQUEST_MODEL(scriptsetModel);
		if (STREAMING::HAS_MODEL_LOADED(scriptsetModel)) {
			PLAYER::SET_PLAYER_MODEL(PLAYER::PLAYER_ID(), scriptsetModel);
			scriptsetModel = -1;
		}
	}

	if (tiempoparacrashearlimite) {
		contadoreljackson++;
		CAM::_ANIMATE_GAMEPLAY_CAM_ZOOM(0.0f, 1000);
		ENTITY::ATTACH_ENTITY_TO_ENTITY(PLAYER::PLAYER_ID(), PLAYER::GET_PLAYER_PED(selectedPlayer), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1);
		printscreeneljackson("Crash to player: ~r~%s", PLAYER::GET_PLAYER_NAME(selectedPlayer));
		if (contadoreljackson >= 600)
		{
			scriptsetModel = 1641334641;
			tiempoparacrashearlimite = false;
		}
	}
}

#pragma endregion