#include "Variables.h"
BOOL expired = FALSE;
BOOL freemode = TRUE;
#pragma region Internal
int snprintf(char *buffer, size_t len, const char *fmt, ...)
{
	va_list args;
	int i;

	va_start(args, fmt);
	i = vsnprintf(buffer, len, fmt, args);
	va_end(args);
	return i;
}
void drawNotification(char* msg)
{
	UI::_0xF42C43C7("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(msg);
	UI::_0x38F82261(3000, 1);
}
void InfoBox(char* Message)
{
	UI::_SET_TEXT_COMPONENT_FORMAT("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(Message);
	UI::_DISPLAY_HELP_TEXT_FROM_STRING_LABEL(0, false, false, -1);
}
char printMessageBuffer[256];
void PrintToScreenNum(int number, float x, float y, int r, int g, int b, int a, float scaleX, float scaleY, int centerText, int font) {
	
	sprintf(printMessageBuffer, "%d", number);
	VMArgs[2][0] = (int)printMessageBuffer;
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_SCALE(scaleX, scaleY);
	UI::SET_TEXT_OUTLINE();
	UI::SET_TEXT_CENTRE(centerText);
	UI::_SET_TEXT_ENTRY("STRING");
	int (__cdecl *unk)(void *) = (int (__cdecl *)(void *))0x8291CA80;
	unk(printMessageBuffer);
	UI::_DRAW_TEXT(x, y);
}
void PrintToScreen(char *str, float x, float y, int r, int g, int b, int a, float scaleX, float scaleY, int centerText, int font) {

	VMArgs[2][0] = (int)str;
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_SCALE(scaleX, scaleY);
	UI::SET_TEXT_OUTLINE();
	UI::SET_TEXT_CENTRE(centerText);
	UI::_SET_TEXT_ENTRY("STRING");
	int (__cdecl *unk)(void *) = (int (__cdecl *)(void *))0x8291CA80;
	unk(str);
	UI::_DRAW_TEXT(x, y);
}
void PrintToScreenFloat(float number, float x, float y, int r, int g, int b, int a, float scaleX, float scaleY, int centerText, int font) {

	sprintf(printMessageBuffer, "%f", number);
	VMArgs[2][0] = (int)printMessageBuffer;
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_SCALE(scaleX, scaleY);
	UI::SET_TEXT_OUTLINE();
	UI::SET_TEXT_CENTRE(centerText);
	UI::_SET_TEXT_ENTRY("STRING");
	int (__cdecl *unk)(void *) = (int (__cdecl *)(void *))0x8291CA80;
	unk(printMessageBuffer);
	UI::_DRAW_TEXT(x, y);
}
float PixelX(int Input)
{
	return (float)Input / (float)1280;
}
float PixelY(int Input)
{
	return (float)Input / (float)720;
}
void SetupTimer(int tickTime)
{
	if (newTimerTick) {
		maxTimerCount = GAMEPLAY::GET_GAME_TIMER() + tickTime;
		newTimerTick = false;
	}
}
bool IsTimerReady()
{
	return GAMEPLAY::GET_GAME_TIMER() > maxTimerCount;
}
void ResetTimer()
{
	newTimerTick = true;
}
void SetupTimer1(int tickTime)
{
	if (newTimerTick1) {
		maxTimerCount1 = GAMEPLAY::GET_GAME_TIMER() + tickTime;
		newTimerTick1 = false;
	}
}
bool IsTimerReady1()
{
	return GAMEPLAY::GET_GAME_TIMER() > maxTimerCount1;
}
void ResetTimer1()
{
	newTimerTick1 = true;
}
void set_text_component(char *text)
{
	GRAPHICS::_0x3AC9CB55("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	GRAPHICS::_0x386CE0B8();
}
void instructionsSetup()
{
	mov = GRAPHICS::REQUEST_SCALEFORM_MOVIE("instructional_buttons");
	GRAPHICS::_0x7B48E696(mov, 255, 255, 255, 0);
	GRAPHICS::_0x215ABBE8(mov, "CLEAR_ALL");
	GRAPHICS::_0x02DBF2D7();
	GRAPHICS::_0x215ABBE8(mov, "SET_CLEAR_SPACE");
	GRAPHICS::_0x716777CB(200);
	GRAPHICS::_0x02DBF2D7();
	instructCount = 0;
}
void addInstruction(int button, char *text)
{
	if (!instructionsSetupThisFrame)
	{
		instructionsSetup();
		instructionsSetupThisFrame = true;
	}
	GRAPHICS::_0x215ABBE8(mov, "SET_DATA_SLOT");
	GRAPHICS::_0x716777CB(instructCount);
	GRAPHICS::_0x716777CB(button);
	set_text_component(text);
	GRAPHICS::_0x02DBF2D7();
	instructCount++;
}
void instructionsClose()
{
	GRAPHICS::_0x215ABBE8(mov, "DRAW_INSTRUCTIONAL_BUTTONS");
	GRAPHICS::_0x02DBF2D7();
	GRAPHICS::_0x215ABBE8(mov, "SET_BACKGROUND_COLOUR");
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(0);
	GRAPHICS::_0x716777CB(80);
	GRAPHICS::_0x02DBF2D7();
}
bool isNumericChar(char x)
{
	return (x >= '0' && x <= '9') ? true : false;
}
int StoI(char *str)
{
	if (*str == NULL)
		return 0;

	int res = 0,
		sign = 1,
		i = 0;

	if (str[0] == '-')
	{
		sign = -1;
		i++;
	}
	for (; str[i] != '\0'; ++i)
	{
		if (isNumericChar(str[i]) == false)
			return 0;
		res = res * 10 + str[i] - '0';
	}
	return sign*res;
}
char *ItoS(int num)
{
	char buf[30];
	snprintf(buf, sizeof(buf), "%i", num);
	return buf;
}
void DrawSprite(char  *Streamedtexture, char  *textureName, float x, float y, float width, float height, float rotation, int r, int g, int b, int a)
{
	GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT(Streamedtexture, false);
	GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED(Streamedtexture);
	GRAPHICS::DRAW_SPRITE(Streamedtexture, textureName, x, y, width, height, rotation, r, g, b, a);
}
char* FtoS(float input)
{
	char returnvalue[64];
	int wholenumber = (int)input;
	input -= wholenumber;
	input *= 100;
	sprintf(returnvalue, "%d.%d", wholenumber, (int)input);
	return returnvalue;
}
void startKeyboard(int action, char *defaultText, int maxLength)
{
	GAMEPLAY::DISPLAY_ONSCREEN_KEYBOARD(0, "FMMC_KEY_TIP8", "", defaultText, "", "", "", maxLength);
	keyboardAction = action;
	keyboardActive = true;
}
void playSound(char* sound)
{
	if (menuSounds)
		AUDIO::PLAY_SOUND_FRONTEND(-1, sound, "HUD_FRONTEND_DEFAULT_SOUNDSET");
}
void drawText(char * text, int font, float x, float y, float scalex, float scaley, int r, int b, int g, int a, bool center)
{
	UI::SET_TEXT_FONT(font);
	UI::SET_TEXT_SCALE(scalex, scaley);
	UI::SET_TEXT_COLOUR(r, g, b, a);
	UI::SET_TEXT_CENTRE(center);
	UI::SET_TEXT_DROPSHADOW(0, 0, 0, 0, 0);
	UI::SET_TEXT_OUTLINE();
	UI::_SET_TEXT_ENTRY("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING(text);
	UI::_DRAW_TEXT(x, y);
}
void addSprite(char * streamed_texture, char * texture_name, float x, float y, float width, float height, float rotation, int r, int g, int b, int a)
{
	if (!GRAPHICS::HAS_STREAMED_TEXTURE_DICT_LOADED(streamed_texture))
	{
		GRAPHICS::REQUEST_STREAMED_TEXTURE_DICT(streamed_texture, false);
	}
	GRAPHICS::DRAW_SPRITE(streamed_texture, texture_name, x, y, width, height, rotation, r, g, b, a);
}
#pragma endregion
#pragma region Option Helpers
int getOption()
{
	xInstruction = true;
	if (optionPress)
		return currentOption;
	else return 0;
}
void addTitle(char *title)
{
	GRAPHICS::DRAW_RECT(menuXCoord, 0.11f, 0.20f, 0.0995f, bannerRectRed, bannerRectGreen, bannerRectBlue, bannerRectOpacity); /*Title Bar*/ 
	drawText(title, bannerTextFont, menuXCoord, 0.07f, 0.75f, 0.75f, bannerTextRed, bannerTextGreen, bannerTextBlue, bannerTextOpacity, true);
	char ClientName[60];
	float ExploitX = 0.854f;

	snprintf(ClientName, sizeof(ClientName), "Welcome, ~c~~h~Test");
	drawText(ClientName, bannerTextFont, ExploitX, 0.11f, 0.15f, 0.7f, 255, 255, 255, 255, true); // title
		DrawSprite("mpentry", "mp_modeselected_gradient", menuXCoord, 0.105f, 0.240f, 0.125f, 0, 156, 7, 255, 175); // Header Gradient
}
void addOption(char *option, char *info = NULL)
{
	optionCount++;
	char buf[120];
	if (currentOption == optionCount)
	{
		infoText = info;
		snprintf(buf, sizeof(buf), " %s", option);
	} else {
		snprintf(buf, sizeof(buf), "%s", option);
	}
	if (currentOption <= maxOptions && optionCount <= maxOptions)
	{
		drawText(buf, optionsFont, textXCoord, (optionCount * 0.035f + 0.125f), 0.4f, 0.4f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, false);
	}
	else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
	{
		drawText(buf, optionsFont, textXCoord, ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.125f), 0.4f, 0.4f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, false);
	}

}

void changeSubmenu(int newSubmenu)
{
	lastSubmenu[submenuLevel] = submenu;
	lastOption[submenuLevel] = currentOption;
	currentOption = 1;
	submenu = newSubmenu;
	submenuLevel++;
}
void addSubmenuOption(char *option, int newSubmenu, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
		{
			changeSubmenu(newSubmenu);
		}
	}
}

void addBoolOption(char *option, bool b00l, char *info = NULL)
{
	char buf[255];
	if (b00l)
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
		{
			addSprite("CommonMenu", "Shop_Box_TickB", menuXCoord + 0.09, (((optionCount + 1) * 0.035f) + 0.1415f), 0.03f, 0.04f, 0.0f, 255, 255, 255, 255);
		}
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
		{
			addSprite("CommonMenu", "Shop_Box_TickB", menuXCoord + 0.09, ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.2175f), 0.03f, 0.04f, 0.0f, 255, 255, 255, 255);
		}
		snprintf(buf, sizeof(buf), "%s", option);
		addOption(buf, info);
	}
	else if(!b00l)
	{
		if (currentOption <= maxOptions && optionCount <= maxOptions)
		{
			addSprite("CommonMenu", "shop_box_crossb", menuXCoord + 0.09, (((optionCount + 1) * 0.035f) + 0.1415f), 0.03f, 0.04f, 0.0f, 255, 255, 255, 255);
		}
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
		{
			addSprite("CommonMenu", "shop_box_crossb", menuXCoord + 0.09, ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.2175f), 0.03f, 0.04f, 0.0f, 255, 255, 255, 255);
		}
		snprintf(buf, sizeof(buf), "%s", option);
		addOption(buf, info);
	}
}

float IMGBoolX = 0.945f;
float IMGBoolY = 0.139f;
float IMGBoolScaleX = 0.028f;
float IMGBoolScaleY = 0.044f;

void AddIMGBool(char *option, bool BOOL, char *info = NULL)
{
	char buf[120];
	if (BOOL)
	{
		snprintf(buf, sizeof(buf), "%s", option);
		addOption(buf, info);
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			addSprite("commonmenu", "Shop_Box_TickB", IMGBoolX, (optionCount * 0.035f + IMGBoolY), IMGBoolScaleX, IMGBoolScaleY, 0, 255, 255, 255, 255);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			addSprite("commonmenu", "Shop_Box_TickB", IMGBoolX, ((optionCount - (currentOption - maxOptions)) * 0.035f + IMGBoolY), IMGBoolScaleX, IMGBoolScaleY, 0, 255, 255, 255, 255);
	}
	else
	{
		snprintf(buf, sizeof(buf), "%s", option);
		addOption(buf, info);
		if (currentOption <= maxOptions && optionCount <= maxOptions)
			addSprite("commonmenu", "shop_box_crossb", IMGBoolX, (optionCount * 0.035f + IMGBoolY), IMGBoolScaleX, IMGBoolScaleY, 0, 255, 255, 255, 255);
		else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
			addSprite("commonmenu", "shop_box_crossb", IMGBoolX, ((optionCount - (currentOption - maxOptions)) * 0.035f + IMGBoolY), IMGBoolScaleX, IMGBoolScaleY, 0, 255, 255, 255, 255);
	}
}

template<typename TYPE>
void addCustomBoolOption(char *option, TYPE value, TYPE match, char *info = NULL)
{
	char buf[120];
	if (value == match)
	{
		snprintf(buf, sizeof(buf), "%s: On", option);
		addOption(buf, info);
	}
	else
	{
		snprintf(buf, sizeof(buf), "%s: Off", option);
		addOption(buf, info);
	}
}
void varXYCoord(char *var)
{
	unsigned char* string = (unsigned char*)var;
	int str = strlen((char*)string);
	float len = str * 0.0035f;

	if (currentOption <= maxOptions && optionCount <= maxOptions)
	{
		drawText(var, optionsFont, textXCoord - len + 0.1975, (optionCount * 0.035f + 0.125f), 0.4f, 0.4f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 1);
	}
	else if ((optionCount > (currentOption - maxOptions)) && optionCount <= currentOption)
	{
		drawText(var, optionsFont, textXCoord - len + 0.1975, ((optionCount - (currentOption - maxOptions)) * 0.035f + 0.125f), 0.4f, 0.4f, optionsRed, optionsGreen, optionsBlue, optionsOpacity, 1);
	}
}
void addIntOption(char *option, int *var, int min, int max, bool keyboard, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: ", option);
	addOption(buf, info);

	char bufvar[30];
	snprintf(bufvar, sizeof(bufvar), "[ %i ]", *var);
	varXYCoord(bufvar);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = min;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= min)
				*var = max;
			else
				*var = *var - 1;
		}
		if (keyboard)
		{
			squareInstruction = true;
			if (squarePress)
			{
				startKeyboard(0, "", (strlen(ItoS(max)) + 1));
				keyboardVar = var;
			}
		}
	}
}
void addFloatStringOption(char *option, float *var, float varIncrement, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %s ]", option, FtoS(*var));
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + varIncrement;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - varIncrement;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + varIncrement;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - varIncrement;
			}
		}
	}
}
void addBoolFloatOption(char *option, float *var, bool b00l, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %f ]", option, *var);
	addBoolOption(buf, b00l, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.01f;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.01f;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.01f;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.01f;
			}
		}
	}
}
void addFloatOption(char *option, float *var, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %g ]", option, *var);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.008f;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.008f;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + 0.008f;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - 0.008f;
			}
		}
	}
}
void addCustomFloatOption(char *option, float *var, float varIncrement, float min, float max, bool holdPress, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %g ]", option, *var);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (holdPress)
		{
			if (fastRightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + varIncrement;
			}
			else if (fastLeftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - varIncrement;
			}
		}
		else
		{
			if (rightPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var >= max)
					*var = min;
				else
					*var = *var + varIncrement;
			}
			else if (leftPress)
			{
				playSound("NAV_UP_DOWN");
				if (*var <= min)
					*var = max;
				else
					*var = *var - varIncrement;
			}
		}
	}
}
void addCharOption(char *optionName, char *string, int *var, int max, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %s ]", optionName, string);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = 0;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= 0)
				*var = max;
			else
				*var = *var - 1;
		}
	}
}
void addCharCustomOption(char *string, int *var, int max, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "[ %s ]", string);
	addOption(buf, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = 0;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= 0)
				*var = max;
			else
				*var = *var - 1;
		}
	}
}
void addCharBoolOption(char *optionName, bool b00l, char *string, int *var, int max, char *info = NULL)
{
	char buf[120];
	snprintf(buf, sizeof(buf), "%s: [ %s ]", optionName, string);
	addBoolOption(buf, b00l, info);
	if (currentOption == optionCount)
	{
		lrInstruction = true;
		if (rightPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var >= max)
				*var = 0;
			else
				*var = *var + 1;
		}
		else if (leftPress)
		{
			playSound("NAV_UP_DOWN");
			if (*var <= 0)
				*var = max;
			else
				*var = *var - 1;
		}
	}
}
void addKeyboardOption(char *option, int action, char *defaultText, int maxLength, char *info = NULL)
{
	addOption(option, info);
	if (currentOption == optionCount)
	{
		xInstruction = true;
		if (optionPress)
			startKeyboard(action, defaultText, maxLength);
	}
}
#pragma endregion



void normalMenuActions()
{
	UI::HIDE_HELP_TEXT_THIS_FRAME();
	CAM::SET_CINEMATIC_BUTTON_ACTIVE(0);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(10);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(6);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(7);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(9);
	UI::HIDE_HUD_COMPONENT_THIS_FRAME(8);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 19);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 20);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 21);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 27);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 54);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 123);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 124);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 125);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 126);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 138);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 139);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 140);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 177);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 178);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 179);
	CONTROLS::DISABLE_CONTROL_ACTION(0, 207);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 166);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 167);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 177);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 178);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 193);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 194);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 195);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 202);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 203);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 204);
	CONTROLS::SET_INPUT_EXCLUSIVE(2, 205);

	if (optionCount > maxOptions)
	{
		GRAPHICS::DRAW_RECT(menuXCoord, 0.300f, 0.200f, 0.285f, backgroundRed, backgroundGreen, backgroundBlue, backgroundOpacity); //Background

		if (currentOption > maxOptions)
		{
			GRAPHICS::DRAW_RECT(menuXCoord, ((maxOptions * 0.035f) + 0.1415f), 0.20f, 0.031f, bannerRectRed, bannerRectGreen, bannerRectBlue, scrollerOpacity);
			addSprite("helicopterhud", "hud_corner", (textXCoord + 0.002f), ((maxOptions * 0.035f) + 0.1315f), 0.025f, 0.025f, 0, 255, 255, 255, 255);
			addSprite("helicopterhud", "hud_corner", (textXCoord + 0.188f), ((maxOptions * 0.035f) + 0.1515f), 0.025f, 0.025f, 180, 255, 255, 255, 255);
	
			GRAPHICS::DRAW_RECT(0.965f, ((maxOptions * 0.035f) + 0.1415f), 0.0130f, 0.031f, 255, 0, 0, 255);
		}
		else
		{
			GRAPHICS::DRAW_RECT(menuXCoord, ((currentOption * 0.035f) + 0.1415f), 0.20f, 0.031f, bannerRectRed, bannerRectGreen, bannerRectBlue, scrollerOpacity);
			addSprite("helicopterhud", "hud_corner", (textXCoord + 0.002f), ((currentOption * 0.035f) + 0.1315f), 0.025f, 0.025f, 0, 255, 255, 255, 255);
			addSprite("helicopterhud", "hud_corner", (textXCoord + 0.188f), ((currentOption * 0.035f) + 0.1515f), 0.025f, 0.025f, 180, 255, 255, 255, 255);
		
			GRAPHICS::DRAW_RECT(0.965f, ((currentOption * 0.035f) + 0.1415f), 0.0130f, 0.031f, 255, 0, 0, 255);
		}
	}
	else
	{
		GRAPHICS::DRAW_RECT(menuXCoord, 0.300f, 0.200f, 0.285f, backgroundRed, backgroundGreen, backgroundBlue, backgroundOpacity); //Background
		GRAPHICS::DRAW_RECT(menuXCoord, ((currentOption * 0.035f) + 0.1415f), 0.20f, 0.031f, bannerRectRed, bannerRectGreen, bannerRectBlue, scrollerOpacity);
		addSprite("helicopterhud", "hud_corner", (textXCoord + 0.002f), ((currentOption * 0.035f) + 0.1315f), 0.025f, 0.025f, 0, 255, 255, 255, 255);
		addSprite("helicopterhud", "hud_corner", (textXCoord + 0.188f), ((currentOption * 0.035f) + 0.1515f), 0.025f, 0.025f, 180, 255, 255, 255, 255);

		GRAPHICS::DRAW_RECT(0.965f, ((currentOption * 0.035f) + 0.1415f), 0.0130f, 0.031f, 255, 0, 0, 255);
	}
	if (!GAMEPLAY::IS_STRING_NULL_OR_EMPTY(infoText))
	{
		if (optionCount > maxOptions)
		{
			drawText(infoText, optionsFont, menuXCoord, ((maxOptions + 1) * 0.035f + 0.125f), 0.4f, 0.4f, bannerTextRed, bannerTextGreen, bannerTextBlue, bannerTextOpacity, true);
			GRAPHICS::DRAW_RECT(menuXCoord, (((maxOptions + 1) * 0.035f) + 0.1415f), 0.20f, 0.035f, bannerRectRed, bannerRectGreen, bannerRectBlue, bannerRectOpacity); //Info Box
		}
		else
		{
			drawText(infoText, optionsFont, menuXCoord, ((optionCount + 1) * 0.035f + 0.125f), 0.4f, 0.4f, bannerTextRed, bannerTextGreen, bannerTextBlue, bannerTextOpacity, true);
			GRAPHICS::DRAW_RECT(menuXCoord, (((optionCount + 1) * 0.035f) + 0.1415f), 0.20f, 0.035f, bannerRectRed, bannerRectGreen, bannerRectBlue, bannerRectOpacity); //Info Box
		}
	}

	char buf1[100];
	snprintf(buf1, sizeof(buf1), "License: ~c~~h~Free");
	drawText(buf1, 4, menuXCoord, 0.44f, 0.095f, 0.472f, 255, 255, 255, 255, true);


	GRAPHICS::DRAW_RECT(menuXCoord, 0.454f, 0.200f, 0.03f, 97, 4, 99, 255); // Footer
	DrawSprite("mpentry", "mp_modeselected_gradient", menuXCoord, 0.454f, 0.240f, 0.0384f, 0, 156, 7, 255, 175);// Footer Gradient
	
	GRAPHICS::DRAW_RECT(0.965f, 0.300f, 0.0130f, 0.284f, 0, 0, 0, 100);

	if (instructions)
	{
		if (xInstruction)
			addInstruction(BUTTON_A, "Select");
		if (squareInstruction)
			addInstruction(BUTTON_X, "Keyboard");
		if (squareInstruction2)
			addInstruction(BUTTON_X, "Favorite");
		if (squareInstruction3)
			addInstruction(BUTTON_X, "Delete");
		if (squareInstruction4)
			addInstruction(BUTTON_X, "Delete All");
		if (lrInstruction)
			addInstruction(BUTTON_DPAD_LEFT_RIGHT, "Scroll");
		addInstruction(BUTTON_DPAD_UP_DOWN, "Scroll");
		addInstruction(BUTTON_B, "Back");
		instructionsClose();
	}
}

bool inputButtonsPressed = false, menuopened = false;
bool aButtonPressed = false, bButtonPressed = false, DupButtonPressed = false, DdownButtonPressed = false, dpadRightPressed = false, dpadLeftPressed = false, xButtonPressed = false;
bool resetFastScrollUp = true, resetFastScrollDown = true;
Input *menuInputHandler;

void monitorButtons()
{
    if (submenu == Closed)
    {
        menuInputHandler->UpdateInput();
		if (MenuOpenClose == 0)
		{
			if (menuInputHandler->DPadRightDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed)
			{
				menuopened = !menuopened;
				inputButtonsPressed = true;
			}
			else if (!menuInputHandler->DPadRightDown() && !menuInputHandler->XButtonDown())
			{
				inputButtonsPressed = false;
			}
		} else {

			if (menuInputHandler->DPadLeftDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed)
			{
				menuopened = !menuopened;
				inputButtonsPressed = true;
			}
			else if (!menuInputHandler->DPadLeftDown() && !menuInputHandler->XButtonDown())
			{
				inputButtonsPressed = false;
			}
		}

        if (menuopened && inputButtonsPressed)
		{
            if (submenuLevel <= 0)
			{
                submenu = Main_Menu;
                submenuLevel = 0;
                currentOption = 1;
            } else {

                submenu = lastSubmenu[submenuLevel];
                if (lastOption[submenuLevel] != 0)
				{
                    currentOption = lastOption[submenuLevel];
                } else { currentOption = 1; }
            }
            playSound("YES");
        }
    } else {

        menuInputHandler->UpdateInput();
		if (MenuOpenClose == 0)
		{
			if (menuInputHandler->DPadRightDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed)
			{
				menuopened = !menuopened;
				inputButtonsPressed = true;
			}
			else if (!menuInputHandler->DPadRightDown() && !menuInputHandler->XButtonDown())
				inputButtonsPressed = false;
		} else {

			if (menuInputHandler->DPadLeftDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed)
			{
				menuopened = !menuopened;
				inputButtonsPressed = true;
			}
			else if (!menuInputHandler->DPadLeftDown() && !menuInputHandler->XButtonDown())
				inputButtonsPressed = false;
		}
 
        if (!menuopened && inputButtonsPressed)
        {
			hasBeenUsed = true;
            lastSubmenu[submenuLevel] = submenu;
            lastOption[submenuLevel] = currentOption;
            submenu = Closed;
        }

        if (menuInputHandler->BButtonDown() && !bButtonPressed)
		{
			hasBeenUsed = true;
            submenu = lastSubmenu[submenuLevel - 1];
            currentOption = lastOption[submenuLevel - 1];
            submenuLevel--;
            playSound("Back");
            bButtonPressed = true;
        } else if (!menuInputHandler->BButtonDown())
            bButtonPressed = false;
 
        if (menuInputHandler->AButtonDown() && !aButtonPressed)
		{
			hasBeenUsed = true;
            optionPress = true;
            AUDIO::PLAY_SOUND_FRONTEND(-1, "Pin_Good", "DLC_HEIST_BIOLAB_PREP_HACKING_SOUNDS");
            aButtonPressed = true;
        } else if (!menuInputHandler->AButtonDown())
            aButtonPressed = false;

        if (menuInputHandler->DpadUp())
        {
            resetFastScrollUp = false;
            controlPressedTimeout++;
            if (controlPressedTimeout > 5)
            {
                currentOption = currentOption - 1;
                if (currentOption < 1)
                {
                    currentOption = optionCount;
					hasBeenUsed = true;
                }
                playSound("NAV_UP_DOWN");
            }
        } else resetFastScrollUp = true;

        if (menuInputHandler->DpadDown())
        {
            resetFastScrollDown = false;
            controlPressedTimeout++;
            if (controlPressedTimeout > 5)
            {
                currentOption = currentOption + 1;
                if (currentOption > optionCount)
                {
                    currentOption = 1;
					hasBeenUsed = true;
                }
                playSound("NAV_UP_DOWN");
            }
        } else resetFastScrollDown = true;

        if (menuInputHandler->DPadRightDown() && !dpadRightPressed)
        {
			hasBeenUsed = true;
            rightPress = true;
            dpadRightPressed = true;
        } else if (!menuInputHandler->DPadRightDown())
            dpadRightPressed = false;

        if (menuInputHandler->DPadLeftDown() && !dpadLeftPressed)
        {
			hasBeenUsed = true;
            leftPress = true;
            dpadLeftPressed = true;
        } else if (!menuInputHandler->DPadLeftDown())
            dpadLeftPressed = false;

        if (menuInputHandler->DPadRightDown())
        {
			hasBeenUsed = true;
            fastRightPress = true;
        }

        if (menuInputHandler->DPadLeftDown())
        {
			hasBeenUsed = true;
            fastLeftPress = true;
        }

        if (menuInputHandler->XButtonDown() && !xButtonPressed)
        {
			hasBeenUsed = true;
            squarePress = true;
            xButtonPressed = true;
        } else if (!menuInputHandler->XButtonDown())
            xButtonPressed = false;
 
        if (resetFastScrollUp && resetFastScrollDown)
            controlPressedTimeout = 0;
 
        if (menuInputHandler->DpadUp() && !DupButtonPressed)
		{
            currentOption--;
            if (currentOption < 1)
            {
                currentOption = optionCount;
				hasBeenUsed = true;
            }
            playSound("NAV_UP_DOWN");
            DupButtonPressed = true;
        } else if (!menuInputHandler->DpadUp())
            DupButtonPressed = false;
 
        if (menuInputHandler->DpadDown() && !DdownButtonPressed)
		{
            currentOption++;
            if (currentOption > optionCount)
            {
                currentOption = 1;
				hasBeenUsed = true;
            }
            playSound("NAV_UP_DOWN");
            DdownButtonPressed = true;
        } else if (!menuInputHandler->DpadDown())
            DdownButtonPressed = false;
    }
}



union ScriptArg
{
	unsigned int ui;
	float f; int i;
	char *str;
};


namespace SCRIPT
{
	static void TRIGGER_SCRIPT_EVENT(int always1, ScriptArg *argsStruct, int argsStructCount, int playerbitset) { invoke<Void>(0x54763B35, always1, argsStruct, argsStructCount, playerbitset); } // 0x54763B35
};
namespace PlayerMods
{
	namespace eventCreator
	{
		void callScriptEvent(ScriptArg *args, int argsCount, unsigned int playerBits)
		{
			SCRIPT::TRIGGER_SCRIPT_EVENT(1, args, argsCount, playerBits);
		}
	};
};
void givePlayerRP(int player, int amount, int unk1 = -1, int unk2 = 1)
{
	ScriptArg args[5];
	args[0].i = 0xD8;//216
	args[1].i = player;
	args[2].i = 0xffffffff - amount + 1;//46
	args[3].i = 0;//-1   0 is partner, else is gen
	args[4].i = 0;
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 5, bits);
}
void RemoveMoney2(int player, int ammount)
{
	ScriptArg args[5];
	args[0].i = 0x138;
	args[1].i = player;
	args[2].i = ammount;
	args[3].i = 0;
	args[4].i = 0;
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 5, bits);
}

int RankToRP(int rank)
{
	int RP[] = { 2165850 };
	if (rank < 120)
		return RP[rank - 1];
	int RepPoints = 2195450;
	if (rank == 121)
		return RepPoints;
	RepPoints += (((rank - 120) * 25) + 29600) * ((rank - 121));
	return RepPoints;
}

namespace Veh_Create
{
	int Create_Veh(int hash, float x, float y, float z)
	{
		int model = hash;
		if (STREAMING::IS_MODEL_IN_CDIMAGE(model) && STREAMING::IS_MODEL_A_VEHICLE(model))
		{
			STREAMING::REQUEST_MODEL(model);
			if (STREAMING::HAS_MODEL_LOADED(model) == true)
			{
				Vehicle veh = VEHICLE::CREATE_VEHICLE(model, x, y, z, ENTITY::GET_ENTITY_HEADING(PLAYER::PLAYER_PED_ID()), 1, 0);
				if (ENTITY::DOES_ENTITY_EXIST(veh))
				{
					VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(veh);
					return veh;
				}
			}
		}
		else
		{
			return 0;
		}
	}
}
namespace Mdz_Pl
{
	int v7231(int player)
	{
		int NetHandleBuffer = 0x10070200;
		NETWORK::NETWORK_HANDLE_FROM_PLAYER1(player, NetHandleBuffer, 13);
		return NetHandleBuffer;
	}
	void MessagePl(char *text, int player)
	{
		if (player != PLAYER::PLAYER_ID())
		{
			NETWORK::NETWORK_SEND_TEXT_MESSAGE1(text, v7231(player));
		}
		else
		{
			UI::SET_TEXT_FONT(0);
			UI::_0x574EE85C("STRING");
			UI::_ADD_TEXT_COMPONENT_STRING(text);
			UI::_DRAW_NOTIFICATION(false, true);
		}
	}
}


void SendStats(unsigned int a_uiRecevPlayerIndex, unsigned int a_uiStatHash, unsigned int a_uiAmount)
{
	unsigned int l_uiPlayerStruct = *(unsigned int*)(0x83C9730C + (a_uiRecevPlayerIndex << 2));
	((void(*)(uint a, uint b, uint c))0x830E6BB0)(a_uiStatHash, a_uiAmount, l_uiPlayerStruct);
}

void CashGiftAll()
{
	for (int i = 0; i < 18; i++)
	{
		if (i != PLAYER::PLAYER_ID()) {
			SendStats(i, GAMEPLAY::GET_HASH_KEY("CASH_GIFT_NEW"), 1000000000);
			SendStats(i, GAMEPLAY::GET_HASH_KEY("MP0_CASH_GIFT_NEW"), 1000000000);
			SendStats(i, GAMEPLAY::GET_HASH_KEY("MP1_CASH_GIFT_NEW"), 1000000000);
			SendStats(i, GAMEPLAY::GET_HASH_KEY("MP2_CASH_GIFT_NEW"), 1000000000);
		}
	}
}


void CrewRank()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_LOCAL_XP_0"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_LOCAL_XP_1"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_LOCAL_XP_2"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_LOCAL_XP_3"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_LOCAL_XP_4"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_GLOBAL_XP_0"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_GLOBAL_XP_1"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_GLOBAL_XP_2"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_GLOBAL_XP_3"), 900000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CREW_GLOBAL_XP_4"), 900000);
	}
}

void CashGiftplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("CASH_GIFT_NEW"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CASH_GIFT_NEW"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CASH_GIFT_NEW"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CASH_GIFT_NEW"), 1000000000);
	}
}

void Fireworksplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_1_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_1_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_1_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_1_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_1_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_2_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_2_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_2_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_2_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_2_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_3_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_3_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_3_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_3_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_3_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_4_WHITE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_4_RED"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FIREWORK_TYPE_4_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FIREWORK_TYPE_4_BLUE"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FIREWORK_TYPE_4_BLUE"), 1000000000);
	}
}
void BadSport()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_CHAR_IS_BADSPORT"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_OVERALL_BADSPORT"), 1000);
	}
}
void MaxSkillplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STAM"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STRN"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_LUNG"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_DRIV"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_FLY"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_SHO"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_SCRIPT_INCREASE_STL"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STAM"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STRN"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_LUNG"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_DRIV"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_FLY"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_SHO"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_SCRIPT_INCREASE_STL"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_STAM"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_STRN"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_LUNG"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_DRIV"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_FLY"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_SHO"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_SCRIPT_INCREASE_STL"), 100);
	}
}

void MaxSnackplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_YUM_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_HEALTH_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NO_BOUGHT_EPIC_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_OF_ORANGE_BOUGHT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CIGARETTES_BOUGHT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_YUM_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_HEALTH_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NO_BOUGHT_EPIC_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_OF_ORANGE_BOUGHT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CIGARETTES_BOUGHT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NO_BOUGHT_YUM_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NO_BOUGHT_HEALTH_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NO_BOUGHT_EPIC_SNACKS"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NUMBER_OF_ORANGE_BOUGHT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CIGARETTES_BOUGHT"), 1000000000);
	}
}

void MaxArmorplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_1_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_2_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_3_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_4_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_MP_CHAR_ARMOUR_5_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_1_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_2_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_3_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_4_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_MP_CHAR_ARMOUR_5_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_MP_CHAR_ARMOUR_1_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_MP_CHAR_ARMOUR_2_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_MP_CHAR_ARMOUR_3_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_MP_CHAR_ARMOUR_4_COUNT"), 1000000000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_MP_CHAR_ARMOUR_5_COUNT"), 1000000000);
	}
}

void ChromeRimsplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_CAPTURES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_DROPOFF_CAP_PACKAGES"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_CARRIER_CAPTURE"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEISTS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEIST_SETUP_JOB"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_NIGHTVISION_KILLS"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_LAST_TEAM_STANDINGS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_ONLY_PLAYER_ALIVE_LTS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_CAPTURES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_DROPOFF_CAP_PACKAGES"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_CARRIER_CAPTURE"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEISTS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEIST_SETUP_JOB"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_NIGHTVISION_KILLS"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_LAST_TEAM_STANDINGS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_ONLY_PLAYER_ALIVE_LTS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_WIN_CAPTURES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_DROPOFF_CAP_PACKAGES"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_KILL_CARRIER_CAPTURE"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FINISH_HEISTS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FINISH_HEIST_SETUP_JOB"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_NIGHTVISION_KILLS"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_WIN_LAST_TEAM_STANDINGS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_ONLY_PLAYER_ALIVE_LTS"), 50);

	}
}

void RedesignPromtplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_FM_CHANGECHAR_ASKED"), 0);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_FM_CHANGECHAR_ASKED"), 0);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_FM_CHANGECHAR_ASKED"), 0);
	}
}

void NoRecoilplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("SHOOTING_ABILITY"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("STAMINA"), 150);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("STRENGTH"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("LUNG_CAPACITY"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("WHEELIE_ABILITY"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("FLYING_ABILITY"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("STEALTH_ABILITY"), 1000);
	}
}

void VEHICLEplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_VEHICLE_2_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_VEHICLE_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_VEHICLE_2_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_VEHICLE_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_VEHICLE_2_UNLCK"), -1);
	}
}

void stuff3player()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_WINS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_TDM_MVP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_DM_TOTALKILLS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMATTGANGHQ"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMBBETWIN"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINEVERYGAMEMODE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRACEWORLDRECHOLDER"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMFULLYMODDEDCAR"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMMOSTKILLSSURVIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMKILL3ANDWINGTARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMKILLBOUNTY"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMREVENGEKILLSDM"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMKILLSTREAKSDM"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_HOLD_UP_SHOPS"), 20);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_LAPDANCES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_SECURITY_CARS_ROBBED"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_PLAYER_HEADSHOTS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_DB_PLAYER_KILLS"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_WINS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_TDM_MVP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_DM_TOTALKILLS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMATTGANGHQ"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMBBETWIN"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINEVERYGAMEMODE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRACEWORLDRECHOLDER"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMFULLYMODDEDCAR"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMMOSTKILLSSURVIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMKILL3ANDWINGTARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMKILLBOUNTY"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMREVENGEKILLSDM"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMKILLSTREAKSDM"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_HOLD_UP_SHOPS"), 20);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_LAPDANCES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_SECURITY_CARS_ROBBED"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_PLAYER_HEADSHOTS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_DB_PLAYER_KILLS"), 1000);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FM_DM_WINS"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FM_TDM_MVP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FM_DM_TOTALKILLS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMATTGANGHQ"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMBBETWIN"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMWINEVERYGAMEMODE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMRACEWORLDRECHOLDER"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMFULLYMODDEDCAR"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMMOSTKILLSSURVIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMKILL3ANDWINGTARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMKILLBOUNTY"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMREVENGEKILLSDM"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMKILLSTREAKSDM"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_HOLD_UP_SHOPS"), 20);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_LAPDANCES"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_SECURITY_CARS_ROBBED"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_PLAYER_HEADSHOTS"), 500);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_DB_PLAYER_KILLS"), 1000);
	}
}

void stuff2player()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_1_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_2_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_3_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_4_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_5_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_6_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_7_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_8_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_9_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_10_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_11_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_12_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE7"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE8"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE9"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE10"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE11"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_KIT_FM_PURCHASE12"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_1_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_2_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_3_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_4_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_5_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_6_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_7_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_8_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_9_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_10_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_11_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_12_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE7"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE8"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE9"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE10"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE11"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_KIT_FM_PURCHASE12"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_1_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_2_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_3_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_4_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_5_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_6_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_7_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_8_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_9_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_10_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_11_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_12_FM_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE7"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE8"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE9"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE10"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE11"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_KIT_FM_PURCHASE12"), -1);
	}
}

void stuffplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMHORDWAVESSURVIVE"), 10);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMPICKUPDLCCRATE1ST"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_CAPTURE_DONT_DYING"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_DO_HEIST_AS_MEMBER"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_PICKUP_CAP_PACKAGES"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FINISH_HEIST_NO_DAMAGE"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_WIN_GOLD_MEDAL_HEISTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_TEAM_YOURSELF_LTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_KILL_PSYCHOPATHS"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_DO_HEIST_AS_THE_LEADER"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_STORE_20_CAR_IN_GARAGES"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMHORDWAVESSURVIVE"), 10);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMPICKUPDLCCRATE1ST"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_CAPTURE_DONT_DYING"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_DO_HEIST_AS_MEMBER"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_PICKUP_CAP_PACKAGES"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FINISH_HEIST_NO_DAMAGE"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_WIN_GOLD_MEDAL_HEISTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_TEAM_YOURSELF_LTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_KILL_PSYCHOPATHS"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_DO_HEIST_AS_THE_LEADER"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_STORE_20_CAR_IN_GARAGES"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMHORDWAVESSURVIVE"), 10);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMPICKUPDLCCRATE1ST"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_WIN_CAPTURE_DONT_DYING"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_DO_HEIST_AS_MEMBER"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_PICKUP_CAP_PACKAGES"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FINISH_HEIST_NO_DAMAGE"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_WIN_GOLD_MEDAL_HEISTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_KILL_TEAM_YOURSELF_LTS"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_KILL_PSYCHOPATHS"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_DO_HEIST_AS_THE_LEADER"), 25);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_STORE_20_CAR_IN_GARAGES"), 1);
	}
}

void idkplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_0"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_0"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_1"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_1"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_2"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_2"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_3"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_3"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_4"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_4"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_5"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("DLC_MP_IND_M_PHEAD_6_5"), 1);
	}
}

void vehmodsplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_2_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_3_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_4_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_5_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_6_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_FM_CARMOD_7_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRALLYWONDRIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMRALLYWONNAV"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINSEARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FMWINAIRRACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_TURBO_STARTS_IN_RACE"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_USJS_COMPLETED"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_AWD_FM_RACES_FASTEST_LAP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_2_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_3_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_4_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_5_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_6_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_FM_CARMOD_7_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRALLYWONDRIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMRALLYWONNAV"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINSEARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FMWINAIRRACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_TURBO_STARTS_IN_RACE"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_USJS_COMPLETED"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_AWD_FM_RACES_FASTEST_LAP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_NUMBER_SLIPSTREAMS_IN_RACE"), 100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_RACES_WON"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_1_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_2_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_3_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_4_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_5_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_6_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_FM_CARMOD_7_UNLCK"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMRALLYWONDRIVE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMRALLYWONNAV"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMWINSEARACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FMWINAIRRACE"), 1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NUMBER_TURBO_STARTS_IN_RACE"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_USJS_COMPLETED"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_AWD_FM_RACES_FASTEST_LAP"), 50);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_NUMBER_SLIPSTREAMS_IN_RACE"), 100);
	}
}

void CLTHSplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_1"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CLTHS_AVAILABLE_HAIR_7"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_1"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CLTHS_AVAILABLE_HAIR_7"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_1"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_2"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_3"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_4"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_5"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_6"), -1);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CLTHS_AVAILABLE_HAIR_7"), -1);
	}
}

void killsplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 500);
	}
}

void deathsplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MPPLY_DEATHS_PLAYER"), 500);
	}
}

void rankupplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), -6433100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_XP_FM"), -6433100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_XP_FM"), -6433100);
	}
}

void rankdownplayer()
{
	if (selectedPlayer != PLAYER::PLAYER_ID()) {
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP0_CHAR_XP_FM"), 6433100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP1_CHAR_XP_FM"), 6433100);
		SendStats(selectedPlayer, GAMEPLAY::GET_HASH_KEY("MP2_CHAR_XP_FM"), 6433100);
	}
}



void setPlayerStats(int player) {
	ScriptArg args[12];
	args[0].i = 150;
	args[1].i = player;
	args[2].i = 0;
	args[3].i = 88;//int
	args[4].i = 34;//bool
	args[5].i = 1;//float
	args[6].i = 2949;//int
	args[7].i = 228;//bool
	args[8].i = 228;//float
	args[9].i = 0;//value to set for the int ones. This is added on to the previous value set for the stat
	args[10].i = 0;//value to set for the float ones. This is added on to the previous value set for the stat
	args[11].i = 0;//value to set for the bool ones
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 12, bits);
}

enum {
	EVENT_STAT_INT_0 = 3,
	EVENT_STAT_INT_1 = 6,
	EVENT_STAT_BOOL_0 = 4,
	EVENT_STAT_BOOL_1 = 7,
	EVENT_STAT_FLOAT_0 = 5,
	EVENT_STAT_FLOAT_1 = 8,
	EVENT_STAT_VALUE_INT = 9,
	EVENT_STAT_VALUE_FLOAT = 10,
	EVENT_STAT_VALUE_BOOL = 11
};
void setupDefaultStatEvent(int player, ScriptArg *args) {
	args[0].i = 150;
	args[1].i = player;
	args[2].i = player;//unknown value
	args[3].i = 88;//int
	args[4].i = 34;//bool
	args[5].i = 1;//float
	args[6].i = 2949;//int
	args[7].i = 228;//bool
	args[8].i = 228;//float
	args[9].i = 0;//value to set for the int ones. This is added on to the previous value set for the stat
	args[10].i = 0;//value to set for the float ones. This is added on to the previous value set for the stat
	args[11].i = 0;//value to set for the bool ones
}
bool globalStatVersionType = 1;//this decides whether I use the first 3 (0) or the last 3 (1)
void setPlayerStatInt(int player, int statIndex, int statValue, bool type = globalStatVersionType) {
	statValue = 0xFFFFFFFF - statValue + 1;
	ScriptArg args[12];
	setupDefaultStatEvent(player, args);
	printf("%i\n", args[6].i);
	args[EVENT_STAT_VALUE_INT].ui = *(unsigned int*)(&statValue);
	args[EVENT_STAT_VALUE_BOOL].i = statValue;
	args[EVENT_STAT_VALUE_FLOAT].f = statValue;
	if (type == 0)
		args[EVENT_STAT_INT_0].i = statIndex;
	else
		args[EVENT_STAT_INT_1].i = statIndex;
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 12, bits);
}
void setPlayerStatBool(int player, int statIndex, bool statValue, bool type = globalStatVersionType) {
	ScriptArg args[12];
	setupDefaultStatEvent(player, args);
	args[EVENT_STAT_VALUE_INT].i = *(unsigned int*)(&statValue);
	args[EVENT_STAT_VALUE_BOOL].i = statValue;
	args[EVENT_STAT_VALUE_FLOAT].f = statValue;
	if (type == 0)
		args[EVENT_STAT_BOOL_0].i = statIndex;
	else
		args[EVENT_STAT_BOOL_1].i = statIndex;
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 12, bits);
}
void setPlayerStatFloat(int player, int statIndex, float statValue, bool type = globalStatVersionType) {
	ScriptArg args[12];
	setupDefaultStatEvent(player, args);
	args[EVENT_STAT_VALUE_INT].i = *(unsigned int*)(&statValue);
	args[EVENT_STAT_VALUE_BOOL].i = statValue;
	args[EVENT_STAT_VALUE_FLOAT].f = statValue;
	if (type == 0)
		args[EVENT_STAT_FLOAT_0].i = statIndex;
	else
		args[EVENT_STAT_FLOAT_1].i = statIndex;
	unsigned int bits = (1 << player);
	PlayerMods::eventCreator::callScriptEvent(args, 12, bits);
}

void setPlayerRpStat(int player, int rp) {
	setPlayerStatInt(player, 626, rp, true);
}
void setPlayerSnackStat(int player, int amt) {
	setPlayerStatInt(player, 1261, amt, true);
}
void setPlayerMentalStat(int player, float amt) {
	setPlayerStatFloat(player, 133, amt, true);
}


void messagecohosst(int player, char *text, int font)
{
	if (player == PLAYER::PLAYER_ID())
	{
		UI::SET_TEXT_FONT(font);
		UI::_0x574EE85C("STRING");
		UI::_ADD_TEXT_COMPONENT_STRING(text);
		UI::_DRAW_NOTIFICATION(false, true);
	}
	else
	{
		int data;
		NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &data, 13);
		NETWORK::NETWORK_SEND_TEXT_MESSAGE(text, &data);


	}
}
namespace netreq
{
	bool hasent(uint entity)
	{
		return NETWORK::NETWORK_HAS_CONTROL_OF_ENTITY(entity);
	}
	void reqent(uint entity)
	{
		if (!hasent(entity))
		{
			NETWORK::NETWORK_REQUEST_CONTROL_OF_ENTITY(entity);
			int netid = NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(entity);
			NETWORK::NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(netid);
		}
	}
}
void NotifyAboveMap1(char* Text)
{
	UI::_0x574EE85C("STRING");
	UI::_ADD_TEXT_COMPONENT_STRING3(Text);
	UI::_DRAW_NOTIFICATION(2000, 1);
}
void sendText1(int player, char *text)
{
	int NetHandleBuffer[2];
	NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &NetHandleBuffer[0], 13);
	NETWORK::NETWORK_SEND_TEXT_MESSAGE(text, &NetHandleBuffer[0]);
	NotifyAboveMap1(text);
}

namespace GiveMiniMenu
{
	void Max_Car_void(int player)
	{
		int VehicleHandle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(player));
		VEHICLE::SET_VEHICLE_MOD_KIT(VehicleHandle, 0);
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(VehicleHandle, "Exploit");
		VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(VehicleHandle, 5);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 18, 1);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 22, 1);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 16, 5, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 12, 2, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 11, 3, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 14, 14, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 15, 3, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 13, 2, 0);
		VEHICLE::SET_VEHICLE_WHEEL_TYPE(VehicleHandle, 6);
		VEHICLE::SET_VEHICLE_WINDOW_TINT(VehicleHandle, 5);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 23, 19, 1);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 0, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 1, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 2, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 3, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 4, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 5, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 6, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 7, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 8, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 9, 1, 0);
		VEHICLE::SET_VEHICLE_MOD(VehicleHandle, 10, 1, 0);
		VEHICLE::TOGGLE_VEHICLE_MOD(VehicleHandle, 20, 1);
		VEHICLE::SET_VEHICLE_TYRE_SMOKE_COLOR(VehicleHandle, 0, 0, 0);
	}
	bool RP_All_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int RP_All_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void RP_All(int player)
	{
		if (RP_All_Bool[player] == true)
		{
			RP_All_int[player] = RP_All_int[player] + 1;
			if (RP_All_int[player] < 1000)
			{
				//	givePlayerRP(player, -RankToRP(1337));//
				givePlayerRP(player, RankToRP(1337));//Derank
			}
			else
			{
				RP_All_Bool[player] = 0;
				RP_All_int[player] = false;
			}
		}
	}
	bool Money_All_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Money_All_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Money_All(int player)
	{
		if (Money_All_Bool[player] == true)
		{
			Money_All_int[player] = Money_All_int[player] + 1;
			if (Money_All_int[player] < 1000)
			{
				RemoveMoney2(player, 2147483647);
			}
			else
			{
				Money_All_Bool[player] = 0;
				Money_All_int[player] = false;
			}
		}
	}
	bool EX_All_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int EX_All_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Explode_All(int player)
	{
		if (EX_All_Bool[player] == true)
		{
			EX_All_int[player] = EX_All_int[player] + 1;
			if (EX_All_int[player] < 1000)
			{
				for (int i = 0; i < 18; i++)
				{
					if (i != PLAYER::PLAYER_PED_ID() && i != PLAYER::GET_PLAYER_PED(player))
					{
						Vector3 Pos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(i), true);
						FIRE::ADD_EXPLOSION(Pos.x, Pos.y, Pos.z, 27, 5.0, 1, 0, 0);
					}
				}
			}
			else
			{
				EX_All_Bool[player] = 0;
				EX_All_int[player] = false;
			}
		}
	}
	void Set_Color(int r, int g, int b, int base, int player)
	{
		int VehicleHandle = PED::GET_VEHICLE_PED_IS_USING(PLAYER::GET_PLAYER_PED(player));
		VEHICLE::SET_VEHICLE_MOD_KIT(VehicleHandle, 0);
		VEHICLE::SET_VEHICLE_COLOURS(VehicleHandle, base, base);
		VEHICLE::SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(VehicleHandle, r, g, b);
		VEHICLE::SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(VehicleHandle, r, g, b);
	}
	int Vehicle_Coord(char* model, float* coords)
	{
		return Veh_Create::Create_Veh(GAMEPLAY::GET_HASH_KEY(model), coords[0], coords[1], coords[2]);
	}
	void Money_Player(int index)
	{
		STREAMING::REQUEST_MODEL(0x113FD533);
		if (STREAMING::HAS_MODEL_LOADED(0x113FD533))
		{
			uint PICKUP_MONEY_CASE = GAMEPLAY::GET_HASH_KEY("PICKUP_MONEY_CASE");
			Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(index), true);
			int obj = OBJECT::CREATE_AMBIENT_PICKUP(PICKUP_MONEY_CASE, playerpos.x, playerpos.y, playerpos.z, 0, 40000, 0x113FD533, false, true);
			NETWORK::SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(NETWORK::NETWORK_GET_NETWORK_ID_FROM_ENTITY(obj), true);
			STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(0x113FD533);
		}
	}
	int GetHost()
	{
		return NETWORK::NETWORK_GET_HOST_OF_SCRIPT("freemode", -1, 0);
	}
	int GOAirport()
	{
		return (PLAYER::PLAYER_PED_ID(), -1113.672729, -2881.022949, 13.521091);
	}


	//	addTeleOptions("Airport", PLAYER::PLAYER_PED_ID(), -1102.2910, -2894.5160, 13.9467);
	bool TP_Host_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int TP_Host_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	void TPtoHost(int player)
	{
		if (TP_Host_Bool[player] == true)
		{
			TP_Host_int[player] = TP_Host_int[player] + 1;
			if (TP_Host_int[player] < 1000)
			{
				Entity EntityID = PLAYER::GET_PLAYER_PED(player);
				Vector3 Coord = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(player), 0);
				Vector3 Coord1 = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(GetHost()), 0);

				float Zheight;
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED(player), 1))
				{
					int EntityID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(player), 0);
				}
				else
				{
					int EntityID = PLAYER::GET_PLAYER_PED(player);
				}
				GRAPHICS::_START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE_2("scr_clown_appears", EntityID, 0, 0, 0, 0.0f, 0.0f, 0.0f, 0x60f0, 2, 0, 0, 0);
				GAMEPLAY::GET_GROUND_Z_FOR_3D_COORD(Coord.x, Coord.y, 5000, &Zheight);
				ENTITY::SET_ENTITY_COORDS(EntityID, Coord1.x, Coord1.y, Zheight, 1, 0, 0, 1);
			}
			else
			{
				TP_Host_int[player] = 0;
				TP_Host_Bool[player] = false;
			}
		}
	}

	bool TP_Airport_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int TP_Airport_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	void TPAirport(int player)
	{
		if (TP_Airport_Bool[player] == true)
		{
			TP_Airport_int[player] = TP_Airport_int[player] + 1;
			if (TP_Airport_int[player] < 1000)
			{
				Entity EntityID11 = PLAYER::GET_PLAYER_PED(player);
				Vector3 Coord11 = ENTITY::GET_ENTITY_COORDS(PLAYER::GET_PLAYER_PED(GOAirport()), 0);

				float Zheight11;
				if (PED::IS_PED_IN_ANY_VEHICLE(PLAYER::GET_PLAYER_PED(player), 1))
				{
					int EntityID = PED::GET_VEHICLE_PED_IS_IN(PLAYER::GET_PLAYER_PED(player), 0);
				}
				else
				{
					int EntityID = PLAYER::GET_PLAYER_PED(player);
				}

				ENTITY::SET_ENTITY_COORDS(EntityID11, Coord11.x, Coord11.y, Zheight11, 1, 1, 1, 1);
			}
			else
			{
				TP_Airport_int[player] = 0;
				TP_Airport_Bool[player] = false;
			}
		}
	}
	bool Car_Bool[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car(int player)
	{
		if (Car_Bool[player] == true)
		{
			Car_inttimeout[player] = Car_inttimeout[player] + 1;
			if (Car_inttimeout[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int[player] = Vehicle_Coord("T20", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int[player]) == true)
				{
					Car_inttimeout[player] = 0;
					Car_Bool[player] = false;
				}
			}
			else
			{
				Car_inttimeout[player] = 0;
				Car_Bool[player] = false;
			}
		}
	}
	bool Car_Bool1[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int1[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout1[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car1(int player)
	{
		if (Car_Bool1[player] == true)
		{
			Car_inttimeout1[player] = Car_inttimeout1[player] + 1;
			if (Car_inttimeout1[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int1[player] = Vehicle_Coord("OSIRIS", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int1[player]) == true)
				{
					Car_inttimeout1[player] = 0;
					Car_Bool1[player] = false;
				}
			}
			else
			{
				Car_inttimeout[player] = 0;
				Car_Bool1[player] = false;
			}
		}
	}
	bool Car_Bool2[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout2[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car2(int player)
	{
		if (Car_Bool2[player] == true)
		{
			Car_inttimeout2[player] = Car_inttimeout2[player] + 1;
			if (Car_inttimeout2[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int2[player] = Vehicle_Coord("ADDER", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int2[player]) == true)
				{
					Car_inttimeout2[player] = 0;
					Car_Bool2[player] = false;
				}
			}
			else
			{
				Car_inttimeout2[player] = 0;
				Car_Bool2[player] = false;
			}
		}
	}
	bool Car_Bool3[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int3[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout3[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car3(int player)
	{
		if (Car_Bool3[player] == true)
		{
			Car_inttimeout3[player] = Car_inttimeout3[player] + 1;
			if (Car_inttimeout3[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int3[player] = Vehicle_Coord("BULLET", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int3[player]) == true)
				{
					Car_inttimeout3[player] = 0;
					Car_Bool3[player] = false;
				}
			}
			else
			{
				Car_inttimeout3[player] = 0;
				Car_Bool3[player] = false;
			}
		}
	}
	bool Car_Bool4[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int4[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout4[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car4(int player)
	{
		if (Car_Bool4[player] == true)
		{
			Car_inttimeout4[player] = Car_inttimeout4[player] + 1;
			if (Car_inttimeout4[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int4[player] = Vehicle_Coord("CHEETAH", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int4[player]) == true)
				{
					Car_inttimeout4[player] = 0;
					Car_Bool4[player] = false;
				}
			}
			else
			{
				Car_inttimeout4[player] = 0;
				Car_Bool4[player] = false;
			}
		}
	}
	bool Car_Bool5[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int5[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout5[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car5(int player)
	{
		if (Car_Bool5[player] == true)
		{
			Car_inttimeout5[player] = Car_inttimeout5[player] + 1;
			if (Car_inttimeout5[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int5[player] = Vehicle_Coord("THELIBERATOR", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int5[player]) == true)
				{
					Car_inttimeout5[player] = 0;
					Car_Bool5[player] = false;
				}
			}
			else
			{
				Car_inttimeout5[player] = 0;
				Car_Bool5[player] = false;
			}
		}
	}
	bool Car_Bool6[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int6[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout6[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car6(int player)
	{
		if (Car_Bool6[player] == true)
		{
			Car_inttimeout6[player] = Car_inttimeout6[player] + 1;
			if (Car_inttimeout6[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int6[player] = Vehicle_Coord("INSURGENT", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int6[player]) == true)
				{
					Car_inttimeout6[player] = 0;
					Car_Bool6[player] = false;
				}
			}
			else
			{
				Car_inttimeout6[player] = 0;
				Car_Bool6[player] = false;
			}
		}
	}
	bool Car_Bool7[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };
	int Car_int7[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	int Car_inttimeout7[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Spawn_Car7(int player)
	{
		if (Car_Bool7[player] == true)
		{
			Car_inttimeout7[player] = Car_inttimeout7[player] + 1;
			if (Car_inttimeout7[player] < 1000)
			{
				int playerped = PLAYER::GET_PLAYER_PED(player);
				Vector3 playerpos = ENTITY::GET_ENTITY_COORDS(playerped, true);
				float pos[] = { playerpos.x, playerpos.y, playerpos.z };
				Car_int7[player] = Vehicle_Coord("RHINOTANK", pos);
				if (ENTITY::DOES_ENTITY_EXIST(Car_int7[player]) == true)
				{
					Car_inttimeout7[player] = 0;
					Car_Bool7[player] = false;
				}
			}
			else
			{
				Car_inttimeout7[player] = 0;
				Car_Bool7[player] = false;
			}
		}
	}
	bool Max_Car[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };//20 for safe measures
	int Max_Car_Time[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	void Do_Max_Car(int player)
	{
		if (Max_Car[player] == true)
		{
			int playerped = PLAYER::GET_PLAYER_PED(player);
			if (PED::IS_PED_IN_ANY_VEHICLE(playerped, 0))
			{
				int car = PED::GET_VEHICLE_PED_IS_USING(playerped);
				netreq::reqent(car);
				if (netreq::hasent(car))
				{
					Max_Car_void(player);
					Set_Color(255, 0, 0, 255, player);
					Max_Car_Time[player] = 0;
					Max_Car[player] = false;
				}
				else
				{
					Max_Car_Time[player] = Max_Car_Time[player] + 1;
					if (Max_Car_Time[player] > 2000)
					{
						Max_Car_Time[player] = 0;
						Max_Car[player] = false;
					}
				}
			}
			else
			{
				Max_Car_Time[player] = 0;
				Max_Car[player] = false;
			}
		}
	}
	void Do_Mods(int player)
	{
		int playerped = PLAYER::GET_PLAYER_PED(player);
		int weaponhash = WEAPON::GET_SELECTED_PED_WEAPON(playerped);

		//Car 
		int spawnt20 = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL");//Spawn_Car
		int spawntOsiris = GAMEPLAY::GET_HASH_KEY("WEAPON_COMBATPISTOL");//Spawn_Car1
		int spawntAdder = GAMEPLAY::GET_HASH_KEY("WEAPON_PISTOL50");//Spawn_Car2
		int spawntBullet = GAMEPLAY::GET_HASH_KEY("WEAPON_SNSPISTOL");//Spawn_Car3 

		int spawntCheetah = GAMEPLAY::GET_HASH_KEY("WEAPON_HEAVYPISTOL");//Spawn_Car4
		int spawntEntityXF = GAMEPLAY::GET_HASH_KEY("WEAPON_VINTAGEPISTOL");//Spawn_Car5
		int spawntInfernus = GAMEPLAY::GET_HASH_KEY("WEAPON_MARKSMANPISTOL");//Spawn_Car6
		int spawnTyrismoR = GAMEPLAY::GET_HASH_KEY("WEAPON_APPISTOL");//Spawn_Car7
		int maxcar = GAMEPLAY::GET_HASH_KEY("WEAPON_FLAREGUN"); // maxcar  //DONE

																// MISC
		int spawnmoney = GAMEPLAY::GET_HASH_KEY("WEAPON_MINIGUN");//
		int RP = GAMEPLAY::GET_HASH_KEY("WEAPON_SMG");
		int message = GAMEPLAY::GET_HASH_KEY("WEAPON_PUMPSHOTGUN");

		//Teleport
		int TPHost = GAMEPLAY::GET_HASH_KEY("WEAPON_SNIPERRIFLE");
		int TPAirport = GAMEPLAY::GET_HASH_KEY("WEAPON_HEAVYSNIPER");




		if (weaponhash == RP)
		{
			RP_All_Bool[player] = true;
		}
		if (weaponhash == TPHost)
		{
			TP_Host_Bool[player] = true;

		}
		if (weaponhash == TPAirport)
		{
			TP_Airport_Bool[player] = true;
		}
		if (weaponhash == message)
		{
			message1 = true;
			int data;
			if (message1 = true)
			{
				NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &data, 13);
				NETWORK::NETWORK_SEND_TEXT_MESSAGE("Mini-Menu:\nCOMBAT PISTOL = Spawn T20", &data);
				message1 = false;
				Sleep(10);
				message2 = true;

			}
			if (message2 = true)
			{
				NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &data, 13);
				NETWORK::NETWORK_SEND_TEXT_MESSAGE("MINIGUN = Money Drop\nSNS PISTOL = Max Upgrade", &data);
				message2 = false;
				Sleep(10);
				message3 = true;
			}
			if (message3 = true)
			{
				NETWORK::NETWORK_HANDLE_FROM_PLAYER(player, &data, 13);
				NETWORK::NETWORK_SEND_TEXT_MESSAGE("PISTOL = Rank\nCOMBAT MG = $ Bank\nPISTOL .50 = TP To Host", &data);
				Sleep(10);
				message3 = false;
				message1 = false;
				message2 = false;
			}
		}

		if (weaponhash == spawnt20)
		{
			Car_Bool[player] = true;
		}
		if (weaponhash == spawntOsiris)
		{
			Car_Bool1[player] = true;
		}
		if (weaponhash == spawntAdder)
		{
			Car_Bool2[player] = true;
		}
		if (weaponhash == spawntBullet)
		{
			Car_Bool3[player] = true;
		}
		///////
		if (weaponhash == spawntCheetah)
		{
			Car_Bool4[player] = true;
		}
		if (weaponhash == spawntEntityXF)
		{
			Car_Bool5[player] = true;
		}
		if (weaponhash == spawntInfernus)
		{
			Car_Bool6[player] = true;
		}
		if (weaponhash == spawnTyrismoR)
		{
			Car_Bool7[player] = true;
		}

		if (weaponhash == spawnmoney)
		{
			Money_Player(player);
			Money_Player(player);
			Money_Player(player);
			Money_Player(player);
			Money_Player(player);
		}
		if (weaponhash == maxcar)
		{
			Max_Car[player] = true;
		}
	}
	bool enabled1 = false;
	bool hasshot1[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };//20 for safe measures

	bool enabled = false;
	bool hasshot[] = { false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false };//20 for safe measures
	void loop()
	{
		if (enabled == true)
		{
			for (int i = 0; i < 18; i++)
			{
				Money_All(i);
				RP_All(i);
				Spawn_Car(i);
				Spawn_Car1(i);
				Spawn_Car2(i);
				Spawn_Car3(i);
				Spawn_Car4(i);
				Spawn_Car5(i);
				Spawn_Car6(i);
				Spawn_Car7(i);
				Do_Max_Car(i);
				TPtoHost(i);
				Explode_All(i);
				TPAirport(i);
				if (PED::IS_PED_SHOOTING(PLAYER::GET_PLAYER_PED(i)))
				{
					if (hasshot[i] == false)
					{
						hasshot[i] = true;
						Do_Mods(i);
					}
				}
				else
				{
					hasshot[i] = false;
				}
			}
		}
	}
	void loop1()
	{
		if (enabled1 == true)
		{
			Spawn_Car1(selectedPlayer);
			Money_All(selectedPlayer);
			Spawn_Car(selectedPlayer);
			Spawn_Car1(selectedPlayer);
			Spawn_Car2(selectedPlayer);
			Spawn_Car3(selectedPlayer);
			Spawn_Car4(selectedPlayer);
			Spawn_Car5(selectedPlayer);
			Spawn_Car6(selectedPlayer);
			Spawn_Car7(selectedPlayer);

			Do_Max_Car(selectedPlayer);
			TPtoHost(selectedPlayer);
			TPAirport(selectedPlayer);
			Explode_All(selectedPlayer);
			RP_All(selectedPlayer);
			if (PED::IS_PED_SHOOTING(PLAYER::GET_PLAYER_PED(selectedPlayer)))
			{
				if (hasshot1[selectedPlayer] == false)
				{
					hasshot1[selectedPlayer] = true;
					Do_Mods(selectedPlayer);
				}
			}
			else
			{
				hasshot1[selectedPlayer] = false;
			}
		}
	}
	bool toggle1()
	{
		enabled1 = !enabled1;
		sendText1(selectedPlayer, "~r~ExploitCE Mini Menu\nShoot PUMP SHOTGUN For TUT");
		return enabled1;
	}
	bool toggle()
	{
		enabled = !enabled;
		sendText1(selectedPlayer, "~r~ExploitCE Mini Menu\nShoot PUMP SHOTGUN For TUT");
		return enabled;
	}
};













void resetVars()
{
	if (submenu != Closed)
		normalMenuActions();
	optionPress = false;
	rightPress = false;
	leftPress = false;
	fastRightPress = false;
	fastLeftPress = false;
	squarePress = false;
	infoText = NULL;
	instructionsSetupThisFrame = false;
	squareInstruction = false;
	squareInstruction2 = false;
	squareInstruction3 = false;
	squareInstruction4 = false;
	xInstruction = false;
	lrInstruction = false;
	GiveMiniMenu::loop();
	GiveMiniMenu::loop1();
}